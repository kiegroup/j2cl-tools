#macro( methodExecution $testMethod )
actualTest.${testMethod.javaMethodName()}();
#end
#macro( methodExecutions $testMethods )
  #foreach($testMethod in $testMethods)
#methodExecution( $testMethod )
  #end
#end
/**
 * Generated test suite from j2wasm_test target
 */
package ${testClass.jsUnitPackageName()};

import static com.google.j2cl.junit.runtime.JsUnitHelpers.handleAssumptionFailure;

import com.google.j2cl.junit.runtime.InternalAssumptionViolatedException;

@SuppressWarnings("StaticQualifiedUsingExpression")
public class ${testClass.jsUnitAdapterClassName()} {
  private static ${testClass.qualifiedName()} actualTest;

  public static void setUpPageIn${testClass.simpleName()}() throws Throwable {
    try {
      #methodExecutions( $testClass.beforeClassMethods() )
    } catch (InternalAssumptionViolatedException e) {
      handleAssumptionFailure(e);
    }
  }

  public static void tearDownPageIn${testClass.simpleName()}() throws Throwable {
#methodExecutions( $testClass.afterClassMethods() )
  }

  public static void setUpIn${testClass.simpleName()}() throws Throwable {
    actualTest = new ${testClass.qualifiedName()}();
    try {
      #if($testClass.isJUnit3())
      junit.framework.TestCaseViolator.callSetUp(actualTest);
      #end
      #methodExecutions(${testClass.beforeMethods()})
    } catch (InternalAssumptionViolatedException e) {
      handleAssumptionFailure(e);
    }
  }

  public static void tearDownIn${testClass.simpleName()}() throws Throwable {
    if (actualTest == null) {
      // Test failed to be constructed, thus we can not run its teardown
      return;
    }

    try {

  #if($testClass.isJUnit3())
      junit.framework.TestCaseViolator.callTearDown(actualTest);
  #end
  #methodExecutions(${testClass.afterMethods()} )

    } finally {
      // Ensures that the test instance is always reset to null so that if the
      // next test fails to construct the instance in the setUp, the instance
      // will be null and that will prevent the tearDown from running.
      actualTest = null;
    }
  }

#foreach($testMethod in ${testClass.testMethods()})
  public static void ${testMethod.jsTestMethodName()}In${testClass.simpleName()}() throws Throwable {

    try {
      #methodExecution( $testMethod )
    } catch (InternalAssumptionViolatedException e) {
      handleAssumptionFailure(e);
#if ($testMethod.expectedExceptionQualifiedName())
    } catch (${testMethod.expectedExceptionQualifiedName()} e) {
      return;
    }
    throw new Exception("expected exception was not thrown");
#else
    }
#end
  }
#end

}
