// Generated from "jsconstructor/JsConstructorClass.java"
@file:OptIn(ExperimentalObjCName::class)
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "REPEATED_BOUND",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_ANONYMOUS_PARAMETER",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER")

package jsconstructor

import javaemul.lang.*
import jsinterop.annotations.JsConstructor
import jsinterop.annotations.JsType
import kotlin.Any
import kotlin.Int
import kotlin.OptIn
import kotlin.Suppress
import kotlin.experimental.ExperimentalObjCName
import kotlin.jvm.JvmField
import kotlin.jvm.JvmStatic
import kotlin.native.ObjCName

@ObjCName("J2ktJsconstructorJsConstructorClass", exact = true)
open class JsConstructorClass {
 @ObjCName("J2ktJsconstructorJsConstructorClass_A", exact = true)
 open class A {
  @JvmField
  @ObjCName("fA_")
  var fA: Int = 1

  constructor(
   @ObjCName("Int") x: Int
  ) {
   this.fA = x
  }

  constructor()
 }

 @ObjCName("J2ktJsconstructorJsConstructorClass_B", exact = true)
 open class B: JsConstructorClass.A {
  @JvmField
  @ObjCName("fB_")
  var fB: Int = 2

  @JsConstructor
  constructor(
   @ObjCName("Int") x: Int
  ): super(x + 1) {
   this.fB = 3
  }

  constructor(): this(10) {
   this.fB = 4
  }

  constructor(
   @ObjCName("Int") x: Int,
   @ObjCName("withInt") y: Int
  ): this(x + y) {
   this.fB = x * y
  }
 }

 @ObjCName("J2ktJsconstructorJsConstructorClass_C", exact = true)
 open class C: JsConstructorClass.B {
  @JvmField
  @ObjCName("fC_")
  var fC: Int = 1

  @JsConstructor
  constructor(
   @ObjCName("Int") x: Int
  ): super(x * 2) {
   this.fC = 6
  }

  constructor(
   @ObjCName("Int") x: Int,
   @ObjCName("withInt") y: Int
  ): this(x + y) {
   this.fC = 7
  }
 }

 @ObjCName("J2ktJsconstructorJsConstructorClass_D", exact = true)
 open class D: JsConstructorClass.B {
  @JvmField
  @ObjCName("fD_")
  var fD: Int = 8

  @JsConstructor
  constructor(): super(9) {
   this.fD = 10
  }

  constructor(
   @ObjCName("Int") x: Int
  ): this() {
   this.fD = x
  }
 }

 @ObjCName("J2ktJsconstructorJsConstructorClass_E", exact = true)
 open class E: JsConstructorClass.C {
  @JvmField
  @ObjCName("fE_")
  var fE: Int = 11

  @JsConstructor
  constructor(): super(10) {
   this.fE = 12
  }
 }

 @ObjCName("J2ktJsconstructorJsConstructorClass_F", exact = true)
 open class F: JsConstructorClass.C {
  @JvmField
  @ObjCName("fF_")
  var fF: Int = 13

  @JsConstructor
  constructor(
   @ObjCName("Int") x: Int
  ): super(x + 2) {
   this.fF = x + 3
  }
 }

 @ObjCName("J2ktJsconstructorJsConstructorClass_G", exact = true)
 @JsType
 open class G {}

 @ObjCName("J2ktJsconstructorJsConstructorClass_H", exact = true)
 open class H: JsConstructorClass.G {
  @JsConstructor
  constructor()
 }

 @ObjCName("J2ktJsconstructorJsConstructorClass_Outer", exact = true)
 open class Outer {
  @ObjCName("J2ktJsconstructorJsConstructorClass_Outer_I", exact = true)
  open inner class I @JsConstructor constructor(): JsConstructorClass.G() {}
 }

 @ObjCName("J2ktJsconstructorJsConstructorClass_Varargs", exact = true)
 open class Varargs: JsConstructorClass.A {
  @JsConstructor
  constructor(
   vararg @ObjCName("IntArray") args: Int
  ): super(args!![1])
 }

 @ObjCName("J2ktJsconstructorJsConstructorClass_SubVarargs", exact = true)
 open class SubVarargs: JsConstructorClass.Varargs {
  @JsConstructor
  constructor(
   @ObjCName("Id") i: Any?,
   vararg @ObjCName("withIntArray") args: Int
  ): super(*args!!)

  constructor(
   @ObjCName("Int") j: Int
  ): this(Any(), j)

  @ObjCName("J2ktJsconstructorJsConstructorClass_SubVarargsCompanion", exact = true)
  companion object {
   @JvmStatic
   internal fun subNativeInvocation_pp_jsconstructor() {
    val unusedS1: JsConstructorClass.SubVarargs? = JsConstructorClass.SubVarargs(2)
    val unusedS2: JsConstructorClass.SubVarargs? = JsConstructorClass.SubVarargs(Any(), 1, 2, 3)
   }
  }
 }

 @ObjCName("J2ktJsconstructorJsConstructorClass_InstanceVarargs", exact = true)
 open inner class InstanceVarargs @JsConstructor constructor(
  vararg @ObjCName("IntArray") args: Int
 ): JsConstructorClass.A(args!![1]) {}

 @ObjCName("J2ktJsconstructorJsConstructorClass_RegularType", exact = true)
 open class RegularType {
  constructor(
   @ObjCName("Id") b: Any?
  )
 }

 @ObjCName("J2ktJsconstructorJsConstructorClass_JsConstructorSubtypeOfRegularType", exact = true)
 open class JsConstructorSubtypeOfRegularType: JsConstructorClass.RegularType {
  @JsConstructor
  constructor(
   @ObjCName("Id") `object`: Any?
  ): super(`object`)

  constructor(): this(Any())
 }
}
