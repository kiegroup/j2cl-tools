[RegExp] => [importglobaljstypes_RegExp]
[RegExp] => [constructor]
[RegExp] => [super();] "importglobaljstypes.RegExp.<synthetic: ctor_js>"
[RegExp] => [$create__]
[RegExp] => [importglobaljstypes_RegExp.$clinit();] "importglobaljstypes.RegExp.<synthetic: ctor_create>"
[RegExp] => [let $instance = new importglobaljstypes_RegExp();] "importglobaljstypes.RegExp.<synthetic: ctor_create>"
[RegExp] => [$instance.$ctor__importglobaljstypes_RegExp__void();] "importglobaljstypes.RegExp.<synthetic: ctor_create>"
[RegExp] => [return $instance;] "importglobaljstypes.RegExp.<synthetic: ctor_create>"
[RegExp] => [$ctor__importglobaljstypes_RegExp__void]
[RegExp] => [this.$ctor__java_lang_Object__void();] "importglobaljstypes.RegExp.<init>"
[test] => [m_test__void]
[{
    NativeRegExp regExp = new NativeRegExp("teststring");
...    String str = regExp.toString();
  }] => [importglobaljstypes_RegExp.$clinit();] "importglobaljstypes.RegExp.test"
[NativeRegExp regExp = new NativeRegExp("teststring");] => [let regExp = new RegExp('teststring');] "importglobaljstypes.RegExp.test"
[regExp] => [regExp] "regExp"
[regExp.test("restString");] => [regExp.test('restString');] "importglobaljstypes.RegExp.test"
[String str = regExp.toString();] => [let str = regExp.toString();] "importglobaljstypes.RegExp.test"
[str] => [str] "str"
[RegExp] => [$clinit]
[RegExp] => [importglobaljstypes_RegExp.$clinit = () =>{};] "importglobaljstypes.RegExp.<clinit>"
[RegExp] => [importglobaljstypes_RegExp.$loadModules();] "importglobaljstypes.RegExp.<clinit>"
[RegExp] => [j_l_Object.$clinit();] "importglobaljstypes.RegExp.<clinit>"
