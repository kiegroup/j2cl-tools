// Generated from "synchronizedmethod/SynchronizedMethod.java"
@file:OptIn(ExperimentalObjCName::class)
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "REPEATED_BOUND",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_ANONYMOUS_PARAMETER",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER")

package synchronizedmethod

import javaemul.lang.*
import kotlin.Boolean
import kotlin.Int
import kotlin.OptIn
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.experimental.ExperimentalObjCName
import kotlin.jvm.JvmField
import kotlin.jvm.JvmStatic
import kotlin.jvm.javaObjectType
import kotlin.native.ObjCName
import kotlin.run
import kotlin.synchronized

@ObjCName("J2ktSynchronizedmethodSynchronizedMethod", exact = true)
open class SynchronizedMethod {
 @JvmField
 internal var a_private_2: Int = 0

 @JvmField
 internal var b_private_2: Int = 0

 @ObjCName("testNonStatic")
 open fun testNonStatic() {
  synchronized<Unit>(this) {
   this.a_private_2 = this.a_private_2 + 1
   this.b_private_2 = this.b_private_2 - 1
  }
 }

 @ObjCName("testReturn")
 open fun testReturn(
  @ObjCName("withBoolean") bool: Boolean
 ): Int {
  synchronized<Unit>(this) {
   if (bool) {
    return run {
     val ___value: Int = this.a_private_2
     this.a_private_2 = this.a_private_2 + 1
     ___value
    }
   }
   return run {
    val ___value_1: Int = this.b_private_2
    this.b_private_2 = this.b_private_2 - 1
    ___value_1
   }
  }
 }

 @ObjCName("testIfStatementWithNonVoidBodyWithoutElse")
 open fun testIfStatementWithNonVoidBodyWithoutElse(
  @ObjCName("withBoolean") b1: Boolean,
  @ObjCName("withBoolean") b2: Boolean
 ) {
  synchronized<Unit>(this) {
   if (b1) {
    this.apply_private_2("foo")
   } else if (b2) {
    this.apply_private_2("bar")
   }
  }
 }

 internal fun apply_private_2(string: String?): String? {
  return string
 }

 @ObjCName("J2ktSynchronizedmethodSynchronizedMethodCompanion", exact = true)
 companion object {
  @JvmField
  internal var sa_private_2: Int = 0

  @JvmField
  internal var sb_private_2: Int = 0

  @JvmStatic
  @ObjCName("testStatic")
  fun testStatic() {
   synchronized<Unit>(SynchronizedMethod::class.javaObjectType) {
    SynchronizedMethod.sa_private_2 = SynchronizedMethod.sa_private_2 + 1
    SynchronizedMethod.sb_private_2 = SynchronizedMethod.sb_private_2 - 1
   }
  }
 }
}
