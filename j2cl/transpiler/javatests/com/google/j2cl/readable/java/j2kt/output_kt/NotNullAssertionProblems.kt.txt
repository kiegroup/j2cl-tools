// Generated from "j2kt/NotNullAssertionProblems.java"
@file:OptIn(ExperimentalObjCName::class)
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_ANONYMOUS_PARAMETER",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER",
 "REDUNDANT_ELSE_IN_WHEN")

package j2kt

import javaemul.lang.*
import kotlin.Any
import kotlin.Array
import kotlin.OptIn
import kotlin.String
import kotlin.Suppress
import kotlin.arrayOf
import kotlin.experimental.ExperimentalObjCName
import kotlin.jvm.JvmField
import kotlin.jvm.JvmStatic
import kotlin.native.ObjCName

@ObjCName("J2ktJ2ktNotNullAssertionProblems", exact = true)
open class NotNullAssertionProblems {
 @ObjCName("testArrayLiteral")
 open fun testArrayLiteral(
  @ObjCName("withNSString") string: String,
  @ObjCName("withNSString") nullableString: String?
 ) {
  val array1: Array<String?>? = arrayOf<String>(string, null!!) as Array<String?>?
  val array2: Array<String?>? = arrayOf<String>(string, nullableString!!) as Array<String?>?
  val array3: Array<String?>? = arrayOf<String>(null!!, string) as Array<String?>?
  val array4: Array<String?>? = arrayOf<String>(nullableString!!, string) as Array<String?>?
 }

 @ObjCName("testNewArray")
 open fun testNewArray(
  @ObjCName("withNSString") string: String,
  @ObjCName("withNSString") nullableString: String?
 ) {
  val array1: Array<String?>? = arrayOf<String?>(string, null)
  val array2: Array<String?>? = arrayOf<String?>(string, nullableString)
  val array3: Array<String?>? = arrayOf<String?>(null, string)
  val array4: Array<String?>? = arrayOf<String?>(nullableString, string)
 }

 @ObjCName("testExplicitInvocationTypeArguments")
 open fun testExplicitInvocationTypeArguments(
  @ObjCName("withNSString") string: String,
  @ObjCName("withJ2ktNotNullAssertionProblems_Supplier") supplier: NotNullAssertionProblems.Supplier<String>,
  @ObjCName("withNSString") nullableString: String?
 ) {
  NotNullAssertionProblems.accept1<String?>(null)
  NotNullAssertionProblems.accept2<String?>(string, null)
  NotNullAssertionProblems.accept2<String?>(string, nullableString)
  NotNullAssertionProblems.accept2<String?>(null, string)
  NotNullAssertionProblems.accept2<String?>(nullableString, string)
  NotNullAssertionProblems.acceptVararg<String?>(string, null)
  NotNullAssertionProblems.acceptVararg<String?>(string, nullableString)
  NotNullAssertionProblems.acceptVararg<String?>(null, string)
  NotNullAssertionProblems.acceptVararg<String?>(nullableString, string)
  NotNullAssertionProblems.acceptGeneric<String?>(supplier as NotNullAssertionProblems.Supplier<String?>, nullableString)
  NotNullAssertionProblems.acceptUpperBound<String?>(supplier as NotNullAssertionProblems.Supplier<String>, nullableString)
 }

 @ObjCName("testImplicitInvocationTypeArguments")
 open fun testImplicitInvocationTypeArguments(
  @ObjCName("withNSString") string: String,
  @ObjCName("withJ2ktNotNullAssertionProblems_Supplier") supplier: NotNullAssertionProblems.Supplier<String>,
  @ObjCName("withNSString") nullableString: String?
 ) {
  NotNullAssertionProblems.accept1<Any>(null!!)
  NotNullAssertionProblems.accept2<String>(string, null!!)
  NotNullAssertionProblems.accept2<String>(string, nullableString!!)
  NotNullAssertionProblems.accept2<String>(null!!, string)
  NotNullAssertionProblems.accept2<String?>(nullableString, string)
  NotNullAssertionProblems.acceptVararg<String>(string, null!!)
  NotNullAssertionProblems.acceptVararg<String>(string, nullableString!!)
  NotNullAssertionProblems.acceptVararg<String>(null!!, string)
  NotNullAssertionProblems.acceptVararg<String?>(nullableString, string)
  NotNullAssertionProblems.acceptGeneric<String>(supplier, nullableString!!)
  NotNullAssertionProblems.acceptUpperBound<String>(supplier, nullableString!!)
 }

 @ObjCName("testExplicitConstructorTypeArguments")
 open fun testExplicitConstructorTypeArguments(
  @ObjCName("withNSString") string: String,
  @ObjCName("withJ2ktNotNullAssertionProblems_Supplier") supplier: NotNullAssertionProblems.Supplier<String>,
  @ObjCName("withNSString") nullableString: String?
 ) {
  NotNullAssertionProblems.Consumer<String?>(null)
  NotNullAssertionProblems.Consumer<String?>(string, null)
  NotNullAssertionProblems.Consumer<String?>(string, nullableString)
  NotNullAssertionProblems.Consumer<String?>(null, string)
  NotNullAssertionProblems.Consumer<String?>(nullableString, string)
  NotNullAssertionProblems.VarargConsumer<String?>(string, null)
  NotNullAssertionProblems.VarargConsumer<String?>(string, nullableString)
  NotNullAssertionProblems.VarargConsumer<String?>(null, string)
  NotNullAssertionProblems.VarargConsumer<String?>(nullableString, string)
  NotNullAssertionProblems.GenericConsumer<String?>(supplier as NotNullAssertionProblems.Supplier<String?>, nullableString)
  NotNullAssertionProblems.UpperWildcardConsumer<String?>(supplier as NotNullAssertionProblems.Supplier<String>, nullableString)
 }

 @ObjCName("testImplicitConstructorTypeArguments")
 open fun testImplicitConstructorTypeArguments(
  @ObjCName("withNSString") string: String,
  @ObjCName("withJ2ktNotNullAssertionProblems_Supplier") supplier: NotNullAssertionProblems.Supplier<String>,
  @ObjCName("withNSString") nullableString: String?
 ) {
  NotNullAssertionProblems.Consumer<Any>(null!!)
  NotNullAssertionProblems.Consumer<String>(string, null!!)
  NotNullAssertionProblems.Consumer<String>(string, nullableString!!)
  NotNullAssertionProblems.Consumer<String>(null!!, string)
  NotNullAssertionProblems.Consumer<String?>(nullableString, string)
  NotNullAssertionProblems.VarargConsumer<String>(string, null!!)
  NotNullAssertionProblems.VarargConsumer<String>(string, nullableString!!)
  NotNullAssertionProblems.VarargConsumer<String>(null!!, string)
  NotNullAssertionProblems.VarargConsumer<String?>(nullableString, string)
  NotNullAssertionProblems.GenericConsumer<String>(supplier, nullableString!!)
  NotNullAssertionProblems.UpperWildcardConsumer<String>(supplier, nullableString!!)
 }

 @ObjCName("testImplicitRawConstructorTypeArguments")
 open fun testImplicitRawConstructorTypeArguments(
  @ObjCName("withNSString") string: String,
  @ObjCName("withJ2ktNotNullAssertionProblems_Supplier") supplier: NotNullAssertionProblems.Supplier<String>,
  @ObjCName("withNSString") nullableString: String?
 ) {
  NotNullAssertionProblems.Consumer<Any?>(null)
  NotNullAssertionProblems.Consumer<Any?>(string, null)
  NotNullAssertionProblems.Consumer<Any?>(string, nullableString)
  NotNullAssertionProblems.Consumer<Any?>(null, string)
  NotNullAssertionProblems.Consumer<Any?>(nullableString, string)
  NotNullAssertionProblems.VarargConsumer<Any?>(string, null)
  NotNullAssertionProblems.VarargConsumer<Any?>(string, nullableString)
  NotNullAssertionProblems.VarargConsumer<Any?>(null, string)
  NotNullAssertionProblems.VarargConsumer<Any?>(nullableString, string)
  NotNullAssertionProblems.GenericConsumer<Any?>(supplier as NotNullAssertionProblems.Supplier<Any?>, nullableString)
  NotNullAssertionProblems.UpperWildcardConsumer<Any?>(supplier as NotNullAssertionProblems.Supplier<Any?>, nullableString)
 }

 @ObjCName("J2ktJ2ktNotNullAssertionProblemsCompanion", exact = true)
 companion object {
  @JvmStatic
  @ObjCName("testImplicitInvocationTypeArguments_wildcards")
  fun testImplicitInvocationTypeArguments_wildcards(
   @ObjCName("withNSString") string: String,
   @ObjCName("withJ2ktNotNullAssertionProblems_Supplier") wildcardSupplier: NotNullAssertionProblems.Supplier<*>
  ) {
   NotNullAssertionProblems.accept1(wildcardSupplier.getValue())
   NotNullAssertionProblems.accept2<Any?>(string, wildcardSupplier.getValue())
   NotNullAssertionProblems.acceptVararg<Any?>(string, wildcardSupplier.getValue())
  }

  @JvmStatic
  @ObjCName("testImplicitConstructorTypeArguments_wildcards")
  fun testImplicitConstructorTypeArguments_wildcards(
   @ObjCName("withNSString") string: String,
   @ObjCName("withJ2ktNotNullAssertionProblems_Supplier") wildcardSupplier: NotNullAssertionProblems.Supplier<*>
  ) {
   NotNullAssertionProblems.Consumer(wildcardSupplier.getValue())
   NotNullAssertionProblems.Consumer<Any?>(string, wildcardSupplier.getValue())
   NotNullAssertionProblems.VarargConsumer<Any?>(string, wildcardSupplier.getValue())
  }

  @JvmStatic
  @ObjCName("testRawConstructorTypeArguments_wildcards")
  fun testRawConstructorTypeArguments_wildcards(
   @ObjCName("withNSString") string: String,
   @ObjCName("withJ2ktNotNullAssertionProblems_Supplier") wildcardSupplier: NotNullAssertionProblems.Supplier<*>
  ) {
   NotNullAssertionProblems.Consumer<Any?>(wildcardSupplier.getValue())
   NotNullAssertionProblems.Consumer<Any?>(string, wildcardSupplier.getValue())
   NotNullAssertionProblems.VarargConsumer<Any?>(string, wildcardSupplier.getValue())
  }

  @JvmStatic
  @ObjCName("testImplicitConstructorTypeArguments_inference")
  fun testImplicitConstructorTypeArguments_inference(
   @ObjCName("withNSString") string: String
  ) {
   NotNullAssertionProblems.Consumer<String>(string, null!!).accept(null!!)
   NotNullAssertionProblems.VarargConsumer<String>(string, null!!).accept(null!!)
  }

  @JvmStatic
  @ObjCName("accept1")
  fun <T> accept1(
   @ObjCName("withId") t: T
  ) {}

  @JvmStatic
  @ObjCName("accept2")
  fun <T> accept2(
   @ObjCName("withId") t1: T,
   @ObjCName("withId") t2: T
  ) {}

  @JvmStatic
  @ObjCName("acceptUpperBound")
  fun <T> acceptUpperBound(
   @ObjCName("withJ2ktNotNullAssertionProblems_Supplier") t1: NotNullAssertionProblems.Supplier<out T>,
   @ObjCName("withId") t2: T
  ) {}

  @JvmStatic
  @ObjCName("acceptGeneric")
  fun <T> acceptGeneric(
   @ObjCName("withJ2ktNotNullAssertionProblems_Supplier") t1: NotNullAssertionProblems.Supplier<T>,
   @ObjCName("withId") t2: T
  ) {}

  @JvmStatic
  @ObjCName("acceptVararg")
  fun <T> acceptVararg(
   vararg @ObjCName("withNSObjectArray") varargs: T
  ) {
   val varargs_1: Array<T> = varargs as Array<T>
  }
 }

 @ObjCName("J2ktJ2ktNotNullAssertionProblems_Consumer", exact = true)
 open class Consumer<T> {
  constructor(
   @ObjCName("Id") t: T
  )

  constructor(
   @ObjCName("Id") t1: T,
   @ObjCName("withId") t2: T
  )

  @ObjCName("accept")
  open fun accept(
   @ObjCName("withId") t: T
  ) {}
 }

 @ObjCName("J2ktJ2ktNotNullAssertionProblems_VarargConsumer", exact = true)
 open class VarargConsumer<T> {
  constructor(
   vararg @ObjCName("NSObjectArray") ts: T
  ) {
   val ts_1: Array<T> = ts as Array<T>
  }

  @ObjCName("accept")
  open fun accept(
   @ObjCName("withId") t: T
  ) {}
 }

 @ObjCName("J2ktJ2ktNotNullAssertionProblems_GenericConsumer", exact = true)
 open class GenericConsumer<T> {
  constructor(
   @ObjCName("J2ktNotNullAssertionProblems_Supplier") supplier: NotNullAssertionProblems.Supplier<T>,
   @ObjCName("withId") t: T
  )

  @ObjCName("accept")
  open fun accept(
   @ObjCName("withId") t: T
  ) {}
 }

 @ObjCName("J2ktJ2ktNotNullAssertionProblems_UpperWildcardConsumer", exact = true)
 open class UpperWildcardConsumer<T> {
  constructor(
   @ObjCName("J2ktNotNullAssertionProblems_Supplier") supplier: NotNullAssertionProblems.Supplier<out T>,
   @ObjCName("withId") t: T
  )

  @ObjCName("accept")
  open fun accept(
   @ObjCName("withId") t: T
  ) {}
 }

 @ObjCName("J2ktJ2ktNotNullAssertionProblems_C", exact = true)
 open class C<V> internal constructor() {
  @JvmField
  internal var defaultValue_pp_j2kt: V = null as V? as V

  internal open fun f_pp_j2kt(): V {
   return (if (true) this.defaultValue_pp_j2kt else this.defaultValue_pp_j2kt) as V
  }
 }

 @ObjCName("J2ktJ2ktNotNullAssertionProblems_Supplier", exact = true)
 fun interface Supplier<V> {
  @ObjCName("getValue")
  fun getValue(): V
 }
}
