goog.module('interfaces.Main.Interface$impl');

const $Util = goog.require('nativebootstrap.Util$impl');

let $LambdaAdaptor = goog.forwardDeclare('interfaces.Main.Interface.$LambdaAdaptor$impl');

/**
 * @interface
 * @template T
 */
class Interface {
 /** @abstract @nodts */
 m_interfaceMethod__void() {}
 /** @abstract @nodts */
 m_defaultMethod__java_lang_Object__void(/** T */ t) {}
 /** @nodts */
 static m_staticInterfaceMethod__void() {
  Interface.$clinit();
 }
 /** @nodts @template T @return {Interface<T>} */
 static $adapt(/** ?function():void */ fn) {
  Interface.$clinit();
  return /**@type {!$LambdaAdaptor<T>}*/ (new $LambdaAdaptor(fn));
 }
 /** @nodts @template T */
 static m_defaultMethod__$default__interfaces_Main_Interface__java_lang_Object__void(/** !Interface<T> */ $thisArg, /** T */ t) {
  Interface.$clinit();
  Interface.m_privateMethod__$private__interfaces_Main_Interface__java_lang_Object__void($thisArg, t);
 }
 /** @nodts @template T */
 static m_privateMethod__$private__interfaces_Main_Interface__java_lang_Object__void(/** !Interface<T> */ $thisArg, /** T */ t) {}
 /** @nodts */
 static $clinit() {
  Interface.$clinit = () =>{};
  Interface.$loadModules();
 }
 
 static $markImplementor(/** Function */ ctor) {
  ctor.prototype.$implements__interfaces_Main_Interface = true;
 }
 /** @nodts @return {boolean} */
 static $isInstance(/** ? */ instance) {
  return instance != null && !!instance.$implements__interfaces_Main_Interface;
 }
 
 /** @nodts */
 static $loadModules() {
  $LambdaAdaptor = goog.module.get('interfaces.Main.Interface.$LambdaAdaptor$impl');
 }
}
/**@const {number} @nodts*/
Interface.f_a__interfaces_Main_Interface = 1;
/**@const {number} @nodts*/
Interface.f_b__interfaces_Main_Interface = 2;
Interface.$markImplementor(/**@type {Function}*/ (Interface));
$Util.$setClassMetadataForInterface(Interface, 'interfaces.Main$Interface');

exports = Interface;

//# sourceMappingURL=Main$Interface.js.map
