// Generated from "j2kt/UnboundWildcards.java"
@file:OptIn(ExperimentalObjCName::class)
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_ANONYMOUS_PARAMETER",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER",
 "REDUNDANT_ELSE_IN_WHEN")

package j2kt

import javaemul.lang.*
import kotlin.Any
import kotlin.OptIn
import kotlin.Suppress
import kotlin.experimental.ExperimentalObjCName
import kotlin.jvm.JvmStatic
import kotlin.native.ObjCName

@ObjCName("J2ktJ2ktUnboundWildcards", exact = true)
open class UnboundWildcards {
 @ObjCName("J2ktJ2ktUnboundWildcardsCompanion", exact = true)
 companion object {
  @JvmStatic
  @ObjCName("testNullable")
  fun testNullable(
   @ObjCName("withJ2ktUnboundWildcards_Foo") foo: UnboundWildcards.Foo<*>
  ) {
   UnboundWildcards.acceptNullable(foo)
  }

  @JvmStatic
  @ObjCName("testNonNull")
  fun testNonNull(
   @ObjCName("withJ2ktUnboundWildcards_Foo") foo: UnboundWildcards.Foo<out Any>
  ) {
   UnboundWildcards.acceptNonNull(foo)
   UnboundWildcards.acceptNullable(foo)
  }

  @JvmStatic
  @ObjCName("acceptNullable")
  fun <T> acceptNullable(
   @ObjCName("withJ2ktUnboundWildcards_Foo") foo: UnboundWildcards.Foo<T>
  ) {}

  @JvmStatic
  @ObjCName("acceptNonNull")
  fun <T: Any> acceptNonNull(
   @ObjCName("withJ2ktUnboundWildcards_Foo") foo: UnboundWildcards.Foo<T>
  ) {}
 }

 @ObjCName("J2ktJ2ktUnboundWildcards_Foo", exact = true)
 interface Foo<T> {}
}
