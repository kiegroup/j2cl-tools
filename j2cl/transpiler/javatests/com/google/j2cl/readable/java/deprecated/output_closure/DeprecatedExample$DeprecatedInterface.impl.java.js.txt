goog.module('deprecated.DeprecatedExample.DeprecatedInterface$impl');

const $Util = goog.require('nativebootstrap.Util$impl');

let $LambdaAdaptor = goog.forwardDeclare('deprecated.DeprecatedExample.DeprecatedInterface.$LambdaAdaptor$impl');

/**
 * @interface
 * @deprecated
 */
class DeprecatedInterface {
 /** @abstract @deprecated */
 doAThing(/** number */ anInt) {}
 /** @nodts @return {DeprecatedInterface} */
 static $adapt(/** ?function(number):void */ fn) {
  DeprecatedInterface.$clinit();
  return new $LambdaAdaptor(fn);
 }
 /** @nodts */
 static $clinit() {
  DeprecatedInterface.$clinit = () =>{};
  DeprecatedInterface.$loadModules();
 }
 
 static $markImplementor(/** Function */ ctor) {
  ctor.prototype.$implements__deprecated_DeprecatedExample_DeprecatedInterface = true;
 }
 /** @nodts @return {boolean} */
 static $isInstance(/** ? */ instance) {
  return instance != null && !!instance.$implements__deprecated_DeprecatedExample_DeprecatedInterface;
 }
 
 /** @nodts */
 static $loadModules() {
  $LambdaAdaptor = goog.module.get('deprecated.DeprecatedExample.DeprecatedInterface.$LambdaAdaptor$impl');
 }
}
DeprecatedInterface.$markImplementor(/**@type {Function}*/ (DeprecatedInterface));
$Util.$setClassMetadataForInterface(DeprecatedInterface, 'deprecated.DeprecatedExample$DeprecatedInterface');

exports = DeprecatedInterface;

//# sourceMappingURL=DeprecatedExample$DeprecatedInterface.js.map
