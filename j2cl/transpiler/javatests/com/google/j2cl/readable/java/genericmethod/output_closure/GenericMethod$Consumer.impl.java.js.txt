goog.module('genericmethod.GenericMethod.Consumer$impl');

const $Util = goog.require('nativebootstrap.Util$impl');

let $LambdaAdaptor = goog.forwardDeclare('genericmethod.GenericMethod.Consumer.$LambdaAdaptor$impl');

/**
 * @interface
 * @template V
 */
class Consumer {
 /** @abstract @nodts */
 m_accept__java_lang_Object__void(/** V */ v) {}
 /** @nodts @template V @return {Consumer<V>} */
 static $adapt(/** ?function(V):void */ fn) {
  Consumer.$clinit();
  return /**@type {!$LambdaAdaptor<V>}*/ (new $LambdaAdaptor(fn));
 }
 /** @nodts */
 static $clinit() {
  Consumer.$clinit = () =>{};
  Consumer.$loadModules();
 }
 
 static $markImplementor(/** Function */ ctor) {
  ctor.prototype.$implements__genericmethod_GenericMethod_Consumer = true;
 }
 /** @nodts @return {boolean} */
 static $isInstance(/** ? */ instance) {
  return instance != null && !!instance.$implements__genericmethod_GenericMethod_Consumer;
 }
 
 /** @nodts */
 static $loadModules() {
  $LambdaAdaptor = goog.module.get('genericmethod.GenericMethod.Consumer.$LambdaAdaptor$impl');
 }
}
Consumer.$markImplementor(/**@type {Function}*/ (Consumer));
$Util.$setClassMetadataForInterface(Consumer, 'genericmethod.GenericMethod$Consumer');

exports = Consumer;

//# sourceMappingURL=GenericMethod$Consumer.js.map
