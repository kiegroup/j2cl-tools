[InferReturn] => [InferReturn]
[InferReturn] => [constructor]
[InferReturn] => [super();] "inferreturn.InferReturn.<synthetic: ctor_js>"
[InferReturn] => [$create__]
[InferReturn] => [InferReturn.$clinit();] "inferreturn.InferReturn.<synthetic: ctor_create>"
[InferReturn] => [let $instance = new InferReturn();] "inferreturn.InferReturn.<synthetic: ctor_create>"
[InferReturn] => [$instance.$ctor__inferreturn_InferReturn__void();] "inferreturn.InferReturn.<synthetic: ctor_create>"
[InferReturn] => [return $instance;] "inferreturn.InferReturn.<synthetic: ctor_create>"
[InferReturn] => [$ctor__inferreturn_InferReturn__void]
[InferReturn] => [this.$ctor__java_lang_Object__void();] "inferreturn.InferReturn.<init>"
[inferGeneric] => [m_inferGeneric__java_lang_Object__inferreturn_InferReturn]
[foo] => [foo] "foo"
[{
    return new InferReturn<>();
  }] => [InferReturn.$clinit();] "inferreturn.InferReturn.inferGeneric"
[return new InferReturn<>();] => [return /**@type {!InferReturn<T_1>}*/ (InferReturn.$create__());] "inferreturn.InferReturn.inferGeneric"
[tightenType] => [m_tightenType__inferreturn_InferReturn__inferreturn_InferReturn]
[foo] => [foo] "foo"
[{
    if (foo != null) {
...    return null;
  }] => [InferReturn.$clinit();] "inferreturn.InferReturn.tightenType"
[if (foo != null) {
      // Without a cast to fix it, JSCompiler will infer the type of this return statement to be
...      return inferGeneric(foo);
    }] => [if (!$Equality.$same(foo, null)) {
   return /**@type {InferReturn<InferReturn<?string>>}*/ (InferReturn.m_inferGeneric__java_lang_Object__inferreturn_InferReturn(foo));
  }] "inferreturn.InferReturn.tightenType"
[return inferGeneric(foo);] => [return /**@type {InferReturn<InferReturn<?string>>}*/ (InferReturn.m_inferGeneric__java_lang_Object__inferreturn_InferReturn(foo));] "inferreturn.InferReturn.tightenType"
[return null;] => [return null;] "inferreturn.InferReturn.tightenType"
[main] => [m_main__void]
[{
    ArrayList<Object> list = newArrayList("foo");
...    acceptsArrayOfObject(array);
  }] => [InferReturn.$clinit();] "inferreturn.InferReturn.main"
[ArrayList<Object> list = newArrayList("foo");] => [let list = /**@type {ArrayList<*>}*/ (InferReturn.m_newArrayList__java_lang_Object__java_util_ArrayList('foo'));] "inferreturn.InferReturn.main"
[list] => [list] "list"
[acceptsArrayListOfObject(list);] => [InferReturn.m_acceptsArrayListOfObject__java_util_ArrayList__void(list);] "inferreturn.InferReturn.main"
[Object[] array = newArray("foo");] => [let array = InferReturn.m_newArray__java_lang_Object__arrayOf_java_lang_Object('foo');] "inferreturn.InferReturn.main"
[array] => [array] "array"
[acceptsArrayOfObject(array);] => [InferReturn.m_acceptsArrayOfObject__arrayOf_java_lang_Object__void(array);] "inferreturn.InferReturn.main"
[newArrayList] => [m_newArrayList__java_lang_Object__java_util_ArrayList]
[foo] => [foo] "foo"
[{
    return new ArrayList<>();
  }] => [InferReturn.$clinit();] "inferreturn.InferReturn.newArrayList"
[return new ArrayList<>();] => [return /**@type {!ArrayList<V>}*/ (ArrayList.$create__());] "inferreturn.InferReturn.newArrayList"
[newArray] => [m_newArray__java_lang_Object__arrayOf_java_lang_Object]
[foo] => [foo] "foo"
[{
    return (V[]) new Object[0];
  }] => [InferReturn.$clinit();] "inferreturn.InferReturn.newArray"
[return (V[]) new Object[0];] => [return /**@type {!Array<V>}*/ (new Array(0));] "inferreturn.InferReturn.newArray"
[acceptsArrayListOfObject] => [m_acceptsArrayListOfObject__java_util_ArrayList__void]
[foo] => [foo] "foo"
[{
    // empty
  }] => [InferReturn.$clinit();] "inferreturn.InferReturn.acceptsArrayListOfObject"
[acceptsArrayOfObject] => [m_acceptsArrayOfObject__arrayOf_java_lang_Object__void]
[foo] => [foo] "foo"
[{
    // empty
  }] => [InferReturn.$clinit();] "inferreturn.InferReturn.acceptsArrayOfObject"
[InferReturn] => [$clinit]
[InferReturn] => [InferReturn.$clinit = () =>{};] "inferreturn.InferReturn.<clinit>"
[InferReturn] => [InferReturn.$loadModules();] "inferreturn.InferReturn.<clinit>"
[InferReturn] => [j_l_Object.$clinit();] "inferreturn.InferReturn.<clinit>"
