// Generated from "staticjsmethodswithclassnamespace/StaticJsMethodsWithClassNamespace.java"
@file:OptIn(ExperimentalObjCName::class)
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "REPEATED_BOUND",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER")

package staticjsmethodswithclassnamespace

import javaemul.lang.*
import kotlin.OptIn
import kotlin.Suppress
import kotlin.experimental.ExperimentalObjCName
import kotlin.jvm.JvmStatic
import kotlin.native.ObjCName

@ObjCName("J2ktStaticjsmethodswithclassnamespaceStaticJsMethodsWithClassNamespace", exact = true)
open class StaticJsMethodsWithClassNamespace {
 @ObjCName("test")
 open fun test() {
  StaticJsMethodsWithClassNamespace.originalName()
  StaticJsMethodsWithClassNamespace.originalName()
 }

 @ObjCName("J2ktStaticjsmethodswithclassnamespaceStaticJsMethodsWithClassNamespaceCompanion", exact = true)
 companion object {
  @JvmStatic
  @ObjCName("originalName")
  fun originalName() {}
 }
}

open class ExternalCaller {
 @ObjCName("test")
 open fun test() {
  StaticJsMethodsWithClassNamespace.originalName()
 }
}
