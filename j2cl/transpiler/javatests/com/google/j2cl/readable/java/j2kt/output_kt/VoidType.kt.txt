// Generated from "j2kt/VoidType.java"
@file:OptIn(ExperimentalObjCName::class)
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "REPEATED_BOUND",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_ANONYMOUS_PARAMETER",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER")

package j2kt

import javaemul.lang.*
import java.lang.Class
import java.lang.Void
import kotlin.Any
import kotlin.OptIn
import kotlin.Suppress
import kotlin.experimental.ExperimentalObjCName
import kotlin.jvm.JvmStatic
import kotlin.native.ObjCName

@ObjCName("J2ktJ2ktVoidType", exact = true)
open class VoidType {
 @ObjCName("J2ktJ2ktVoidTypeCompanion", exact = true)
 companion object {
  @JvmStatic
  internal fun testVoid_pp_j2kt() {
   val nonNullVoid: Void? = null
   val nullableVoid: Void? = null
   val nullableBoundsWithNonNullVoid: VoidType.NullableBounds<Void?>? = null
   val nullableBoundsWithNullableVoid: VoidType.NullableBounds<Void?>? = null
   val nonNullBoundsWithNonNullVoid: VoidType.NonNullBounds<Void>? = null
   val voidClass: Class<Void>? = null
  }
 }

 interface NullableBounds<T> {}

 interface NonNullBounds<T: Any> {}
}
