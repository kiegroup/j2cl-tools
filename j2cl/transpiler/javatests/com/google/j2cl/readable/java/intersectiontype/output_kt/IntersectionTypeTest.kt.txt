// Generated from "intersectiontype/IntersectionTypeTest.java"
@file:OptIn(ExperimentalObjCName::class, ExperimentalObjCRefinement::class)
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "REPEATED_BOUND",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER")

package intersectiontype

import javaemul.lang.*
import kotlin.Any
import kotlin.Comparable
import kotlin.Int
import kotlin.OptIn
import kotlin.String
import kotlin.Suppress
import kotlin.experimental.ExperimentalObjCName
import kotlin.experimental.ExperimentalObjCRefinement
import kotlin.jvm.JvmStatic
import kotlin.let
import kotlin.native.HiddenFromObjC
import kotlin.native.ObjCName

fun interface Getable<T> {
 @ObjCName("get")
 fun get(): T
}

fun interface Setable {
 @ObjCName("set")
 fun set(
  @ObjCName("withInt") i: Int
 )
}

interface Serial {}

fun interface Cmp {
 @ObjCName("cmp")
 fun cmp(): Int
}

fun interface Cmp2<T> {
 @ObjCName("cmp")
 fun cmp(
  @ObjCName("withInt") a: Int
 ): Int
}

@ObjCName("J2ktIntersectiontypeIntersectionTypeTest", exact = true)
open class IntersectionTypeTest<U> {
 @ObjCName("cast3")
 open fun cast3(
  @ObjCName("withId") s: Any?
 ): Any? {
  return s
 }

 @ObjCName("testMethodCall")
 open fun testMethodCall() {
  val o: Any? = IntersectionTypeTest.m_private_2()
  IntersectionTypeTest.set_private_2((o).let { it as IntersectionTypeTest.A?; it as IntersectionTypeTest.EmptyA?; it })
  IntersectionTypeTest.set_private_2(IntersectionTypeTest.m_private_2())
  val g: Getable<*>? = IntersectionTypeTest.n_private_2() as Getable<*>?
 }

 @ObjCName("J2ktIntersectiontypeIntersectionTypeTestCompanion", exact = true)
 companion object {
  @JvmStatic
  @ObjCName("getAndSet")
  fun <T> getAndSet(
   @ObjCName("withId") `object`: T
  ) where T: Getable<*>?, T: Setable? {
   `object`!!.set(1)
   `object`!!.get()
  }

  @JvmStatic
  @ObjCName("cast")
  fun <T> cast(
   @ObjCName("withId") o: Any?
  ): Getable<T>? {
   if (o == null) {
    return (o).let { it as Getable<T>?; it as Setable?; it }
   }
   return (o).let { it as Getable<T>?; it as Setable?; it }
  }

  @JvmStatic
  @ObjCName("cast1")
  fun <T> cast1(
   @ObjCName("withId") s: Any?
  ): Getable<Comparable<String>?>? {
   return (s).let { it as Getable<Comparable<String>?>?; it as Setable?; it }
  }

  @JvmStatic
  @ObjCName("cast2")
  fun <T> cast2(
   @ObjCName("withId") s: Any?
  ): Getable<Comparable<T & Any>?>? {
   return (s).let { it as Getable<Comparable<T & Any>?>?; it as Setable?; it }
  }

  @JvmStatic
  @ObjCName("method")
  fun method(): Cmp? {
   return (Cmp {
    return@Cmp 1
   }).let { it as Cmp?; it as Serial?; it }
  }

  @JvmStatic
  @ObjCName("method2")
  fun method2(): Cmp2<Any?>? {
   return Cmp2<Any?> { a: Int ->
    return@Cmp2 1
   } as Cmp2<Any?>?
  }

  @JvmStatic
  @ObjCName("testClosureAssignment")
  fun testClosureAssignment(
   @ObjCName("withId") o: Any?
  ) {
   val e: IntersectionTypeTest.A? = (o).let { it as IntersectionTypeTest.A?; it as IntersectionTypeTest.EmptyA?; it as IntersectionTypeTest.EmptyB?; it }
   val g: IntersectionTypeTest.EmptyA? = (o).let { it as IntersectionTypeTest.A?; it as IntersectionTypeTest.EmptyA?; it as IntersectionTypeTest.EmptyB?; it }
   val s: IntersectionTypeTest.EmptyB? = (o).let { it as IntersectionTypeTest.A?; it as IntersectionTypeTest.EmptyA?; it as IntersectionTypeTest.EmptyB?; it }
  }

  @JvmStatic
  @HiddenFromObjC
  fun <T> get_private_2(t: T): T {
   return t
  }

  @JvmStatic
  @HiddenFromObjC
  fun <T> m_private_2(): T where T: IntersectionTypeTest.A?, T: IntersectionTypeTest.EmptyA? {
   return (IntersectionTypeTest.get_private_2<Any?>(Any()) as T?) as T
  }

  @JvmStatic
  @HiddenFromObjC
  fun <T> n_private_2(): Getable<T>? where T: IntersectionTypeTest.A?, T: IntersectionTypeTest.EmptyA? {
   return null
  }

  @JvmStatic
  @HiddenFromObjC
  fun <T> set_private_2(t: T) where T: IntersectionTypeTest.A?, T: IntersectionTypeTest.EmptyA? {}

  @JvmStatic
  @HiddenFromObjC
  fun <T> callOnIntersetionTypes_private_2(t: T) where T: IntersectionTypeTest.SomeConcreteType?, T: Cmp? {
   t!!.cmp()
   ((null).let { it as IntersectionTypeTest.SomeConcreteType?; it as Cmp?; it })!!.cmp()
  }
 }

 open inner class MapEntry {
  @ObjCName("method")
  open fun <T> method(
   @ObjCName("withId") o: Any?
  ): Getable<T>? {
   return (o).let { it as Getable<T>?; it as Setable?; it }
  }
 }

 open class A {}

 interface EmptyA {}

 interface EmptyB {}

 open class SomeConcreteType {}
}
