goog.module('foreachstatement.ForEachStatement$impl');

const j_l_Object = goog.require('java.lang.Object$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let Exception1 = goog.forwardDeclare('foreachstatement.ForEachStatement.Exception1$impl');
let Exception2 = goog.forwardDeclare('foreachstatement.ForEachStatement.Exception2$impl');
let Exception = goog.forwardDeclare('java.lang.Exception$impl');
let Integer = goog.forwardDeclare('java.lang.Integer$impl');
let Iterable = goog.forwardDeclare('java.lang.Iterable$impl');
let j_l_String = goog.forwardDeclare('java.lang.String$impl');
let Throwable = goog.forwardDeclare('java.lang.Throwable$impl');
let Iterator = goog.forwardDeclare('java.util.Iterator$impl');
let $Arrays = goog.forwardDeclare('vmbootstrap.Arrays$impl');
let $Casts = goog.forwardDeclare('vmbootstrap.Casts$impl');
let $Exceptions = goog.forwardDeclare('vmbootstrap.Exceptions$impl');

class ForEachStatement extends j_l_Object {
 /** @protected @nodts */
 constructor() {
  super();
 }
 /** @nodts @return {!ForEachStatement} */
 static $create__() {
  ForEachStatement.$clinit();
  let $instance = new ForEachStatement();
  $instance.$ctor__foreachstatement_ForEachStatement__void();
  return $instance;
 }
 /** @nodts */
 $ctor__foreachstatement_ForEachStatement__void() {
  this.$ctor__java_lang_Object__void();
 }
 /** @nodts */
 m_test__java_lang_Iterable__void(/** Iterable<Throwable> */ iterable) {
  for (let $iterator = iterable.m_iterator__java_util_Iterator(); $iterator.m_hasNext__boolean(); ) {
   let t = /**@type {Throwable}*/ ($Casts.$to($iterator.m_next__java_lang_Object(), Throwable));
   {
    t.toString();
   }
  }
  for (let $array = /**@type {!Array<Throwable>}*/ ($Arrays.$create([10], Throwable)), $index = 0; $index < $array.length; $index++) {
   let t_1 = $array[$index];
   {
    t_1.toString();
   }
  }
 }
 /** @nodts */
 m_testMulticatch__void_$p_foreachstatement_ForEachStatement() {
  try {
   throw $Exceptions.toJs(Exception.$create__());
  } catch (__$exc) {
   __$exc = $Exceptions.toJava(__$exc);
   if (Exception1.$isInstance(__$exc) || Exception2.$isInstance(__$exc)) {
    let e = /**@type {(Exception1|Exception2)}*/ (__$exc);
    for (let $iterator = /**@type {Iterable<*>}*/ ($Casts.$to(e, Iterable)).m_iterator__java_util_Iterator(); $iterator.m_hasNext__boolean(); ) {
     let o = $iterator.m_next__java_lang_Object();
    }
   } else {
    throw $Exceptions.toJs(__$exc);
   }
  }
 }
 /** @nodts @template T, U */
 m_testTypeVariable__void_$p_foreachstatement_ForEachStatement() {
  let iterable = null;
  for (let $iterator = /**@type {Iterable<?string>}*/ ($Casts.$to(iterable, Iterable)).m_iterator__java_util_Iterator(); $iterator.m_hasNext__boolean(); ) {
   let s = /**@type {?string}*/ ($Casts.$to($iterator.m_next__java_lang_Object(), j_l_String));
  }
  let anotherIterable = null;
  for (let $iterator_1 = /**@type {Iterator<!Integer>}*/ (anotherIterable.m_iterator__java_util_Iterator()); /**@type {!Iterator<!Integer>}*/ ($iterator_1).m_hasNext__boolean(); ) {
   let s_1 = /**@type {!Integer}*/ ($Casts.$to(/**@type {!Iterator<!Integer>}*/ ($iterator_1).m_next__java_lang_Object(), Integer)).m_intValue__int();
  }
 }
 /** @nodts */
 static $clinit() {
  ForEachStatement.$clinit = () =>{};
  ForEachStatement.$loadModules();
  j_l_Object.$clinit();
 }
 /** @nodts @return {boolean} */
 static $isInstance(/** ? */ instance) {
  return instance instanceof ForEachStatement;
 }
 
 /** @nodts */
 static $loadModules() {
  Exception1 = goog.module.get('foreachstatement.ForEachStatement.Exception1$impl');
  Exception2 = goog.module.get('foreachstatement.ForEachStatement.Exception2$impl');
  Exception = goog.module.get('java.lang.Exception$impl');
  Integer = goog.module.get('java.lang.Integer$impl');
  Iterable = goog.module.get('java.lang.Iterable$impl');
  j_l_String = goog.module.get('java.lang.String$impl');
  Throwable = goog.module.get('java.lang.Throwable$impl');
  $Arrays = goog.module.get('vmbootstrap.Arrays$impl');
  $Casts = goog.module.get('vmbootstrap.Casts$impl');
  $Exceptions = goog.module.get('vmbootstrap.Exceptions$impl');
 }
}
$Util.$setClassMetadata(ForEachStatement, 'foreachstatement.ForEachStatement');

exports = ForEachStatement;

//# sourceMappingURL=ForEachStatement.js.map
