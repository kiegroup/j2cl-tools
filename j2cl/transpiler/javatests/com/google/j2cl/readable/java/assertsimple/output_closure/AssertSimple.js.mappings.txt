[AssertSimple] => [AssertSimple]
[AssertSimple] => [constructor]
[AssertSimple] => [super();] "assertsimple.AssertSimple.<synthetic: ctor_js>"
[AssertSimple] => [$create__]
[AssertSimple] => [AssertSimple.$clinit();] "assertsimple.AssertSimple.<synthetic: ctor_create>"
[AssertSimple] => [let $instance = new AssertSimple();] "assertsimple.AssertSimple.<synthetic: ctor_create>"
[AssertSimple] => [$instance.$ctor__assertsimple_AssertSimple__void();] "assertsimple.AssertSimple.<synthetic: ctor_create>"
[AssertSimple] => [return $instance;] "assertsimple.AssertSimple.<synthetic: ctor_create>"
[AssertSimple] => [$ctor__assertsimple_AssertSimple__void]
[AssertSimple] => [this.$ctor__java_lang_Object__void();] "assertsimple.AssertSimple.<init>"
[main] => [m_main__arrayOf_java_lang_String__void]
[args] => [args] "args"
[{
    assert 1 + 2 == 3;
...    assert 1 + 2 == 3 : new Object();
  }] => [AssertSimple.$clinit();] "assertsimple.AssertSimple.main"
[assert 1 + 2 == 3;] => [$Asserts.$assert((1 + 2 | 0) == 3);] "assertsimple.AssertSimple.main"
[assert 1 + 2 == 3 : "Error!";] => [$Asserts.$assertWithMessage((1 + 2 | 0) == 3, 'Error!');] "assertsimple.AssertSimple.main"
[assert 1 + 2 == 3 : null;] => [$Asserts.$assertWithMessage((1 + 2 | 0) == 3, null);] "assertsimple.AssertSimple.main"
[assert 1 + 2 == 3 : args;] => [$Asserts.$assertWithMessage((1 + 2 | 0) == 3, args);] "assertsimple.AssertSimple.main"
[assert 1 + 2 == 3 : args[0];] => [$Asserts.$assertWithMessage((1 + 2 | 0) == 3, args[0]);] "assertsimple.AssertSimple.main"
[assert 1 + 2 == 3 : new Object();] => [$Asserts.$assertWithMessage((1 + 2 | 0) == 3, j_l_Object.$create__());] "assertsimple.AssertSimple.main"
[AssertSimple] => [$clinit]
[AssertSimple] => [AssertSimple.$clinit = () =>{};] "assertsimple.AssertSimple.<clinit>"
[AssertSimple] => [AssertSimple.$loadModules();] "assertsimple.AssertSimple.<clinit>"
[AssertSimple] => [j_l_Object.$clinit();] "assertsimple.AssertSimple.<clinit>"
