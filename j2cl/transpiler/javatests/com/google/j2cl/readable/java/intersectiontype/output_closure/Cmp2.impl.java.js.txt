goog.module('intersectiontype.Cmp2$impl');

const $Util = goog.require('nativebootstrap.Util$impl');

let $LambdaAdaptor = goog.forwardDeclare('intersectiontype.Cmp2.$LambdaAdaptor$impl');

/**
 * @interface
 * @template T
 */
class Cmp2 {
 /** @abstract @nodts @return {number} */
 m_cmp__int__int(/** number */ a) {}
 /** @nodts @template T @return {Cmp2<T>} */
 static $adapt(/** ?function(number):number */ fn) {
  Cmp2.$clinit();
  return /**@type {!$LambdaAdaptor<T>}*/ (new $LambdaAdaptor(fn));
 }
 /** @nodts */
 static $clinit() {
  Cmp2.$clinit = () =>{};
  Cmp2.$loadModules();
 }
 
 static $markImplementor(/** Function */ ctor) {
  ctor.prototype.$implements__intersectiontype_Cmp2 = true;
 }
 /** @nodts @return {boolean} */
 static $isInstance(/** ? */ instance) {
  return instance != null && !!instance.$implements__intersectiontype_Cmp2;
 }
 
 /** @nodts */
 static $loadModules() {
  $LambdaAdaptor = goog.module.get('intersectiontype.Cmp2.$LambdaAdaptor$impl');
 }
}
Cmp2.$markImplementor(/**@type {Function}*/ (Cmp2));
$Util.$setClassMetadataForInterface(Cmp2, 'intersectiontype.Cmp2');

exports = Cmp2;

//# sourceMappingURL=Cmp2.js.map
