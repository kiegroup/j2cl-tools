goog.module('bridgemethods.SomeOtherFooInterface$impl');

const $Util = goog.require('nativebootstrap.Util$impl');

let $LambdaAdaptor = goog.forwardDeclare('bridgemethods.SomeOtherFooInterface.$LambdaAdaptor$impl');

/**
 * @interface
 * @template T
 */
class SomeOtherFooInterface {
 /** @abstract @nodts */
 m_foo__java_lang_Object__java_lang_Double__void(/** T */ t, /** ?number */ s) {}
 /** @nodts @template T @return {SomeOtherFooInterface<T>} */
 static $adapt(/** ?function(T, ?number):void */ fn) {
  SomeOtherFooInterface.$clinit();
  return /**@type {!$LambdaAdaptor<T>}*/ (new $LambdaAdaptor(fn));
 }
 /** @nodts */
 static $clinit() {
  SomeOtherFooInterface.$clinit = () =>{};
  SomeOtherFooInterface.$loadModules();
 }
 
 static $markImplementor(/** Function */ ctor) {
  ctor.prototype.$implements__bridgemethods_SomeOtherFooInterface = true;
 }
 /** @nodts @return {boolean} */
 static $isInstance(/** ? */ instance) {
  return instance != null && !!instance.$implements__bridgemethods_SomeOtherFooInterface;
 }
 
 /** @nodts */
 static $loadModules() {
  $LambdaAdaptor = goog.module.get('bridgemethods.SomeOtherFooInterface.$LambdaAdaptor$impl');
 }
}
SomeOtherFooInterface.$markImplementor(/**@type {Function}*/ (SomeOtherFooInterface));
$Util.$setClassMetadataForInterface(SomeOtherFooInterface, 'bridgemethods.SomeOtherFooInterface');

exports = SomeOtherFooInterface;

//# sourceMappingURL=SomeOtherFooInterface.js.map
