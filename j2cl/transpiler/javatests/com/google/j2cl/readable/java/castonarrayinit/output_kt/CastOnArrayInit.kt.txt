// Generated from "castonarrayinit/CastOnArrayInit.java"
@file:OptIn(ExperimentalObjCName::class)
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "REPEATED_BOUND",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER")

package castonarrayinit

import javaemul.lang.*
import kotlin.Array
import kotlin.OptIn
import kotlin.Suppress
import kotlin.experimental.ExperimentalObjCName
import kotlin.jvm.JvmStatic
import kotlin.native.ObjCName

@ObjCName("J2ktCastonarrayinitCastOnArrayInit", exact = true)
open class CastOnArrayInit {
 @ObjCName("J2ktCastonarrayinitCastOnArrayInitCompanion", exact = true)
 companion object {
  @JvmStatic
  @ObjCName("fun")
  fun <E> `fun`(
   vararg @ObjCName("withCastonarrayinitCastOnArrayInit_FooArray") args: CastOnArrayInit.Foo<E>?
  ) {
   val args_1: Array<CastOnArrayInit.Foo<E>?>? = args as Array<CastOnArrayInit.Foo<E>?>?
  }

  @JvmStatic
  @ObjCName("test")
  fun <E> test() {
   val f1: CastOnArrayInit.Foo<E>? = CastOnArrayInit.Foo<E>()
   val f2: CastOnArrayInit.Foo<E>? = CastOnArrayInit.Foo<E>()
   CastOnArrayInit.`fun`<E>(f1, f2)
  }
 }

 @ObjCName("J2ktCastonarrayinitCastOnArrayInit_Foo", exact = true)
 open class Foo<T> {}
}
