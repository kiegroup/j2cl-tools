goog.module('instancejsmethods.MyInterface$impl');

const $Util = goog.require('nativebootstrap.Util$impl');

let $LambdaAdaptor = goog.forwardDeclare('instancejsmethods.MyInterface.$LambdaAdaptor$impl');

/**
 * @interface
 */
class MyInterface {
 /** @abstract @nodts @return {number} */
 m_intfFoo__int() {}
 /** @nodts @return {MyInterface} */
 static $adapt(/** ?function():number */ fn) {
  MyInterface.$clinit();
  return new $LambdaAdaptor(fn);
 }
 /** @nodts */
 static $clinit() {
  MyInterface.$clinit = () =>{};
  MyInterface.$loadModules();
 }
 
 static $markImplementor(/** Function */ ctor) {
  ctor.prototype.$implements__instancejsmethods_MyInterface = true;
 }
 /** @nodts @return {boolean} */
 static $isInstance(/** ? */ instance) {
  return instance != null && !!instance.$implements__instancejsmethods_MyInterface;
 }
 
 /** @nodts */
 static $loadModules() {
  $LambdaAdaptor = goog.module.get('instancejsmethods.MyInterface.$LambdaAdaptor$impl');
 }
}
MyInterface.$markImplementor(/**@type {Function}*/ (MyInterface));
$Util.$setClassMetadataForInterface(MyInterface, 'instancejsmethods.MyInterface');

exports = MyInterface;

//# sourceMappingURL=MyInterface.js.map
