goog.module('assertsimple.AssertSimple$impl');

const j_l_Object = goog.require('java.lang.Object$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let $Asserts = goog.forwardDeclare('vmbootstrap.Asserts$impl');

class AssertSimple extends j_l_Object {
 /** @protected @nodts */
 constructor() {
  super();
 }
 /** @nodts @return {!AssertSimple} */
 static $create__() {
  AssertSimple.$clinit();
  let $instance = new AssertSimple();
  $instance.$ctor__assertsimple_AssertSimple__void();
  return $instance;
 }
 /** @nodts */
 $ctor__assertsimple_AssertSimple__void() {
  this.$ctor__java_lang_Object__void();
 }
 /** @nodts */
 static m_main__arrayOf_java_lang_String__void(/** Array<?string> */ args) {
  AssertSimple.$clinit();
  $Asserts.$assert((1 + 2 | 0) == 3);
  $Asserts.$assertWithMessage((1 + 2 | 0) == 3, 'Error!');
  $Asserts.$assertWithMessage((1 + 2 | 0) == 3, null);
  $Asserts.$assertWithMessage((1 + 2 | 0) == 3, args);
  $Asserts.$assertWithMessage((1 + 2 | 0) == 3, args[0]);
  $Asserts.$assertWithMessage((1 + 2 | 0) == 3, j_l_Object.$create__());
 }
 /** @nodts */
 static $clinit() {
  AssertSimple.$clinit = () =>{};
  AssertSimple.$loadModules();
  j_l_Object.$clinit();
 }
 /** @nodts @return {boolean} */
 static $isInstance(/** ? */ instance) {
  return instance instanceof AssertSimple;
 }
 
 /** @nodts */
 static $loadModules() {
  $Asserts = goog.module.get('vmbootstrap.Asserts$impl');
 }
}
$Util.$setClassMetadata(AssertSimple, 'assertsimple.AssertSimple');

exports = AssertSimple;

//# sourceMappingURL=AssertSimple.js.map
