goog.module('accidentaloverride.SuperInterface$impl');

const $Util = goog.require('nativebootstrap.Util$impl');

let $LambdaAdaptor = goog.forwardDeclare('accidentaloverride.SuperInterface.$LambdaAdaptor$impl');

/**
 * @interface
 * @template T
 */
class SuperInterface {
 /** @abstract @nodts */
 m_foo__java_lang_Object__void(/** T */ t) {}
 /** @nodts @template T @return {SuperInterface<T>} */
 static $adapt(/** ?function(T):void */ fn) {
  SuperInterface.$clinit();
  return /**@type {!$LambdaAdaptor<T>}*/ (new $LambdaAdaptor(fn));
 }
 /** @nodts */
 static $clinit() {
  SuperInterface.$clinit = () =>{};
  SuperInterface.$loadModules();
 }
 
 static $markImplementor(/** Function */ ctor) {
  ctor.prototype.$implements__accidentaloverride_SuperInterface = true;
 }
 /** @nodts @return {boolean} */
 static $isInstance(/** ? */ instance) {
  return instance != null && !!instance.$implements__accidentaloverride_SuperInterface;
 }
 
 /** @nodts */
 static $loadModules() {
  $LambdaAdaptor = goog.module.get('accidentaloverride.SuperInterface.$LambdaAdaptor$impl');
 }
}
SuperInterface.$markImplementor(/**@type {Function}*/ (SuperInterface));
$Util.$setClassMetadataForInterface(SuperInterface, 'accidentaloverride.SuperInterface');

exports = SuperInterface;

//# sourceMappingURL=SuperInterface.js.map
