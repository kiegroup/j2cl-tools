// Generated from "j2kt/NullabilityCasts.java"
@file:OptIn(ExperimentalObjCName::class)
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_ANONYMOUS_PARAMETER",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER",
 "REDUNDANT_ELSE_IN_WHEN")

package j2kt

import javaemul.lang.*
import java.lang.AssertionError
import java.lang.RuntimeException
import kotlin.Boolean
import kotlin.OptIn
import kotlin.String
import kotlin.Suppress
import kotlin.experimental.ExperimentalObjCName
import kotlin.jvm.JvmStatic
import kotlin.native.ObjCName

@ObjCName("J2ktJ2ktNullabilityCasts", exact = true)
open class NullabilityCasts {
 internal open fun testCapturesInLambdas_pp_j2kt(condition: Boolean, async: NullabilityCasts.Async<String?>) {
  NullabilityCasts.tranformAsync_pp_j2kt<String?, String?>(async, NullabilityCasts.AsyncFunction { it: String? ->
   if (condition) {
    return@AsyncFunction async as NullabilityCasts.Async<String?>
   } else {
    return@AsyncFunction async as NullabilityCasts.Async<String?>
   }
   throw AssertionError("Unreachable")
  })
 }

 @ObjCName("J2ktJ2ktNullabilityCastsCompanion", exact = true)
 companion object {
  @JvmStatic
  internal fun <I, O> tranformAsync_pp_j2kt(async: NullabilityCasts.Async<I>, function: NullabilityCasts.AsyncFunction<in I, out O>): NullabilityCasts.Async<O> {
   throw RuntimeException()
  }
 }

 @ObjCName("J2ktJ2ktNullabilityCasts_AsyncFunction", exact = true)
 fun interface AsyncFunction<I, O> {
  @ObjCName("apply")
  fun apply(
   @ObjCName("withId") i: I
  ): NullabilityCasts.Async<O>
 }

 @ObjCName("J2ktJ2ktNullabilityCasts_Async", exact = true)
 interface Async<V> {}
}
