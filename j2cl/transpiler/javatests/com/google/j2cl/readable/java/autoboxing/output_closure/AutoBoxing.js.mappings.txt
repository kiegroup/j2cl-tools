[AutoBoxing] => [AutoBoxing]
[AutoBoxing] => [constructor]
[AutoBoxing] => [super();] "autoboxing.AutoBoxing.<synthetic: ctor_js>"
[AutoBoxing] => [$create__]
[AutoBoxing] => [AutoBoxing.$clinit();] "autoboxing.AutoBoxing.<synthetic: ctor_create>"
[AutoBoxing] => [let $instance = new AutoBoxing();] "autoboxing.AutoBoxing.<synthetic: ctor_create>"
[AutoBoxing] => [$instance.$ctor__autoboxing_AutoBoxing__void();] "autoboxing.AutoBoxing.<synthetic: ctor_create>"
[AutoBoxing] => [return $instance;] "autoboxing.AutoBoxing.<synthetic: ctor_create>"
[AutoBoxing] => [$ctor__autoboxing_AutoBoxing__void]
[AutoBoxing] => [this.$ctor__java_lang_Object__void();] "autoboxing.AutoBoxing.<init>"
[box] => [m_box__boolean__java_lang_Boolean]
[b] => [b] "b"
[return b;] => [return b;] "autoboxing.AutoBoxing.box"
[box] => [m_box__double__java_lang_Double]
[d] => [d] "d"
[return d;] => [return d;] "autoboxing.AutoBoxing.box"
[box] => [m_box__byte__java_lang_Byte]
[b] => [b] "b"
[return b;] => [return Byte.m_valueOf__byte__java_lang_Byte(b);] "autoboxing.AutoBoxing.box"
[box] => [m_box__float__java_lang_Float]
[f] => [f] "f"
[return f;] => [return Float.m_valueOf__float__java_lang_Float(f);] "autoboxing.AutoBoxing.box"
[box] => [m_box__int__java_lang_Integer]
[i] => [i] "i"
[return i;] => [return Integer.m_valueOf__int__java_lang_Integer(i);] "autoboxing.AutoBoxing.box"
[box] => [m_box__long__java_lang_Long]
[l] => [l] "l"
[return l;] => [return Long.m_valueOf__long__java_lang_Long(l);] "autoboxing.AutoBoxing.box"
[box] => [m_box__short__java_lang_Short]
[s] => [s] "s"
[return s;] => [return Short.m_valueOf__short__java_lang_Short(s);] "autoboxing.AutoBoxing.box"
[box] => [m_box__char__java_lang_Character]
[c] => [c] "c"
[return c;] => [return Character.m_valueOf__char__java_lang_Character(c);] "autoboxing.AutoBoxing.box"
[unbox] => [m_unbox__java_lang_Boolean__boolean]
[b] => [b] "b"
[return b;] => [return Boolean.m_booleanValue__java_lang_Boolean__boolean(b);] "autoboxing.AutoBoxing.unbox"
[unbox] => [m_unbox__java_lang_Double__double]
[d] => [d] "d"
[return d;] => [return Double.m_doubleValue__java_lang_Double__double(d);] "autoboxing.AutoBoxing.unbox"
[unbox] => [m_unbox__java_lang_Byte__byte]
[b] => [b] "b"
[return b;] => [return b.m_byteValue__byte();] "autoboxing.AutoBoxing.unbox"
[unbox] => [m_unbox__java_lang_Float__float]
[f] => [f] "f"
[return f;] => [return f.m_floatValue__float();] "autoboxing.AutoBoxing.unbox"
[unbox] => [m_unbox__java_lang_Integer__int]
[i] => [i] "i"
[return i;] => [return i.m_intValue__int();] "autoboxing.AutoBoxing.unbox"
[unbox] => [m_unbox__java_lang_Long__long]
[l] => [l] "l"
[return l;] => [return l.m_longValue__long();] "autoboxing.AutoBoxing.unbox"
[unbox] => [m_unbox__java_lang_Short__short]
[s] => [s] "s"
[return s;] => [return s.m_shortValue__short();] "autoboxing.AutoBoxing.unbox"
[unbox] => [m_unbox__java_lang_Character__char]
[c] => [c] "c"
[return c;] => [return c.m_charValue__char();] "autoboxing.AutoBoxing.unbox"
[takesAndReturnsPrimitiveDouble] => [m_takesAndReturnsPrimitiveDouble__double__double]
[d] => [d] "d"
[return d;] => [return d;] "autoboxing.AutoBoxing.takesAndReturnsPrimitiveDouble"
[takesAndReturnsVoid] => [m_takesAndReturnsVoid__java_lang_Void__java_lang_Void]
[v] => [v] "v"
[return null;] => [return null;] "autoboxing.AutoBoxing.takesAndReturnsVoid"
[takesFloatVarArgs] => [m_takesFloatVarArgs__arrayOf_java_lang_Float__void]
[elements] => [elements] "elements"
[takesObjectAndReturnsPrimitiveDouble] => [m_takesObjectAndReturnsPrimitiveDouble__java_lang_Object__double]
[o] => [o] "o"
[return (double) o;] => [return Double.m_doubleValue__java_lang_Double__double(/**@type {number}*/ ($Casts.$to(o, Double)));] "autoboxing.AutoBoxing.takesObjectAndReturnsPrimitiveDouble"
[sumWithoutBoxing] => [m_sumWithoutBoxing__arrayOf_java_lang_Object__double]
[numbers] => [numbers] "numbers"
[double sum = 0;] => [let sum = 0;] "autoboxing.AutoBoxing.sumWithoutBoxing"
[sum] => [sum] "sum"
[for (Object number : numbers) {
      sum += (Double) number;
    }] => [for (let $array = numbers, $index = 0; $index < $array.length; $index++) {
   let number_1 = $array[$index];
...   }
  }] "autoboxing.AutoBoxing.sumWithoutBoxing"
[for (Object number : numbers) {
      sum += (Double) number;
    }] => [let number_1 = $array[$index];] "autoboxing.AutoBoxing.sumWithoutBoxing"
[number] => [number_1] "number"
[sum += (Double) number;] => [sum += Double.m_doubleValue__java_lang_Double__double(/**@type {?number}*/ ($Casts.$to(number_1, Double)));] "autoboxing.AutoBoxing.sumWithoutBoxing"
[return sum;] => [return sum;] "autoboxing.AutoBoxing.sumWithoutBoxing"
[sumWithoutBoxingJsVarargs] => [sumWithoutBoxingJsVarargs]
[numbers] => [numbers] "numbers"
[double sum = 0;] => [let sum = 0;] "autoboxing.AutoBoxing.sumWithoutBoxingJsVarargs"
[sum] => [sum] "sum"
[for (Object number : numbers) {
      sum += (Double) number;
    }] => [for (let $array = numbers, $index = 0; $index < $array.length; $index++) {
   let number_1 = $array[$index];
...   }
  }] "autoboxing.AutoBoxing.sumWithoutBoxingJsVarargs"
[for (Object number : numbers) {
      sum += (Double) number;
    }] => [let number_1 = $array[$index];] "autoboxing.AutoBoxing.sumWithoutBoxingJsVarargs"
[number] => [number_1] "number"
[sum += (Double) number;] => [sum += Double.m_doubleValue__java_lang_Double__double(/**@type {?number}*/ ($Casts.$to(number_1, Double)));] "autoboxing.AutoBoxing.sumWithoutBoxingJsVarargs"
[return sum;] => [return sum;] "autoboxing.AutoBoxing.sumWithoutBoxingJsVarargs"
[sumWithUnboxing] => [m_sumWithUnboxing__java_lang_Iterable__double]
[boxedDoubles] => [boxedDoubles] "boxedDoubles"
[double sum = 0;] => [let sum = 0;] "autoboxing.AutoBoxing.sumWithUnboxing"
[sum] => [sum] "sum"
[for (double d : boxedDoubles) {
      sum += d;
    }] => [for (let $iterator = boxedDoubles.m_iterator__java_util_Iterator(); $iterator.m_hasNext__boolean(); ) {
   let d = Double.m_doubleValue__java_lang_Double__double(/**@type {?number}*/ ($Casts.$to($iterator.m_next__java_lang_Object(), Double)));
...   }
  }] "autoboxing.AutoBoxing.sumWithUnboxing"
[for (double d : boxedDoubles) {
      sum += d;
    }] => [let d = Double.m_doubleValue__java_lang_Double__double(/**@type {?number}*/ ($Casts.$to($iterator.m_next__java_lang_Object(), Double)));] "autoboxing.AutoBoxing.sumWithUnboxing"
[d] => [d] "d"
[sum += d;] => [sum += d;] "autoboxing.AutoBoxing.sumWithUnboxing"
[return sum;] => [return sum;] "autoboxing.AutoBoxing.sumWithUnboxing"
[testBoxing] => [m_testBoxing__void]
[boolean bool = true;] => [let bool = true;] "autoboxing.AutoBoxing.testBoxing"
[bool] => [bool] "bool"
[double d = 2.2;] => [let d = 2.2;] "autoboxing.AutoBoxing.testBoxing"
[d] => [d] "d"
[byte b = (byte) 1;] => [let b = 1;] "autoboxing.AutoBoxing.testBoxing"
[b] => [b] "b"
[float f = 1.1f;] => [let f = 1.100000023841858;] "autoboxing.AutoBoxing.testBoxing"
[f] => [f] "f"
[int i = 1;] => [let i = 1;] "autoboxing.AutoBoxing.testBoxing"
[i] => [i] "i"
[long l = 2L;] => [let l = $Long.fromInt(2);] "autoboxing.AutoBoxing.testBoxing"
[l] => [l] "l"
[short s = (short) 1;] => [let s = 1;] "autoboxing.AutoBoxing.testBoxing"
[s] => [s] "s"
[char c = 'a';] => [let c = 97 /* 'a' */;] "autoboxing.AutoBoxing.testBoxing"
[c] => [c] "c"
[Boolean boxBool = bool;] => [let boxBool = bool;] "autoboxing.AutoBoxing.testBoxing"
[boxBool] => [boxBool] "boxBool"
[Double boxD = d;] => [let boxD = d;] "autoboxing.AutoBoxing.testBoxing"
[boxD] => [boxD] "boxD"
[Byte boxB = b;] => [let boxB = Byte.m_valueOf__byte__java_lang_Byte(b);] "autoboxing.AutoBoxing.testBoxing"
[boxB] => [boxB] "boxB"
[Float boxF = f;] => [let boxF = Float.m_valueOf__float__java_lang_Float(f);] "autoboxing.AutoBoxing.testBoxing"
[boxF] => [boxF] "boxF"
[Integer boxI = i;] => [let boxI = Integer.m_valueOf__int__java_lang_Integer(i);] "autoboxing.AutoBoxing.testBoxing"
[boxI] => [boxI] "boxI"
[Long boxL = l;] => [let boxL = Long.m_valueOf__long__java_lang_Long(l);] "autoboxing.AutoBoxing.testBoxing"
[boxL] => [boxL] "boxL"
[Short boxS = s;] => [let boxS = Short.m_valueOf__short__java_lang_Short(s);] "autoboxing.AutoBoxing.testBoxing"
[boxS] => [boxS] "boxS"
[Character boxC = c;] => [let boxC = Character.m_valueOf__char__java_lang_Character(c);] "autoboxing.AutoBoxing.testBoxing"
[boxC] => [boxC] "boxC"
[boxBool = true;] => [boxBool = true;] "autoboxing.AutoBoxing.testBoxing"
[boxD = 2.2;] => [boxD = 2.2;] "autoboxing.AutoBoxing.testBoxing"
[boxB = 1;] => [boxB = Byte.m_valueOf__byte__java_lang_Byte(1);] "autoboxing.AutoBoxing.testBoxing"
[boxF = 1.1f;] => [boxF = Float.m_valueOf__float__java_lang_Float(1.100000023841858);] "autoboxing.AutoBoxing.testBoxing"
[boxI = 1;] => [boxI = Integer.m_valueOf__int__java_lang_Integer(1);] "autoboxing.AutoBoxing.testBoxing"
[boxL = 2L;] => [boxL = Long.m_valueOf__long__java_lang_Long($Long.fromInt(2));] "autoboxing.AutoBoxing.testBoxing"
[boxS = 1;] => [boxS = Short.m_valueOf__short__java_lang_Short(1);] "autoboxing.AutoBoxing.testBoxing"
[boxC = 1;] => [boxC = Character.m_valueOf__char__java_lang_Character(1 /* '\u0001' */);] "autoboxing.AutoBoxing.testBoxing"
[boxC = 'a';] => [boxC = Character.m_valueOf__char__java_lang_Character(97 /* 'a' */);] "autoboxing.AutoBoxing.testBoxing"
[bool = unbox(bool);] => [bool = this.m_unbox__java_lang_Boolean__boolean(bool);] "autoboxing.AutoBoxing.testBoxing"
[d = unbox(d);] => [d = this.m_unbox__java_lang_Double__double(d);] "autoboxing.AutoBoxing.testBoxing"
[b = unbox(b);] => [b = this.m_unbox__java_lang_Byte__byte(Byte.m_valueOf__byte__java_lang_Byte(b));] "autoboxing.AutoBoxing.testBoxing"
[f = unbox(f);] => [f = this.m_unbox__java_lang_Float__float(Float.m_valueOf__float__java_lang_Float(f));] "autoboxing.AutoBoxing.testBoxing"
[i = unbox(i);] => [i = this.m_unbox__java_lang_Integer__int(Integer.m_valueOf__int__java_lang_Integer(i));] "autoboxing.AutoBoxing.testBoxing"
[l = unbox(l);] => [l = this.m_unbox__java_lang_Long__long(Long.m_valueOf__long__java_lang_Long(l));] "autoboxing.AutoBoxing.testBoxing"
[s = unbox(s);] => [s = this.m_unbox__java_lang_Short__short(Short.m_valueOf__short__java_lang_Short(s));] "autoboxing.AutoBoxing.testBoxing"
[c = unbox(c);] => [c = this.m_unbox__java_lang_Character__char(Character.m_valueOf__char__java_lang_Character(c));] "autoboxing.AutoBoxing.testBoxing"
[double unusedDouble = takesObjectAndReturnsPrimitiveDouble(4);] => [let unusedDouble = this.m_takesObjectAndReturnsPrimitiveDouble__java_lang_Object__double(4);] "autoboxing.AutoBoxing.testBoxing"
[unusedDouble] => [unusedDouble] "unusedDouble"
[unusedDouble = sumWithoutBoxing(1, 2.2, (byte) 1, (short) 1, (float) 2.2);] => [unusedDouble = this.m_sumWithoutBoxing__arrayOf_java_lang_Object__double([1, 2.2, 1, 1, 2.2]);] "autoboxing.AutoBoxing.testBoxing"
[unusedDouble = sumWithoutBoxingJsVarargs(1, 2.2, (byte) 1, (short) 1, (float) 2.2);] => [unusedDouble = this.sumWithoutBoxingJsVarargs(1, 2.2, 1, 1, 2.2);] "autoboxing.AutoBoxing.testBoxing"
[takesFloatVarArgs(1.1f, (float) 'a', (float) 2.2);] => [this.m_takesFloatVarArgs__arrayOf_java_lang_Float__void(/**@type {!Array<Float>}*/ ($Arrays.$init([Float.m_valueOf__float__java_lang_Float(1.100000023841858), Float.m_valueOf__float__java_lang_Float(97 /* 'a' */), Float.m_valueOf__float__java_lang_Float(2.2)], Float)));] "autoboxing.AutoBoxing.testBoxing"
[Object o;] => [let /** * */ o;] "autoboxing.AutoBoxing.testBoxing"
[o] => [o] "o"
[o = 2.2d;] => [o = 2.2;] "autoboxing.AutoBoxing.testBoxing"
[o = 1.1f;] => [o = Float.m_valueOf__float__java_lang_Float(1.100000023841858);] "autoboxing.AutoBoxing.testBoxing"
[o = 1;] => [o = Integer.m_valueOf__int__java_lang_Integer(1);] "autoboxing.AutoBoxing.testBoxing"
[o = 'a';] => [o = Character.m_valueOf__char__java_lang_Character(97 /* 'a' */);] "autoboxing.AutoBoxing.testBoxing"
[boxBool = boxBool && boxBool;] => [boxBool = Boolean.m_booleanValue__java_lang_Boolean__boolean(boxBool) && Boolean.m_booleanValue__java_lang_Boolean__boolean(boxBool);] "autoboxing.AutoBoxing.testBoxing"
[boxD = boxD + boxD;] => [boxD = Double.m_doubleValue__java_lang_Double__double(boxD) + Double.m_doubleValue__java_lang_Double__double(boxD);] "autoboxing.AutoBoxing.testBoxing"
[boxI = boxI / boxI;] => [boxI = Integer.m_valueOf__int__java_lang_Integer($Primitives.coerceDivision(boxI.m_intValue__int() / boxI.m_intValue__int()));] "autoboxing.AutoBoxing.testBoxing"
[boxL = boxL / boxL;] => [boxL = Long.m_valueOf__long__java_lang_Long($LongUtils.divide(boxL.m_longValue__long(), boxL.m_longValue__long()));] "autoboxing.AutoBoxing.testBoxing"
[boxBool = !boxBool;] => [boxBool = !Boolean.m_booleanValue__java_lang_Boolean__boolean(boxBool);] "autoboxing.AutoBoxing.testBoxing"
[boxI = +boxI;] => [boxI = Integer.m_valueOf__int__java_lang_Integer(+ boxI.m_intValue__int());] "autoboxing.AutoBoxing.testBoxing"
[boxI = -boxI;] => [boxI = Integer.m_valueOf__int__java_lang_Integer(- boxI.m_intValue__int() | 0);] "autoboxing.AutoBoxing.testBoxing"
[boxI <<= boxI;] => [boxI = Integer.m_valueOf__int__java_lang_Integer(boxI.m_intValue__int() << boxI.m_intValue__int());] "autoboxing.AutoBoxing.testBoxing"
[boxI <<= boxL;] => [boxI = Integer.m_valueOf__int__java_lang_Integer(boxI.m_intValue__int() << $Primitives.narrowLongToInt(boxL.m_longValue__long()));] "autoboxing.AutoBoxing.testBoxing"
[boxL <<= boxI;] => [boxL = Long.m_valueOf__long__java_lang_Long($LongUtils.leftShift(boxL.m_longValue__long(), boxI.m_intValue__int()));] "autoboxing.AutoBoxing.testBoxing"
[boxL <<= boxL;] => [boxL = Long.m_valueOf__long__java_lang_Long($LongUtils.leftShift(boxL.m_longValue__long(), $Primitives.narrowLongToInt(boxL.m_longValue__long())));] "autoboxing.AutoBoxing.testBoxing"
[o = (Integer & Comparable<Integer>) 15;] => [o = Integer.m_valueOf__int__java_lang_Integer(15);] "autoboxing.AutoBoxing.testBoxing"
[testUnboxing] => [m_testUnboxing__void]
[Boolean boxBool = new Boolean(true);] => [let boxBool = Boolean.$create__boolean(true);] "autoboxing.AutoBoxing.testUnboxing"
[boxBool] => [boxBool] "boxBool"
[Double boxD = new Double(2.2);] => [let boxD = Double.$create__double(2.2);] "autoboxing.AutoBoxing.testUnboxing"
[boxD] => [boxD] "boxD"
[Byte boxB = new Byte((byte) 1);] => [let boxB = Byte.$create__byte(1);] "autoboxing.AutoBoxing.testUnboxing"
[boxB] => [boxB] "boxB"
[Float boxF = new Float(1.1f);] => [let boxF = Float.$create__float(1.100000023841858);] "autoboxing.AutoBoxing.testUnboxing"
[boxF] => [boxF] "boxF"
[Integer boxI = new Integer(1);] => [let boxI = Integer.$create__int(1);] "autoboxing.AutoBoxing.testUnboxing"
[boxI] => [boxI] "boxI"
[Long boxL = new Long(1L);] => [let boxL = Long.$create__long($Long.fromInt(1));] "autoboxing.AutoBoxing.testUnboxing"
[boxL] => [boxL] "boxL"
[Short boxS = new Short((short) 1);] => [let boxS = Short.$create__short(1);] "autoboxing.AutoBoxing.testUnboxing"
[boxS] => [boxS] "boxS"
[Character boxC = new Character('a');] => [let boxC = Character.$create__char(97 /* 'a' */);] "autoboxing.AutoBoxing.testUnboxing"
[boxC] => [boxC] "boxC"
[boolean bool = boxBool;] => [let bool = Boolean.m_booleanValue__java_lang_Boolean__boolean(boxBool);] "autoboxing.AutoBoxing.testUnboxing"
[bool] => [bool] "bool"
[double d = boxD;] => [let d = Double.m_doubleValue__java_lang_Double__double(boxD);] "autoboxing.AutoBoxing.testUnboxing"
[d] => [d] "d"
[byte b = boxB;] => [let b = boxB.m_byteValue__byte();] "autoboxing.AutoBoxing.testUnboxing"
[b] => [b] "b"
[float f = boxF;] => [let f = boxF.m_floatValue__float();] "autoboxing.AutoBoxing.testUnboxing"
[f] => [f] "f"
[int i = boxI;] => [let i = boxI.m_intValue__int();] "autoboxing.AutoBoxing.testUnboxing"
[i] => [i] "i"
[long l = boxL;] => [let l = boxL.m_longValue__long();] "autoboxing.AutoBoxing.testUnboxing"
[l] => [l] "l"
[short s = boxS;] => [let s = boxS.m_shortValue__short();] "autoboxing.AutoBoxing.testUnboxing"
[s] => [s] "s"
[char c = boxC;] => [let c = boxC.m_charValue__char();] "autoboxing.AutoBoxing.testUnboxing"
[c] => [c] "c"
[boxBool = box(boxBool);] => [boxBool = this.m_box__boolean__java_lang_Boolean(Boolean.m_booleanValue__java_lang_Boolean__boolean(boxBool));] "autoboxing.AutoBoxing.testUnboxing"
[boxD = box(boxD);] => [boxD = this.m_box__double__java_lang_Double(Double.m_doubleValue__java_lang_Double__double(boxD));] "autoboxing.AutoBoxing.testUnboxing"
[boxB = box(boxB);] => [boxB = this.m_box__byte__java_lang_Byte(boxB.m_byteValue__byte());] "autoboxing.AutoBoxing.testUnboxing"
[boxF = box(boxF);] => [boxF = this.m_box__float__java_lang_Float(boxF.m_floatValue__float());] "autoboxing.AutoBoxing.testUnboxing"
[boxI = box(boxI);] => [boxI = this.m_box__int__java_lang_Integer(boxI.m_intValue__int());] "autoboxing.AutoBoxing.testUnboxing"
[boxL = box(boxL);] => [boxL = this.m_box__long__java_lang_Long(boxL.m_longValue__long());] "autoboxing.AutoBoxing.testUnboxing"
[boxS = box(boxS);] => [boxS = this.m_box__short__java_lang_Short(boxS.m_shortValue__short());] "autoboxing.AutoBoxing.testUnboxing"
[boxC = box(boxC);] => [boxC = this.m_box__char__java_lang_Character(boxC.m_charValue__char());] "autoboxing.AutoBoxing.testUnboxing"
[d = boxB;] => [d = boxB.m_byteValue__byte();] "autoboxing.AutoBoxing.testUnboxing"
[d = boxF;] => [d = boxF.m_floatValue__float();] "autoboxing.AutoBoxing.testUnboxing"
[d = boxI;] => [d = boxI.m_intValue__int();] "autoboxing.AutoBoxing.testUnboxing"
[d = boxL;] => [d = $Primitives.widenLongToDouble(boxL.m_longValue__long());] "autoboxing.AutoBoxing.testUnboxing"
[d = boxS;] => [d = boxS.m_shortValue__short();] "autoboxing.AutoBoxing.testUnboxing"
[d = boxC;] => [d = boxC.m_charValue__char();] "autoboxing.AutoBoxing.testUnboxing"
[takesAndReturnsPrimitiveDouble(boxB);] => [this.m_takesAndReturnsPrimitiveDouble__double__double(boxB.m_byteValue__byte());] "autoboxing.AutoBoxing.testUnboxing"
[takesAndReturnsPrimitiveDouble(boxF);] => [this.m_takesAndReturnsPrimitiveDouble__double__double(boxF.m_floatValue__float());] "autoboxing.AutoBoxing.testUnboxing"
[takesAndReturnsPrimitiveDouble(boxI);] => [this.m_takesAndReturnsPrimitiveDouble__double__double(boxI.m_intValue__int());] "autoboxing.AutoBoxing.testUnboxing"
[takesAndReturnsPrimitiveDouble(boxL);] => [this.m_takesAndReturnsPrimitiveDouble__double__double($Primitives.widenLongToDouble(boxL.m_longValue__long()));] "autoboxing.AutoBoxing.testUnboxing"
[takesAndReturnsPrimitiveDouble(boxS);] => [this.m_takesAndReturnsPrimitiveDouble__double__double(boxS.m_shortValue__short());] "autoboxing.AutoBoxing.testUnboxing"
[takesAndReturnsPrimitiveDouble(boxC);] => [this.m_takesAndReturnsPrimitiveDouble__double__double(boxC.m_charValue__char());] "autoboxing.AutoBoxing.testUnboxing"
[Void v = takesAndReturnsVoid(takesAndReturnsVoid(null));] => [let v = this.m_takesAndReturnsVoid__java_lang_Void__java_lang_Void(this.m_takesAndReturnsVoid__java_lang_Void__java_lang_Void(null));] "autoboxing.AutoBoxing.testUnboxing"
[v] => [v] "v"
[bool = boxBool && boxBool;] => [bool = Boolean.m_booleanValue__java_lang_Boolean__boolean(boxBool) && Boolean.m_booleanValue__java_lang_Boolean__boolean(boxBool);] "autoboxing.AutoBoxing.testUnboxing"
[d = boxD + boxD;] => [d = Double.m_doubleValue__java_lang_Double__double(boxD) + Double.m_doubleValue__java_lang_Double__double(boxD);] "autoboxing.AutoBoxing.testUnboxing"
[f = boxF - boxF;] => [f = boxF.m_floatValue__float() - boxF.m_floatValue__float();] "autoboxing.AutoBoxing.testUnboxing"
[i = boxI * boxI;] => [i = Math.imul(boxI.m_intValue__int(), boxI.m_intValue__int());] "autoboxing.AutoBoxing.testUnboxing"
[l = boxL / boxL;] => [l = $LongUtils.divide(boxL.m_longValue__long(), boxL.m_longValue__long());] "autoboxing.AutoBoxing.testUnboxing"
[bool = !boxBool;] => [bool = !Boolean.m_booleanValue__java_lang_Boolean__boolean(boxBool);] "autoboxing.AutoBoxing.testUnboxing"
[i = +boxI;] => [i = + boxI.m_intValue__int();] "autoboxing.AutoBoxing.testUnboxing"
[i = -boxI;] => [i = - boxI.m_intValue__int() | 0;] "autoboxing.AutoBoxing.testUnboxing"
[i = ~boxI;] => [i = ~boxI.m_intValue__int();] "autoboxing.AutoBoxing.testUnboxing"
[boxD = -boxD;] => [boxD = - Double.m_doubleValue__java_lang_Double__double(boxD);] "autoboxing.AutoBoxing.testUnboxing"
[boxI = -boxI;] => [boxI = Integer.m_valueOf__int__java_lang_Integer(- boxI.m_intValue__int() | 0);] "autoboxing.AutoBoxing.testUnboxing"
[switch (boxI) {
      default:
    }] => [switch (boxI.m_intValue__int()) {
   default:
  }] "autoboxing.AutoBoxing.testUnboxing"
[i += boxI += i += boxI;] => [i = i + (boxI = Integer.m_valueOf__int__java_lang_Integer(boxI.m_intValue__int() + (i = i + boxI.m_intValue__int() | 0) | 0)).m_intValue__int() | 0;] "autoboxing.AutoBoxing.testUnboxing"
[i <<= boxI;] => [i <<= boxI.m_intValue__int();] "autoboxing.AutoBoxing.testUnboxing"
[i <<= boxL;] => [i <<= $Primitives.narrowLongToInt(boxL.m_longValue__long());] "autoboxing.AutoBoxing.testUnboxing"
[l <<= boxI;] => [l = $LongUtils.leftShift(l, boxI.m_intValue__int());] "autoboxing.AutoBoxing.testUnboxing"
[l <<= boxL;] => [l = $LongUtils.leftShift(l, $Primitives.narrowLongToInt(boxL.m_longValue__long()));] "autoboxing.AutoBoxing.testUnboxing"
[testUnboxingBoolean] => [m_testUnboxingBoolean__void]
[Boolean boxB1 = new Boolean(true);] => [let boxB1 = Boolean.$create__boolean(true);] "autoboxing.AutoBoxing.testUnboxingBoolean"
[boxB1] => [boxB1] "boxB1"
[Boolean boxB2 = new Boolean(false);] => [let boxB2 = Boolean.$create__boolean(false);] "autoboxing.AutoBoxing.testUnboxingBoolean"
[boxB2] => [boxB2] "boxB2"
[boolean br;] => [let /** boolean */ br;] "autoboxing.AutoBoxing.testUnboxingBoolean"
[br] => [br] "br"
[boolean boxr;] => [let /** boolean */ boxr;] "autoboxing.AutoBoxing.testUnboxingBoolean"
[boxr] => [boxr] "boxr"
[boxr = boxB1 == boxB2;] => [boxr = $Equality.$same(boxB1, boxB2);] "autoboxing.AutoBoxing.testUnboxingBoolean"
[br = boxB1 == boxB2;] => [br = $Equality.$same(boxB1, boxB2);] "autoboxing.AutoBoxing.testUnboxingBoolean"
[assert boxr;] => [$Asserts.$assert(boxr);] "autoboxing.AutoBoxing.testUnboxingBoolean"
[assert br;] => [$Asserts.$assert(br);] "autoboxing.AutoBoxing.testUnboxingBoolean"
[boxr = boxB1 != boxB2;] => [boxr = !$Equality.$same(boxB1, boxB2);] "autoboxing.AutoBoxing.testUnboxingBoolean"
[br = boxB1 != boxB2;] => [br = !$Equality.$same(boxB1, boxB2);] "autoboxing.AutoBoxing.testUnboxingBoolean"
[assert boxr;] => [$Asserts.$assert(boxr);] "autoboxing.AutoBoxing.testUnboxingBoolean"
[assert br;] => [$Asserts.$assert(br);] "autoboxing.AutoBoxing.testUnboxingBoolean"
[boxr = boxB1 ^ boxB2;] => [boxr = !!(+ Boolean.m_booleanValue__java_lang_Boolean__boolean(boxB1) ^ + Boolean.m_booleanValue__java_lang_Boolean__boolean(boxB2));] "autoboxing.AutoBoxing.testUnboxingBoolean"
[br = boxB1 ^ boxB2;] => [br = !!(+ Boolean.m_booleanValue__java_lang_Boolean__boolean(boxB1) ^ + Boolean.m_booleanValue__java_lang_Boolean__boolean(boxB2));] "autoboxing.AutoBoxing.testUnboxingBoolean"
[assert boxr;] => [$Asserts.$assert(boxr);] "autoboxing.AutoBoxing.testUnboxingBoolean"
[assert br;] => [$Asserts.$assert(br);] "autoboxing.AutoBoxing.testUnboxingBoolean"
[boxr = boxB1 & boxB2;] => [boxr = !!(+ Boolean.m_booleanValue__java_lang_Boolean__boolean(boxB1) & + Boolean.m_booleanValue__java_lang_Boolean__boolean(boxB2));] "autoboxing.AutoBoxing.testUnboxingBoolean"
[br = boxB1 & boxB2;] => [br = !!(+ Boolean.m_booleanValue__java_lang_Boolean__boolean(boxB1) & + Boolean.m_booleanValue__java_lang_Boolean__boolean(boxB2));] "autoboxing.AutoBoxing.testUnboxingBoolean"
[assert boxr;] => [$Asserts.$assert(boxr);] "autoboxing.AutoBoxing.testUnboxingBoolean"
[assert br;] => [$Asserts.$assert(br);] "autoboxing.AutoBoxing.testUnboxingBoolean"
[boxr = boxB1 | boxB2;] => [boxr = !!(+ Boolean.m_booleanValue__java_lang_Boolean__boolean(boxB1) | + Boolean.m_booleanValue__java_lang_Boolean__boolean(boxB2));] "autoboxing.AutoBoxing.testUnboxingBoolean"
[br = boxB1 | boxB2;] => [br = !!(+ Boolean.m_booleanValue__java_lang_Boolean__boolean(boxB1) | + Boolean.m_booleanValue__java_lang_Boolean__boolean(boxB2));] "autoboxing.AutoBoxing.testUnboxingBoolean"
[assert boxr;] => [$Asserts.$assert(boxr);] "autoboxing.AutoBoxing.testUnboxingBoolean"
[assert br;] => [$Asserts.$assert(br);] "autoboxing.AutoBoxing.testUnboxingBoolean"
[boxr = boxB1 && boxB2;] => [boxr = Boolean.m_booleanValue__java_lang_Boolean__boolean(boxB1) && Boolean.m_booleanValue__java_lang_Boolean__boolean(boxB2);] "autoboxing.AutoBoxing.testUnboxingBoolean"
[br = boxB1 && boxB2;] => [br = Boolean.m_booleanValue__java_lang_Boolean__boolean(boxB1) && Boolean.m_booleanValue__java_lang_Boolean__boolean(boxB2);] "autoboxing.AutoBoxing.testUnboxingBoolean"
[assert boxr;] => [$Asserts.$assert(boxr);] "autoboxing.AutoBoxing.testUnboxingBoolean"
[assert br;] => [$Asserts.$assert(br);] "autoboxing.AutoBoxing.testUnboxingBoolean"
[boxr = boxB1 || boxB2;] => [boxr = Boolean.m_booleanValue__java_lang_Boolean__boolean(boxB1) || Boolean.m_booleanValue__java_lang_Boolean__boolean(boxB2);] "autoboxing.AutoBoxing.testUnboxingBoolean"
[br = boxB1 || boxB2;] => [br = Boolean.m_booleanValue__java_lang_Boolean__boolean(boxB1) || Boolean.m_booleanValue__java_lang_Boolean__boolean(boxB2);] "autoboxing.AutoBoxing.testUnboxingBoolean"
[assert boxr;] => [$Asserts.$assert(boxr);] "autoboxing.AutoBoxing.testUnboxingBoolean"
[assert br;] => [$Asserts.$assert(br);] "autoboxing.AutoBoxing.testUnboxingBoolean"
[boxr = boxB1 = boxB2;] => [boxr = Boolean.m_booleanValue__java_lang_Boolean__boolean(boxB1 = boxB2);] "autoboxing.AutoBoxing.testUnboxingBoolean"
[br = boxB1 = boxB2;] => [br = Boolean.m_booleanValue__java_lang_Boolean__boolean(boxB1 = boxB2);] "autoboxing.AutoBoxing.testUnboxingBoolean"
[assert boxr;] => [$Asserts.$assert(boxr);] "autoboxing.AutoBoxing.testUnboxingBoolean"
[assert br;] => [$Asserts.$assert(br);] "autoboxing.AutoBoxing.testUnboxingBoolean"
[boxr = boxB1 &= boxB2;] => [boxr = Boolean.m_booleanValue__java_lang_Boolean__boolean(boxB1 = !!(+ Boolean.m_booleanValue__java_lang_Boolean__boolean(boxB1) & + Boolean.m_booleanValue__java_lang_Boolean__boolean(boxB2)));] "autoboxing.AutoBoxing.testUnboxingBoolean"
[br = boxB1 &= boxB2;] => [br = Boolean.m_booleanValue__java_lang_Boolean__boolean(boxB1 = !!(+ Boolean.m_booleanValue__java_lang_Boolean__boolean(boxB1) & + Boolean.m_booleanValue__java_lang_Boolean__boolean(boxB2)));] "autoboxing.AutoBoxing.testUnboxingBoolean"
[assert boxr;] => [$Asserts.$assert(boxr);] "autoboxing.AutoBoxing.testUnboxingBoolean"
[assert br;] => [$Asserts.$assert(br);] "autoboxing.AutoBoxing.testUnboxingBoolean"
[boxr = boxB1 |= boxB2;] => [boxr = Boolean.m_booleanValue__java_lang_Boolean__boolean(boxB1 = !!(+ Boolean.m_booleanValue__java_lang_Boolean__boolean(boxB1) | + Boolean.m_booleanValue__java_lang_Boolean__boolean(boxB2)));] "autoboxing.AutoBoxing.testUnboxingBoolean"
[br = boxB1 |= boxB2;] => [br = Boolean.m_booleanValue__java_lang_Boolean__boolean(boxB1 = !!(+ Boolean.m_booleanValue__java_lang_Boolean__boolean(boxB1) | + Boolean.m_booleanValue__java_lang_Boolean__boolean(boxB2)));] "autoboxing.AutoBoxing.testUnboxingBoolean"
[assert boxr;] => [$Asserts.$assert(boxr);] "autoboxing.AutoBoxing.testUnboxingBoolean"
[assert br;] => [$Asserts.$assert(br);] "autoboxing.AutoBoxing.testUnboxingBoolean"
[boxr = boxB1 ^= boxB2;] => [boxr = Boolean.m_booleanValue__java_lang_Boolean__boolean(boxB1 = !!(+ Boolean.m_booleanValue__java_lang_Boolean__boolean(boxB1) ^ + Boolean.m_booleanValue__java_lang_Boolean__boolean(boxB2)));] "autoboxing.AutoBoxing.testUnboxingBoolean"
[br = boxB1 ^= boxB2;] => [br = Boolean.m_booleanValue__java_lang_Boolean__boolean(boxB1 = !!(+ Boolean.m_booleanValue__java_lang_Boolean__boolean(boxB1) ^ + Boolean.m_booleanValue__java_lang_Boolean__boolean(boxB2)));] "autoboxing.AutoBoxing.testUnboxingBoolean"
[assert boxr;] => [$Asserts.$assert(boxr);] "autoboxing.AutoBoxing.testUnboxingBoolean"
[assert br;] => [$Asserts.$assert(br);] "autoboxing.AutoBoxing.testUnboxingBoolean"
[Boolean boxB = null;] => [let boxB = null;] "autoboxing.AutoBoxing.testUnboxingBoolean"
[boxB] => [boxB] "boxB"
[boxB = !boxB;] => [boxB = !Boolean.m_booleanValue__java_lang_Boolean__boolean(boxB);] "autoboxing.AutoBoxing.testUnboxingBoolean"
[boxB = boxB && boxB;] => [boxB = Boolean.m_booleanValue__java_lang_Boolean__boolean(boxB) && Boolean.m_booleanValue__java_lang_Boolean__boolean(boxB);] "autoboxing.AutoBoxing.testUnboxingBoolean"
[boxB = boxB ? boxB : boxB;] => [boxB = Boolean.m_booleanValue__java_lang_Boolean__boolean(boxB) ? boxB : boxB;] "autoboxing.AutoBoxing.testUnboxingBoolean"
[if (boxB) {}] => [if (Boolean.m_booleanValue__java_lang_Boolean__boolean(boxB)) {}] "autoboxing.AutoBoxing.testUnboxingBoolean"
[boolean b = false;] => [let b = false;] "autoboxing.AutoBoxing.testUnboxingBoolean"
[b] => [b] "b"
[b |= boxB |= b |= boxB;] => [b = !!(+ b | + Boolean.m_booleanValue__java_lang_Boolean__boolean(boxB = !!(+ Boolean.m_booleanValue__java_lang_Boolean__boolean(boxB) | + (b = !!(+ b | + Boolean.m_booleanValue__java_lang_Boolean__boolean(boxB))))));] "autoboxing.AutoBoxing.testUnboxingBoolean"
[testUnboxingEquality] => [m_testUnboxingEquality__void]
[Boolean boxB = new Boolean(true);] => [let boxB = Boolean.$create__boolean(true);] "autoboxing.AutoBoxing.testUnboxingEquality"
[boxB] => [boxB] "boxB"
[boolean b = false;] => [let b = false;] "autoboxing.AutoBoxing.testUnboxingEquality"
[b] => [b] "b"
[assert boxB == boxB;] => [$Asserts.$assert($Equality.$same(boxB, boxB));] "autoboxing.AutoBoxing.testUnboxingEquality"
[assert boxB == b;] => [$Asserts.$assert(Boolean.m_booleanValue__java_lang_Boolean__boolean(boxB) == b);] "autoboxing.AutoBoxing.testUnboxingEquality"
[assert b != b;] => [$Asserts.$assert(b != b);] "autoboxing.AutoBoxing.testUnboxingEquality"
[assert b != boxB;] => [$Asserts.$assert(b != Boolean.m_booleanValue__java_lang_Boolean__boolean(boxB));] "autoboxing.AutoBoxing.testUnboxingEquality"
[Integer boxI = new Integer(1);] => [let boxI = Integer.$create__int(1);] "autoboxing.AutoBoxing.testUnboxingEquality"
[boxI] => [boxI] "boxI"
[int i = 1;] => [let i = 1;] "autoboxing.AutoBoxing.testUnboxingEquality"
[i] => [i] "i"
[assert boxI == boxI;] => [$Asserts.$assert($Equality.$same(boxI, boxI));] "autoboxing.AutoBoxing.testUnboxingEquality"
[assert boxI == i;] => [$Asserts.$assert(boxI.m_intValue__int() == i);] "autoboxing.AutoBoxing.testUnboxingEquality"
[assert i != i;] => [$Asserts.$assert(i != i);] "autoboxing.AutoBoxing.testUnboxingEquality"
[assert i != boxI;] => [$Asserts.$assert(i != boxI.m_intValue__int());] "autoboxing.AutoBoxing.testUnboxingEquality"
[testAssertStatement] => [m_testAssertStatement__void]
[Boolean boxB = new Boolean(true);] => [let boxB = Boolean.$create__boolean(true);] "autoboxing.AutoBoxing.testAssertStatement"
[boxB] => [boxB] "boxB"
[boolean b = true;] => [let b = true;] "autoboxing.AutoBoxing.testAssertStatement"
[b] => [b] "b"
[assert boxB;] => [$Asserts.$assert(Boolean.m_booleanValue__java_lang_Boolean__boolean(boxB));] "autoboxing.AutoBoxing.testAssertStatement"
[assert b;] => [$Asserts.$assert(b);] "autoboxing.AutoBoxing.testAssertStatement"
[testUnboxingFromTypeVariable] => [m_testUnboxingFromTypeVariable__void]
[{
    T n = (T) (Long) 10L;
...    assert l == 11L;
  }] => [let /** T */ $value;] "autoboxing.AutoBoxing.testUnboxingFromTypeVariable"
[{
    T n = (T) (Long) 10L;
...    assert l == 11L;
  }] => [AutoBoxing.$clinit();] "autoboxing.AutoBoxing.testUnboxingFromTypeVariable"
[T n = (T) (Long) 10L;] => [let n = /**@type {T}*/ (Long.m_valueOf__long__java_lang_Long($Long.fromInt(10)));] "autoboxing.AutoBoxing.testUnboxingFromTypeVariable"
[n] => [n] "n"
[long l = n;] => [let l = /**@type {!Long}*/ (n).m_longValue__long();] "autoboxing.AutoBoxing.testUnboxingFromTypeVariable"
[l] => [l] "l"
[assert l == 10L;] => [$Asserts.$assert($LongUtils.equals(l, $Long.fromInt(10)));] "autoboxing.AutoBoxing.testUnboxingFromTypeVariable"
[n++;] => [n = /**@type {T}*/ (Long.m_valueOf__long__java_lang_Long($LongUtils.plus(/**@type {!Long}*/ (n).m_longValue__long(), $Long.fromInt(1))));] "autoboxing.AutoBoxing.testUnboxingFromTypeVariable"
[++n;] => [n = /**@type {T}*/ (Long.m_valueOf__long__java_lang_Long($LongUtils.plus(/**@type {!Long}*/ (n).m_longValue__long(), $Long.fromInt(1))));] "autoboxing.AutoBoxing.testUnboxingFromTypeVariable"
[n = n++;] => [n = ($value = n, n = /**@type {T}*/ (Long.m_valueOf__long__java_lang_Long($LongUtils.plus(/**@type {!Long}*/ (n).m_longValue__long(), $Long.fromInt(1)))), $value);] "autoboxing.AutoBoxing.testUnboxingFromTypeVariable"
[n = ++n;] => [n = n = /**@type {T}*/ (Long.m_valueOf__long__java_lang_Long($LongUtils.plus(/**@type {!Long}*/ (n).m_longValue__long(), $Long.fromInt(1))));] "autoboxing.AutoBoxing.testUnboxingFromTypeVariable"
[l = new Local<>().toLong(11L);] => [l = /**@type {!$1Local<Long, T>}*/ ($1Local.$create__()).m_toLong__java_lang_Long__long_$pp_autoboxing(Long.m_valueOf__long__java_lang_Long($Long.fromInt(11)));] "autoboxing.AutoBoxing.testUnboxingFromTypeVariable"
[assert l == 11L;] => [$Asserts.$assert($LongUtils.equals(l, $Long.fromInt(11)));] "autoboxing.AutoBoxing.testUnboxingFromTypeVariable"
[testUnboxingFromIntersectionType] => [m_testUnboxingFromIntersectionType__void]
[{
    T n = (T) (Long) 10L;
...    int i = (Integer & Comparable<Integer>) 10;
  }] => [let /** T */ $value;] "autoboxing.AutoBoxing.testUnboxingFromIntersectionType"
[{
    T n = (T) (Long) 10L;
...    int i = (Integer & Comparable<Integer>) 10;
  }] => [AutoBoxing.$clinit();] "autoboxing.AutoBoxing.testUnboxingFromIntersectionType"
[T n = (T) (Long) 10L;] => [let n = /**@type {T}*/ (Long.m_valueOf__long__java_lang_Long($Long.fromInt(10)));] "autoboxing.AutoBoxing.testUnboxingFromIntersectionType"
[n] => [n] "n"
[long l = n;] => [let l = /**@type {!Long}*/ (n).m_longValue__long();] "autoboxing.AutoBoxing.testUnboxingFromIntersectionType"
[l] => [l] "l"
[assert l == 10L;] => [$Asserts.$assert($LongUtils.equals(l, $Long.fromInt(10)));] "autoboxing.AutoBoxing.testUnboxingFromIntersectionType"
[n++;] => [n = /**@type {T}*/ (Long.m_valueOf__long__java_lang_Long($LongUtils.plus(/**@type {!Long}*/ (n).m_longValue__long(), $Long.fromInt(1))));] "autoboxing.AutoBoxing.testUnboxingFromIntersectionType"
[++n;] => [n = /**@type {T}*/ (Long.m_valueOf__long__java_lang_Long($LongUtils.plus(/**@type {!Long}*/ (n).m_longValue__long(), $Long.fromInt(1))));] "autoboxing.AutoBoxing.testUnboxingFromIntersectionType"
[n = n++;] => [n = ($value = n, n = /**@type {T}*/ (Long.m_valueOf__long__java_lang_Long($LongUtils.plus(/**@type {!Long}*/ (n).m_longValue__long(), $Long.fromInt(1)))), $value);] "autoboxing.AutoBoxing.testUnboxingFromIntersectionType"
[n = ++n;] => [n = n = /**@type {T}*/ (Long.m_valueOf__long__java_lang_Long($LongUtils.plus(/**@type {!Long}*/ (n).m_longValue__long(), $Long.fromInt(1))));] "autoboxing.AutoBoxing.testUnboxingFromIntersectionType"
[l = new Local<>().toLong(11L);] => [l = /**@type {!$2Local<Long, T>}*/ ($2Local.$create__()).m_toLong__java_lang_Long__long_$pp_autoboxing(Long.m_valueOf__long__java_lang_Long($Long.fromInt(11)));] "autoboxing.AutoBoxing.testUnboxingFromIntersectionType"
[assert l == 11L;] => [$Asserts.$assert($LongUtils.equals(l, $Long.fromInt(11)));] "autoboxing.AutoBoxing.testUnboxingFromIntersectionType"
[int i = (Integer & Comparable<Integer>) 10;] => [let i = Integer.m_valueOf__int__java_lang_Integer(10).m_intValue__int();] "autoboxing.AutoBoxing.testUnboxingFromIntersectionType"
[i] => [i] "i"
[testUnbox_withCast] => [m_testUnbox_withCast__void]
[Supplier<Integer> supplier = new Supplier<>();] => [let supplier = /**@type {!$1Supplier<Integer>}*/ ($1Supplier.$create__autoboxing_AutoBoxing(this));] "autoboxing.AutoBoxing.testUnbox_withCast"
[supplier] => [supplier] "supplier"
[int i = (int) supplier.get();] => [let i = /**@type {Integer}*/ ($Casts.$to(supplier.m_get__java_lang_Object_$pp_autoboxing(), Integer)).m_intValue__int();] "autoboxing.AutoBoxing.testUnbox_withCast"
[i] => [i] "i"
[AutoBoxing] => [$clinit]
[AutoBoxing] => [AutoBoxing.$clinit = () =>{};] "autoboxing.AutoBoxing.<clinit>"
[AutoBoxing] => [AutoBoxing.$loadModules();] "autoboxing.AutoBoxing.<clinit>"
[AutoBoxing] => [j_l_Object.$clinit();] "autoboxing.AutoBoxing.<clinit>"
[public static final float COMPILE_TIME_CONSTANT = 1.1f;] => [/**@const {number} @nodts*/
AutoBoxing.f_COMPILE_TIME_CONSTANT__autoboxing_AutoBoxing = 1.100000023841858;]
[COMPILE_TIME_CONSTANT] => [f_COMPILE_TIME_CONSTANT__autoboxing_AutoBoxing]
