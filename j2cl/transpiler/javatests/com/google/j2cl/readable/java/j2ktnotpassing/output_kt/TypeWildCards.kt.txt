// Generated from "j2ktnotpassing/TypeWildCards.java"
@file:OptIn(ExperimentalObjCName::class)
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_ANONYMOUS_PARAMETER",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER",
 "REDUNDANT_ELSE_IN_WHEN")

package j2ktnotpassing

import javaemul.lang.*
import kotlin.Any
import kotlin.OptIn
import kotlin.Suppress
import kotlin.experimental.ExperimentalObjCName
import kotlin.jvm.JvmStatic
import kotlin.native.ObjCName

@ObjCName("J2ktJ2ktnotpassingTypeWildCards", exact = true)
open class TypeWildCards {
 @ObjCName("J2ktJ2ktnotpassingTypeWildCardsCompanion", exact = true)
 companion object {
  @JvmStatic
  @ObjCName("testObservableParameterized")
  fun <T: TypeWildCards.Observable<*>?> testObservableParameterized(
   @ObjCName("withJ2ktnotpassingTypeWildCards_Observable") observable: T
  ) {
   (observable as TypeWildCards.Observable<Any?>?)!!.addObserver(TypeWildCards.Observer { e /* capture#1-of * */ ->
   })
  }

  @JvmStatic
  @ObjCName("testRecursiveObservable")
  fun testRecursiveObservable(
   @ObjCName("withJ2ktnotpassingTypeWildCards_RecursiveObservable") observable: TypeWildCards.RecursiveObservable<*>?
  ) {
   (observable as TypeWildCards.RecursiveObservable<TypeWildCards.RecursiveObservable<E>?>?)!!.addObserver(TypeWildCards.Observer { e /* capture#2-of out TypeWildCards.RecursiveObservable<*>? */ ->
   })
  }
 }

 @ObjCName("J2ktJ2ktnotpassingTypeWildCards_Observer", exact = true)
 fun interface Observer<E> {
  @ObjCName("on")
  fun on(
   @ObjCName("withId") event: E
  )
 }

 @ObjCName("J2ktJ2ktnotpassingTypeWildCards_Observable", exact = true)
 fun interface Observable<E> {
  @ObjCName("addObserver")
  fun addObserver(
   @ObjCName("withJ2ktnotpassingTypeWildCards_Observer") observer: TypeWildCards.Observer<E>?
  )
 }

 @ObjCName("J2ktJ2ktnotpassingTypeWildCards_RecursiveObservable", exact = true)
 fun interface RecursiveObservable<E: TypeWildCards.RecursiveObservable<E>?> {
  @ObjCName("addObserver")
  fun addObserver(
   @ObjCName("withJ2ktnotpassingTypeWildCards_Observer") observer: TypeWildCards.Observer<E>?
  )
 }
}
