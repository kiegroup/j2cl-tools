// Generated from "abstractmethodoverridedefault/AbstractMethodOverrideDefault.java"
@file:OptIn(ExperimentalObjCName::class)
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "REPEATED_BOUND",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER")

package abstractmethodoverridedefault

import javaemul.lang.*
import kotlin.OptIn
import kotlin.Suppress
import kotlin.experimental.ExperimentalObjCName
import kotlin.native.ObjCName

@ObjCName("J2ktAbstractmethodoverridedefaultAbstractMethodOverrideDefault", exact = true)
open class AbstractMethodOverrideDefault {
 fun interface I {
  @ObjCName("foo")
  fun foo()

  @ObjCName("bar")
  fun bar() {}
 }

 fun interface J {
  @ObjCName("foo")
  fun foo() {}

  @ObjCName("bar")
  fun bar()
 }

 abstract class A: AbstractMethodOverrideDefault.I {
  abstract override fun foo()
 }

 abstract class B: AbstractMethodOverrideDefault.A(), AbstractMethodOverrideDefault.J {
  open override fun bar() {
   if (false) {
    this.bar()
   }
  }

  abstract override fun foo()
 }

 open class C: AbstractMethodOverrideDefault.A() {
  open override fun foo() {}

  open override fun bar() {
   super<AbstractMethodOverrideDefault.A>.bar()
  }
 }
}
