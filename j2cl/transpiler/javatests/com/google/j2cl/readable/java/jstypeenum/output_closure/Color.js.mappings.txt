[Color] => [Color]
[Color] => [constructor]
[Color] => [super();] "jstypeenum.Color.<synthetic: ctor_js>"
[Color] => [$create__java_lang_String__int]
[Color] => [let $instance = new Color();] "jstypeenum.Color.<synthetic: ctor_create>"
[Color] => [$instance.$ctor__jstypeenum_Color__java_lang_String__int__void($name, $ordinal);] "jstypeenum.Color.<synthetic: ctor_create>"
[Color] => [return $instance;] "jstypeenum.Color.<synthetic: ctor_create>"
[Color] => [$ctor__jstypeenum_Color__java_lang_String__int__void]
[Color] => [this.f_name__java_lang_Enum_ = $name;] "jstypeenum.Color.<init>"
[Color] => [this.f_ordinal__java_lang_Enum_ = $ordinal;] "jstypeenum.Color.<init>"
[Color] => [this.$ctor__java_lang_Enum__java_lang_String__int__void($name, $ordinal);] "jstypeenum.Color.<init>"
[Color] => [valueOf]
[Color] => [Color.$clinit();] "jstypeenum.Color.valueOf"
[Color] => [if ($Equality.$same(Color.f_namesToValuesMap__jstypeenum_Color_, null)) {
   Color.f_namesToValuesMap__jstypeenum_Color_ = /**@type {Map<?string, !Color>}*/ ($Enums.createMapFromValues(Color.values()));
  }] "jstypeenum.Color.valueOf"
[Color] => [Color.f_namesToValuesMap__jstypeenum_Color_ = /**@type {Map<?string, !Color>}*/ ($Enums.createMapFromValues(Color.values()));] "jstypeenum.Color.valueOf"
[Color] => [return /**@type {Color}*/ ($Enums.getValueFromNameAndMap(name, Color.f_namesToValuesMap__jstypeenum_Color_));] "jstypeenum.Color.valueOf"
[Color] => [values]
[Color] => [Color.$clinit();] "jstypeenum.Color.values"
[Color] => [return /**@type {!Array<Color>}*/ ($Arrays.$init([Color.RED, Color.GREEN, Color.BLUE], Color));] "jstypeenum.Color.values"
[Color] => [$clinit]
[Color] => [Color.$clinit = () =>{};] "jstypeenum.Color.<clinit>"
[Color] => [Color.$loadModules();] "jstypeenum.Color.<clinit>"
[Color] => [Enum.$clinit();] "jstypeenum.Color.<clinit>"
[RED] => [/**@const {number} @nodts*/
Color.$ordinal_RED__jstypeenum_Color = 0;]
[GREEN] => [/**@const {number} @nodts*/
Color.$ordinal_GREEN__jstypeenum_Color = 1;]
[BLUE] => [/**@const {number} @nodts*/
Color.$ordinal_BLUE__jstypeenum_Color = 2;]
[RED] => [/**@const {!Color}*/
Color.RED = /**@pureOrBreakMyCode*/ Color.$create__java_lang_String__int($Util.$makeEnumName('RED'), Color.$ordinal_RED__jstypeenum_Color);]
[RED] => [RED]
[GREEN] => [/**@const {!Color}*/
Color.GREEN = /**@pureOrBreakMyCode*/ Color.$create__java_lang_String__int($Util.$makeEnumName('GREEN'), Color.$ordinal_GREEN__jstypeenum_Color);]
[GREEN] => [GREEN]
[BLUE] => [/**@const {!Color}*/
Color.BLUE = /**@pureOrBreakMyCode*/ Color.$create__java_lang_String__int($Util.$makeEnumName('BLUE'), Color.$ordinal_BLUE__jstypeenum_Color);]
[BLUE] => [BLUE]
[Color] => [/**@type {Map<?string, !Color>} @nodts*/
Color.f_namesToValuesMap__jstypeenum_Color_;]
