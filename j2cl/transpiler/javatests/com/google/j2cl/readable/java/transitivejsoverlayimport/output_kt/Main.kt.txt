// Generated from "transitivejsoverlayimport/Main.java"
@file:OptIn(ExperimentalObjCName::class)
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "REPEATED_BOUND",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_ANONYMOUS_PARAMETER",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER")

package transitivejsoverlayimport

import javaemul.lang.*
import jsinterop.annotations.JsConstructor
import jsinterop.annotations.JsOverlay
import jsinterop.annotations.JsPackage
import jsinterop.annotations.JsProperty
import jsinterop.annotations.JsType
import kotlin.Array
import kotlin.Int
import kotlin.OptIn
import kotlin.String
import kotlin.Suppress
import kotlin.experimental.ExperimentalObjCName
import kotlin.jvm.JvmStatic
import kotlin.native.ObjCName

@JsType(name = "Object", namespace = JsPackage.GLOBAL, isNative = true)
open class Immediate internal constructor(): Transitive() {
 @JsOverlay
 internal fun doImmediateInstanceMethod_pp_transitivejsoverlayimport() {}
}

open class NonNativeUpper: Immediate {
 @JsConstructor
 constructor()

 internal open fun doNonNativeUpperInstanceMethod_pp_transitivejsoverlayimport() {}
}

open class NonNativeLower: NonNativeUpper {
 @JsConstructor
 constructor()

 internal open fun doNonNativeLowerInstanceMethod_pp_transitivejsoverlayimport() {}
}

@JsType(name = "Object", namespace = JsPackage.GLOBAL, isNative = true)
open class Transitive internal constructor() {
 @JsProperty(name = "jsProperty")
 internal external fun getJsProperty_pp_transitivejsoverlayimport(): Int

 @JsOverlay
 internal fun doTransitiveInstanceMethod_pp_transitivejsoverlayimport(arg1: String?) {}
}

@ObjCName("J2ktTransitivejsoverlayimportMain", exact = true)
open class Main {
 @ObjCName("J2ktTransitivejsoverlayimportMainCompanion", exact = true)
 companion object {
  @JvmStatic
  @ObjCName("main")
  fun main(
   vararg @ObjCName("withNSStringArray") args: String?
  ) {
   val args_1: Array<String?>? = args as Array<String?>?
   val transitive: Transitive? = null
   transitive!!.doTransitiveInstanceMethod_pp_transitivejsoverlayimport("arg1")
   transitive!!.getJsProperty_pp_transitivejsoverlayimport()
   val immediate: Immediate? = null
   immediate!!.doTransitiveInstanceMethod_pp_transitivejsoverlayimport("arg1")
   immediate!!.getJsProperty_pp_transitivejsoverlayimport()
   immediate!!.doImmediateInstanceMethod_pp_transitivejsoverlayimport()
   val nonNativeUpper: NonNativeUpper? = null
   nonNativeUpper!!.doTransitiveInstanceMethod_pp_transitivejsoverlayimport("arg1")
   nonNativeUpper!!.getJsProperty_pp_transitivejsoverlayimport()
   nonNativeUpper!!.doImmediateInstanceMethod_pp_transitivejsoverlayimport()
   nonNativeUpper!!.doNonNativeUpperInstanceMethod_pp_transitivejsoverlayimport()
   val nonNativeLower: NonNativeLower? = null
   nonNativeLower!!.doTransitiveInstanceMethod_pp_transitivejsoverlayimport("arg1")
   nonNativeLower!!.getJsProperty_pp_transitivejsoverlayimport()
   nonNativeLower!!.doImmediateInstanceMethod_pp_transitivejsoverlayimport()
   nonNativeLower!!.doNonNativeUpperInstanceMethod_pp_transitivejsoverlayimport()
   nonNativeLower!!.doNonNativeLowerInstanceMethod_pp_transitivejsoverlayimport()
  }
 }
}
