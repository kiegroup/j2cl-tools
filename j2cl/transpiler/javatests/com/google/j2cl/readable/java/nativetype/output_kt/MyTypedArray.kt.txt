// Generated from "nativetype/MyTypedArray.java"
@file:OptIn(ExperimentalObjCName::class)
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "REPEATED_BOUND",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_ANONYMOUS_PARAMETER",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER")

package nativetype

import javaemul.lang.*
import jsinterop.annotations.JsOverlay
import jsinterop.annotations.JsPackage
import jsinterop.annotations.JsProperty
import jsinterop.annotations.JsType
import kotlin.Int
import kotlin.OptIn
import kotlin.Suppress
import kotlin.experimental.ExperimentalObjCName
import kotlin.jvm.JvmField
import kotlin.native.ObjCName

@ObjCName("J2ktNativetypeMyTypedArray", exact = true)
@JsType(name = "Array", namespace = JsPackage.GLOBAL, isNative = true)
open class MyTypedArray<T> {
 @JvmField
 @JsProperty(name = "length")
 internal var length_private_2: Int = 0

 @ObjCName("size")
 @JsOverlay
 fun size(): Int {
  return this.length_private_2
 }

 @ObjCName("get")
 @JsOverlay
 fun get(
  @ObjCName("withInt") index: Int
 ): T {
  return null as T
 }
}
