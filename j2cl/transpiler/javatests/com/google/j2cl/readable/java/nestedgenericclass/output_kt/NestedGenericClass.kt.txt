// Generated from "nestedgenericclass/NestedGenericClass.java"
@file:OptIn(ExperimentalObjCName::class)
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "REPEATED_BOUND",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_ANONYMOUS_PARAMETER",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER")

package nestedgenericclass

import javaemul.lang.*
import kotlin.Any
import kotlin.Error
import kotlin.Exception
import kotlin.Number
import kotlin.OptIn
import kotlin.Suppress
import kotlin.experimental.ExperimentalObjCName
import kotlin.jvm.JvmField
import kotlin.native.ObjCName

@ObjCName("J2ktNestedgenericclassNestedGenericClass", exact = true)
open class NestedGenericClass<T> {
 @ObjCName("fun")
 open fun <S> `fun`(
  @ObjCName("withId") t: S
 ) {
  open class E<S> internal constructor() {}
  open class F internal constructor() {
   @JvmField
   var f: S? = null
  }
  E<Number?>()
  F()
 }

 @ObjCName("bar")
 open fun <T_1> bar() {
  open class G<T> internal constructor() {
   open fun <T_1> bar() {
    open class H<T> internal constructor() {}
    H<Number?>()
   }
  }
  G<Error?>().bar<Any?>()
 }

 @ObjCName("test")
 open fun test() {
  val n: NestedGenericClass<Number?>? = NestedGenericClass<Number?>()
  val a: NestedGenericClass<Number?>.A<Error?>? = n!!.A<Error?>()
  val b: NestedGenericClass<Number?>.A<Error?>.B<Exception?>? = a!!.B<Exception?>()
  n!!.C()
  n!!.C().D()
 }

 @ObjCName("J2ktNestedgenericclassNestedGenericClass_A", exact = true)
 open inner class A<T> {
  @ObjCName("J2ktNestedgenericclassNestedGenericClass_A_B", exact = true)
  open inner class B<T> constructor() {}
 }

 @ObjCName("J2ktNestedgenericclassNestedGenericClass_C", exact = true)
 open inner class C {
  @JvmField
  @ObjCName("c_")
  var c: T? = null

  @ObjCName("J2ktNestedgenericclassNestedGenericClass_C_D", exact = true)
  open inner class D {
   @JvmField
   @ObjCName("d_")
   var d: T? = null
  }
 }

 open inner class RecursiveTypeVariable<T: NestedGenericClass<T>.RecursiveTypeVariable<T>?> internal constructor() {
  internal open fun test_pp_nestedgenericclass(t: T) {
   t!!.Inner()
  }

  open inner class Inner internal constructor() {}
 }
}
