// Generated from "j2kt/NullabilityScopes.java"
@file:OptIn(ExperimentalObjCName::class)
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_ANONYMOUS_PARAMETER",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER",
 "REDUNDANT_ELSE_IN_WHEN")

package j2kt

import javaemul.lang.*
import kotlin.Any
import kotlin.OptIn
import kotlin.String
import kotlin.Suppress
import kotlin.experimental.ExperimentalObjCName
import kotlin.native.ObjCName

@ObjCName("J2ktJ2ktNullabilityScopes", exact = true)
open class NullabilityScopes {
 @ObjCName("J2ktJ2ktNullabilityScopes_NullMarkedScope", exact = true)
 open class NullMarkedScope {
  @ObjCName("testNullMarkedWildcardConstructorRaw")
  open fun testNullMarkedWildcardConstructorRaw(
   @ObjCName("withJ2ktNullabilityScopes_NullMarkedScope_Foo") nullMarkedFoo: NullabilityScopes.NullMarkedScope.Foo<String>
  ) {
   NullabilityScopes.NullMarkedScope.Foo<Any?>(nullMarkedFoo as NullabilityScopes.NullMarkedScope.Foo<Any?>)
  }

  @ObjCName("testNullMarkedWildcardConstructorImplicitTypeArguments")
  open fun testNullMarkedWildcardConstructorImplicitTypeArguments(
   @ObjCName("withJ2ktNullabilityScopes_NullMarkedScope_Foo") nullMarkedFoo: NullabilityScopes.NullMarkedScope.Foo<String>
  ) {
   NullabilityScopes.NullMarkedScope.Foo<String>(nullMarkedFoo)
  }

  @ObjCName("testNullMarkedWildcardConstructorExplicitTypeArguments")
  open fun testNullMarkedWildcardConstructorExplicitTypeArguments(
   @ObjCName("withJ2ktNullabilityScopes_NullMarkedScope_Foo") nullMarkedFoo: NullabilityScopes.NullMarkedScope.Foo<String>
  ) {
   NullabilityScopes.NullMarkedScope.Foo<String>(nullMarkedFoo)
  }

  @ObjCName("testNonNullMarkedWildcardConstructorRaw")
  open fun testNonNullMarkedWildcardConstructorRaw(
   @ObjCName("withJ2ktNullabilityScopes_NonNullMarkedScope_Foo") nonNullMarkedFoo: NullabilityScopes.NonNullMarkedScope.Foo<String>
  ) {
   NullabilityScopes.NonNullMarkedScope.Foo<Any?>(nonNullMarkedFoo as NullabilityScopes.NonNullMarkedScope.Foo<Any?>?)
  }

  @ObjCName("testNonNullMarkedWildcardConstructorImplicitTypeArguemnts")
  open fun testNonNullMarkedWildcardConstructorImplicitTypeArguemnts(
   @ObjCName("withJ2ktNullabilityScopes_NonNullMarkedScope_Foo") nonNullMarkedFoo: NullabilityScopes.NonNullMarkedScope.Foo<String>
  ) {
   NullabilityScopes.NonNullMarkedScope.Foo<String?>(nonNullMarkedFoo)
  }

  @ObjCName("testNonNullMarkedWildcardConstructorExplicitTypeArguments")
  open fun testNonNullMarkedWildcardConstructorExplicitTypeArguments(
   @ObjCName("withJ2ktNullabilityScopes_NonNullMarkedScope_Foo") nonNullMarkedFoo: NullabilityScopes.NonNullMarkedScope.Foo<String>
  ) {
   NullabilityScopes.NonNullMarkedScope.Foo<String?>(nonNullMarkedFoo)
  }

  @ObjCName("J2ktJ2ktNullabilityScopes_NullMarkedScope_Foo", exact = true)
  open class Foo<K> {
   constructor()

   constructor(
    @ObjCName("J2ktNullabilityScopes_NullMarkedScope_Foo") foo: NullabilityScopes.NullMarkedScope.Foo<out K>
   )
  }

  @ObjCName("J2ktJ2ktNullabilityScopes_NullMarkedScope_Array", exact = true)
  interface Array<T> {}

  @ObjCName("J2ktJ2ktNullabilityScopes_NullMarkedScope_Cell", exact = true)
  interface Cell<T: NullabilityScopes.NullMarkedScope.Cell<T>> {}

  @ObjCName("J2ktJ2ktNullabilityScopes_NullMarkedScope_Table", exact = true)
  fun interface Table<T: NullabilityScopes.NullMarkedScope.Cell<T>> {
   @ObjCName("getNullableCells")
   fun getNullableCells(): NullabilityScopes.NullMarkedScope.Array<T?>
  }
 }

 @ObjCName("J2ktJ2ktNullabilityScopes_NonNullMarkedScope", exact = true)
 open class NonNullMarkedScope {
  @ObjCName("testNullMarkedWildcardConstructorRaw")
  open fun testNullMarkedWildcardConstructorRaw(
   @ObjCName("withJ2ktNullabilityScopes_NullMarkedScope_Foo") nullMarkedFoo: NullabilityScopes.NullMarkedScope.Foo<String?>?
  ) {
   NullabilityScopes.NullMarkedScope.Foo<Any?>(nullMarkedFoo!! as NullabilityScopes.NullMarkedScope.Foo<Any?>)
  }

  @ObjCName("testNullMarkedWildcardConstructorImplicitTypeArguments")
  open fun testNullMarkedWildcardConstructorImplicitTypeArguments(
   @ObjCName("withJ2ktNullabilityScopes_NullMarkedScope_Foo") nullMarkedFoo: NullabilityScopes.NullMarkedScope.Foo<String?>?
  ) {
   NullabilityScopes.NullMarkedScope.Foo<String>(nullMarkedFoo!! as NullabilityScopes.NullMarkedScope.Foo<String>)
  }

  @ObjCName("testNullMarkedWildcardConstructorExplicitTypeArguments")
  open fun testNullMarkedWildcardConstructorExplicitTypeArguments(
   @ObjCName("withJ2ktNullabilityScopes_NullMarkedScope_Foo") nullMarkedFoo: NullabilityScopes.NullMarkedScope.Foo<String?>?
  ) {
   NullabilityScopes.NullMarkedScope.Foo<String>(nullMarkedFoo!! as NullabilityScopes.NullMarkedScope.Foo<String>)
  }

  @ObjCName("testNonNullMarkedWildcardConstructorRaw")
  open fun testNonNullMarkedWildcardConstructorRaw(
   @ObjCName("withJ2ktNullabilityScopes_NonNullMarkedScope_Foo") nonNullMarkedFoo: NullabilityScopes.NonNullMarkedScope.Foo<String?>?
  ) {
   NullabilityScopes.NonNullMarkedScope.Foo<Any?>(nonNullMarkedFoo as NullabilityScopes.NonNullMarkedScope.Foo<Any?>?)
  }

  @ObjCName("testNonNullMarkedWildcardConstructorImplicitTypeArguments")
  open fun testNonNullMarkedWildcardConstructorImplicitTypeArguments(
   @ObjCName("withJ2ktNullabilityScopes_NonNullMarkedScope_Foo") nonNullMarkedFoo: NullabilityScopes.NonNullMarkedScope.Foo<String?>?
  ) {
   NullabilityScopes.NonNullMarkedScope.Foo<String?>(nonNullMarkedFoo)
  }

  @ObjCName("testNonNullMarkedWildcardConstructorExplicitTypeArguments")
  open fun testNonNullMarkedWildcardConstructorExplicitTypeArguments(
   @ObjCName("withJ2ktNullabilityScopes_NonNullMarkedScope_Foo") nonNullMarkedFoo: NullabilityScopes.NonNullMarkedScope.Foo<String?>?
  ) {
   NullabilityScopes.NonNullMarkedScope.Foo<String?>(nonNullMarkedFoo)
  }

  @ObjCName("testRecursiveWildcardConversion")
  open fun testRecursiveWildcardConversion(
   @ObjCName("withJ2ktNullabilityScopes_NullMarkedScope_Table") table: NullabilityScopes.NullMarkedScope.Table<out NullabilityScopes.NullMarkedScope.Cell<*>>?
  ): NullabilityScopes.NullMarkedScope.Array<out NullabilityScopes.NullMarkedScope.Cell<*>?>? {
   return table!!.getNullableCells() as NullabilityScopes.NullMarkedScope.Array<NullabilityScopes.NullMarkedScope.Cell<*>?>?
  }

  @ObjCName("J2ktJ2ktNullabilityScopes_NonNullMarkedScope_Foo", exact = true)
  open class Foo<K> {
   constructor()

   constructor(
    @ObjCName("J2ktNullabilityScopes_NonNullMarkedScope_Foo") foo: NullabilityScopes.NonNullMarkedScope.Foo<out K>?
   )
  }
 }
}
