goog.module('bridgejsmethod.Main.D$impl');

const A = goog.require('bridgejsmethod.Main.A$impl');
const I = goog.require('bridgejsmethod.Main.I$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let Integer = goog.forwardDeclare('java.lang.Integer$impl');
let $Casts = goog.forwardDeclare('vmbootstrap.Casts$impl');

/**
 * @extends {A<Integer>}
 * @implements {I<Integer>}
 */
class D extends A {
 /** @protected @nodts */
 constructor() {
  super();
 }
 /** @nodts @return {!D} */
 static $create__() {
  D.$clinit();
  let $instance = new D();
  $instance.$ctor__bridgejsmethod_Main_D__void();
  return $instance;
 }
 /** @nodts */
 $ctor__bridgejsmethod_Main_D__void() {
  this.$ctor__bridgejsmethod_Main_A__void();
 }
 /** @nodts @return {Integer} */
 m_fun__java_lang_Integer__java_lang_Integer(/** Integer */ i) {
  return i;
 }
 //Bridge method.
 /** @override @return {Integer} */
 mNumber(/** Integer */ arg0) {
  return this.m_fun__java_lang_Integer__java_lang_Integer(/**@type {Integer}*/ ($Casts.$to(arg0, Integer)));
 }
 //Bridge method.
 /** @final @override @return {Integer} */
 fun(/** Integer */ arg0) {
  return this.m_fun__java_lang_Integer__java_lang_Integer(/**@type {Integer}*/ ($Casts.$to(arg0, Integer)));
 }
 /** @nodts */
 static $clinit() {
  D.$clinit = () =>{};
  D.$loadModules();
  A.$clinit();
 }
 /** @nodts @return {boolean} */
 static $isInstance(/** ? */ instance) {
  return instance instanceof D;
 }
 
 /** @nodts */
 static $loadModules() {
  Integer = goog.module.get('java.lang.Integer$impl');
  $Casts = goog.module.get('vmbootstrap.Casts$impl');
 }
}
I.$markImplementor(D);
$Util.$setClassMetadata(D, 'bridgejsmethod.Main$D');

exports = D;

//# sourceMappingURL=Main$D.js.map
