// Generated from "lambdas/Lambdas.java"
@file:OptIn(ExperimentalObjCName::class, ExperimentalObjCRefinement::class)
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "REPEATED_BOUND",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER")

package lambdas

import javaemul.lang.*
import java.lang.RuntimeException
import java.lang.Void
import javaemul.lang.JavaIterable
import kotlin.Any
import kotlin.Double
import kotlin.Enum
import kotlin.Error
import kotlin.Int
import kotlin.Long
import kotlin.Number
import kotlin.OptIn
import kotlin.String
import kotlin.Suppress
import kotlin.Throwable
import kotlin.collections.MutableIterable
import kotlin.experimental.ExperimentalObjCName
import kotlin.experimental.ExperimentalObjCRefinement
import kotlin.jvm.JvmField
import kotlin.jvm.JvmStatic
import kotlin.let
import kotlin.native.HiddenFromObjC
import kotlin.native.ObjCName

@ObjCName("J2ktLambdasLambdas", exact = true)
open class Lambdas {
 @JvmField
 @ObjCName("field_")
 var field: Int = 100

 @ObjCName("call")
 open fun call(
  @ObjCName("withLambdasLambdas_FunctionalInterface") intf: Lambdas.FunctionalInterface?,
  @ObjCName("withInt") n: Int
 ): Int {
  return this.field + intf!!.m(n)
 }

 @ObjCName("testLambdaExpressionStyle")
 open fun testLambdaExpressionStyle() {
  this.call(Lambdas.FunctionalInterface { i: Int ->
   return@FunctionalInterface i + 1
  }, 10)
 }

 @ObjCName("testLambdaBlockStyle")
 open fun testLambdaBlockStyle() {
  this.call(Lambdas.FunctionalInterface { i: Int ->
   return@FunctionalInterface i + 2
  }, 10)
 }

 @ObjCName("testLambdaCaptureField")
 open fun testLambdaCaptureField() {
  this.call(Lambdas.FunctionalInterface { i: Int ->
   return@FunctionalInterface this.field + i + 1
  }, 10)
 }

 @ObjCName("testLambdaCaptureLocal")
 open fun testLambdaCaptureLocal() {
  val x: Int = 1
  this.call(Lambdas.FunctionalInterface { i: Int ->
   return@FunctionalInterface x + i + 1
  }, 10)
 }

 @ObjCName("testLambdaCaptureFieldAndLocal")
 open fun testLambdaCaptureFieldAndLocal() {
  val x: Int = 1
  this.call(Lambdas.FunctionalInterface { i: Int ->
   val y: Int = 1
   return@FunctionalInterface x + y + this.field + i + 1
  }, 10)
 }

 @ObjCName("funOuter")
 open fun funOuter() {}

 @ObjCName("testLambdaCallOuterFunction")
 open fun testLambdaCallOuterFunction() {
  this.call(Lambdas.FunctionalInterface { i: Int ->
   this.funOuter()
   this.funOuter()
   this@Lambdas.funOuter()
   return@FunctionalInterface i + 2
  }, 10)
 }

 @ObjCName("testNestedLambdas")
 open fun testNestedLambdas() {
  this.call(Lambdas.FunctionalInterface { i: Int ->
   return@FunctionalInterface this.call(Lambdas.FunctionalInterface { j: Int ->
    return@FunctionalInterface j
   }, 20)
  }, 10)
 }

 @ObjCName("testReturnLabelNameConflictKotlin")
 open fun testReturnLabelNameConflictKotlin() {
  this.call(Lambdas.FunctionalInterface { i: Int ->
   return@FunctionalInterface i
  }, 10)
 }

 @ObjCName("testInstanceMethodTypeVariableThroughLambda")
 open fun <T> testInstanceMethodTypeVariableThroughLambda() {
  val wrapped: Lambdas.Functional<T>? = Lambdas.Functional<T> { f: Lambdas.Functional<T>? ->
   return@Functional object : Lambdas.Functional<T> {
    override fun wrap(f: Lambdas.Functional<T>?): Lambdas.Functional<T>? {
     return null
    }
   }
  }
 }

 @ObjCName("callWithTypeVariable")
 open fun <T> callWithTypeVariable(
  @ObjCName("withLambdasLambdas_GenericFunctionalInterface") intf: Lambdas.GenericFunctionalInterface<T>?,
  @ObjCName("withId") e: T
 ): T {
  return intf!!.m(e)
 }

 @ObjCName("callParameterized")
 open fun callParameterized(
  @ObjCName("withLambdasLambdas_GenericFunctionalInterface") intf: Lambdas.GenericFunctionalInterface<Error?>?,
  @ObjCName("withJavaLangError") e: Error?
 ): Error? {
  return intf!!.m(e)
 }

 @HiddenFromObjC
 open fun <T> callWithBiFunction_pp_lambdas(fn: Lambdas.BiFunction<T, String?, Double?>?): Lambdas.GenericFunctionalInterface<T>? {
  return null
 }

 @ObjCName("testLambdaWithGenerics")
 open fun <T: Enum<T>> testLambdaWithGenerics() {
  this.callWithTypeVariable<Error?>(Lambdas.GenericFunctionalInterface<Error?> { i: Error? ->
   return@GenericFunctionalInterface i
  }, java.lang.Error())
  this.callParameterized(Lambdas.GenericFunctionalInterface<Error?> { i_1: Error? ->
   return@GenericFunctionalInterface i_1
  }, java.lang.Error())
  Lambdas.callTypeVariableWithBounds<T>(Lambdas.GenericFunctionalInterface<Enum<T>?> { i_2: Enum<T>? ->
   return@GenericFunctionalInterface i_2
  }, null as Enum<T>?)
  this.callWithBiFunction_pp_lambdas<Any?>(Lambdas.BiFunction<Any?, String?, Double?> { x: Any?, y: String? ->
   throw RuntimeException()
  })
  this.callWithBiFunction_pp_lambdas<Any?>(Lambdas.BiFunction<Any?, String?, Double?> { x_1: Any?, y_1: String? ->
   return@BiFunction Double.valueOf(3.0)
  })
  val f: Lambdas.Function<in T, *>? = Lambdas.Function { item: T ->
   return@Function Long.valueOf(1L)
  }
 }

 @ObjCName("testLambdaReturningVoidAsExpression")
 open fun testLambdaReturningVoidAsExpression() {
  val runner: Lambdas.FunctionalInterfaceWithMethodReturningVoid? = Lambdas.FunctionalInterfaceWithMethodReturningVoid {
   Any()
  }
 }

 @ObjCName("testAnonymousInsideLambda")
 open fun testAnonymousInsideLambda() {
  val runner: Lambdas.FunctionalInterfaceWithMethodReturningVoid? = Lambdas.FunctionalInterfaceWithMethodReturningVoid {
   object : Any() {}
  }
 }

 @ObjCName("testDefaultMethodsInIntersectionAdaptor")
 open fun testDefaultMethodsInIntersectionAdaptor() {
  val o: Any? = (Lambdas.BiFunction<String?, String?, String?> { t: String?, u: String? ->
   return@BiFunction null
  }).let { it as Lambdas.BiFunction<String?, String?, String?>?; it as Lambdas.MarkerWithDefaultMethod?; it }
 }

 @ObjCName("J2ktLambdasLambdasCompanion", exact = true)
 companion object {
  @JvmStatic
  @ObjCName("testLambdaInStaticContext")
  fun testLambdaInStaticContext() {
   val f: Lambdas.FunctionalInterface? = Lambdas.FunctionalInterface { i: Int ->
    return@FunctionalInterface i
   }
  }

  @JvmStatic
  @ObjCName("testStaticMethodTypeVariableThroughLambda")
  fun <T> testStaticMethodTypeVariableThroughLambda() {
   val wrapped: Lambdas.Functional<T>? = Lambdas.Functional<T> { f: Lambdas.Functional<T>? ->
    return@Functional object : Lambdas.Functional<T> {
     override fun wrap(f: Lambdas.Functional<T>?): Lambdas.Functional<T>? {
      return null
     }
    }
   }
  }

  @JvmStatic
  @ObjCName("callTypeVariableWithBounds")
  fun <T: Enum<T>> callTypeVariableWithBounds(
   @ObjCName("withLambdasLambdas_GenericFunctionalInterface") intf: Lambdas.GenericFunctionalInterface<Enum<T>?>?,
   @ObjCName("withJavaLangEnum") e: Enum<T>?
  ): Enum<T>? {
   return intf!!.m(e)
  }

  @JvmStatic
  @ObjCName("m")
  fun m(): Any? {
   return null
  }

  @JvmStatic
  @ObjCName("testLambdaCallingStaticMethod")
  fun testLambdaCallingStaticMethod() {
   val f: Lambdas.Function<Any?, *>? = Lambdas.Function { l: Any? ->
    return@Function Lambdas.m()
   }
  }

  @JvmField
  @HiddenFromObjC
  var identityFunction_private_2: Lambdas.IdentityFunction? = null

  @JvmStatic
  @ObjCName("identity")
  fun <E> identity(): Lambdas.GenericJsFunction<E, E>? {
   if (Lambdas.identityFunction_private_2 == null) {
    Lambdas.identityFunction_private_2 = Lambdas.IdentityFunction()
   }
   return Lambdas.identityFunction_private_2 as Lambdas.GenericJsFunction<E, E>?
  }

  @JvmStatic
  @ObjCName("testJsInteropLambdas")
  fun testJsInteropLambdas() {
   val thenable: Lambdas.Thenable<String?>? = Lambdas.Thenable<String?> { f1: Lambdas.GenericJsFunction<Void?, String?>?, f2: Lambdas.GenericJsFunction<Void?, Throwable?>? ->
    f1!!.apply(null)
   }
   val otherThenable: Lambdas.AnotherThenable<String?>? = Lambdas.AnotherThenable<String?> { f1_1: Lambdas.GenericJsFunction<Void?, String?>?, f2_1: Lambdas.GenericJsFunction<Void?, Throwable?>? ->
    f1_1!!.apply(null)
   }
   val stringJsSupplier: Lambdas.JsSupplier<Int?>? = Lambdas.JsSupplier<Int?> {
    return@JsSupplier Int.valueOf(1)
   }
   stringJsSupplier!!.get()
   val equals: Lambdas.Equals<Any?>? = stringJsSupplier as Lambdas.Equals<Any?>?
   equals!!.equals(null)
   equals!!.get()
  }

  @JvmStatic
  @ObjCName("testIntersectionTyping")
  fun <U, V> testIntersectionTyping() {
   var o: Any? = (Lambdas.GenericFunctionalInterface<String?> { x: String? ->
    return@GenericFunctionalInterface x
   }).let { it as Lambdas.GenericFunctionalInterface<String?>?; it as Lambdas.JustADefaultT<Number?>?; it }
   o = (Lambdas.GenericFunctionalInterface<String?> { x_1: String? ->
    return@GenericFunctionalInterface x_1
   }).let { it as Lambdas.GenericFunctionalInterface<String?>?; it as Lambdas.JustADefaultS<Number?>?; it }
   o = (Lambdas.GenericFunctionalInterface<U> { x_2: U ->
    return@GenericFunctionalInterface x_2
   }).let { it as Lambdas.GenericFunctionalInterface<U>?; it as Lambdas.JustADefaultS<V>?; it }
  }

  @JvmStatic
  @ObjCName("testIterable")
  fun <T> testIterable(
   @ObjCName("withJavaLangIterable") iterable: MutableIterable<T>?
  ) {
   val lambda: MutableIterable<T>? = JavaIterable<T> {
    return@JavaIterable iterable!!.iterator()
   }
  }
 }

 fun interface FunctionalInterface {
  @ObjCName("m")
  fun m(
   @ObjCName("withInt") i: Int
  ): Int
 }

 fun interface Functional<T> {
  @ObjCName("wrap")
  fun wrap(
   @ObjCName("withLambdasLambdas_Functional") f: Lambdas.Functional<T>?
  ): Lambdas.Functional<T>?
 }

 fun interface GenericFunctionalInterface<T> {
  @ObjCName("m")
  fun m(
   @ObjCName("withId") i: T
  ): T
 }

 fun interface BiFunction<T, U, R> {
  @ObjCName("apply")
  fun apply(
   @ObjCName("withId") t: T,
   @ObjCName("withId") u: U
  ): R

  @ObjCName("andThen")
  fun <V> andThen(
   @ObjCName("withLambdasLambdas_Function") after: Lambdas.Function<in R, out V>?
  ): Lambdas.BiFunction<T, U, V>? {
   return Lambdas.BiFunction<T, U, V> { t: T, u: U ->
    return@BiFunction (after as Lambdas.Function<in R, V>?)!!.apply(this.apply(t, u))
   }
  }
 }

 fun interface Function<T, R> {
  @ObjCName("apply")
  fun apply(
   @ObjCName("withId") t: T
  ): R

  companion object {
   @JvmStatic
   @ObjCName("identity")
   fun <T> identity(): Lambdas.Function<T, T>? {
    return Lambdas.Function<T, T> { t: T ->
     return@Function t
    }
   }
  }
 }

 fun interface FunctionalInterfaceWithMethodReturningVoid {
  @ObjCName("run")
  fun run()
 }

 open class Parent {
  @JvmField
  var fieldInParent: Int = 0

  @ObjCName("funInParent")
  open fun funInParent() {}
 }

 open class LambdaInSubClass: Lambdas.Parent() {
  @ObjCName("testLambdaInSubclass")
  open fun testLambdaInSubclass() {
   val l: Lambdas.FunctionalInterface? = Lambdas.FunctionalInterface { i: Int ->
    this.funInParent()
    this.funInParent()
    this@LambdaInSubClass.funInParent()
    var a: Int = this.fieldInParent
    a = this.fieldInParent
    a = this@LambdaInSubClass.fieldInParent
    return@FunctionalInterface a
   }
  }
 }

 @ObjCName("J2ktLambdasLambdas_GenericJsFunction", exact = true)
 fun interface GenericJsFunction<R, T> {
  @ObjCName("apply")
  fun apply(
   @ObjCName("withId") t: T
  ): R
 }

 @ObjCName("J2ktLambdasLambdas_Thenable", exact = true)
 fun interface Thenable<T> {
  @ObjCName("then")
  fun then(
   @ObjCName("withLambdasLambdas_GenericJsFunction") f1: Lambdas.GenericJsFunction<Void?, T>?,
   @ObjCName("withLambdasLambdas_GenericJsFunction") f2: Lambdas.GenericJsFunction<Void?, Throwable?>?
  )
 }

 @ObjCName("J2ktLambdasLambdas_AnotherThenable", exact = true)
 fun interface AnotherThenable<T> {
  @ObjCName("then")
  fun then(
   @ObjCName("withLambdasLambdas_GenericJsFunction") f1: Lambdas.GenericJsFunction<Void?, T>?,
   @ObjCName("withLambdasLambdas_GenericJsFunction") f2: Lambdas.GenericJsFunction<Void?, Throwable?>?
  )
 }

 class IdentityFunction: Lambdas.GenericJsFunction<Any?, Any?> {
  override fun apply(o: Any?): Any? {
   return o
  }
 }

 interface Equals<T> {
  @ObjCName("get")
  fun get(): T {
   return null as T
  }
 }

 fun interface JsSupplier<T: Number?>: Lambdas.Equals<T> {
  override fun get(): T
 }

 interface JustADefaultT<T> {
  @ObjCName("method")
  fun method(
   @ObjCName("withId") t: T
  ) {}
 }

 interface JustADefaultS<S> {
  @ObjCName("method")
  fun method(
   @ObjCName("withId") t: S
  ) {}
 }

 interface MarkerWithDefaultMethod {
  @ObjCName("defaultMethod")
  fun defaultMethod() {}
 }

 fun interface Runnable {
  @ObjCName("run")
  fun run()
 }

 open inner class Outer {
  @HiddenFromObjC
  open fun m_pp_lambdas() {}

  @HiddenFromObjC
  open fun n_pp_lambdas() {
   val r: Lambdas.Runnable? = Lambdas.Runnable {
    this.m_pp_lambdas()
   }
  }
 }

 open inner class Super {
  @HiddenFromObjC
  open fun m_pp_lambdas() {}
 }

 open inner class Sub: Lambdas.Super() {
  @HiddenFromObjC
  open fun n_pp_lambdas() {
   val r: Lambdas.Runnable? = object : Lambdas.Runnable {
    override fun run() {
     super<Lambdas.Super>@Sub.m_pp_lambdas()
    }
   }
  }
 }

 open inner class SubWithLambda: Lambdas.Super() {
  @HiddenFromObjC
  open fun n_pp_lambdas() {
   val r: Lambdas.Runnable? = Lambdas.Runnable {
    super<Lambdas.Super>.m_pp_lambdas()
   }
  }
 }
}
