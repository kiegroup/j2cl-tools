goog.module('typewildcards.TypeWildCards.X$impl');

const $Util = goog.require('nativebootstrap.Util$impl');

let $LambdaAdaptor = goog.forwardDeclare('typewildcards.TypeWildCards.X.$LambdaAdaptor$impl');

/**
 * @interface
 */
class X {
 /** @abstract @nodts */
 m_m__void() {}
 /** @nodts @return {X} */
 static $adapt(/** ?function():void */ fn) {
  X.$clinit();
  return new $LambdaAdaptor(fn);
 }
 /** @nodts */
 static $clinit() {
  X.$clinit = () =>{};
  X.$loadModules();
 }
 
 static $markImplementor(/** Function */ ctor) {
  ctor.prototype.$implements__typewildcards_TypeWildCards_X = true;
 }
 /** @nodts @return {boolean} */
 static $isInstance(/** ? */ instance) {
  return instance != null && !!instance.$implements__typewildcards_TypeWildCards_X;
 }
 
 /** @nodts */
 static $loadModules() {
  $LambdaAdaptor = goog.module.get('typewildcards.TypeWildCards.X.$LambdaAdaptor$impl');
 }
}
X.$markImplementor(/**@type {Function}*/ (X));
$Util.$setClassMetadataForInterface(X, 'typewildcards.TypeWildCards$X');

exports = X;

//# sourceMappingURL=TypeWildCards$X.js.map
