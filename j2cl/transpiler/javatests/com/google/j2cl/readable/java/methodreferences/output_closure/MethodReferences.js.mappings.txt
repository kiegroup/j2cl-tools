[MethodReferences] => [MethodReferences]
[MethodReferences] => [constructor]
[MethodReferences] => [super();] "methodreferences.MethodReferences.<synthetic: ctor_js>"
[MethodReferences] => [$create__]
[MethodReferences] => [MethodReferences.$clinit();] "methodreferences.MethodReferences.<synthetic: ctor_create>"
[MethodReferences] => [let $instance = new MethodReferences();] "methodreferences.MethodReferences.<synthetic: ctor_create>"
[MethodReferences] => [$instance.$ctor__methodreferences_MethodReferences__void();] "methodreferences.MethodReferences.<synthetic: ctor_create>"
[MethodReferences] => [return $instance;] "methodreferences.MethodReferences.<synthetic: ctor_create>"
[MethodReferences] => [$ctor__methodreferences_MethodReferences__void]
[MethodReferences] => [this.$ctor__java_lang_Object__void();] "methodreferences.MethodReferences.<init>"
[m] => [m_m__java_lang_Object]
[{
    return new Object();
  }] => [MethodReferences.$clinit();] "methodreferences.MethodReferences.m"
[return new Object();] => [return j_l_Object.$create__();] "methodreferences.MethodReferences.m"
[isA] => [m_isA__java_lang_Boolean]
[return true;] => [return true;] "methodreferences.MethodReferences.isA"
[self] => [m_self__java_lang_Object_$pp_methodreferences]
[return this;] => [return this;] "methodreferences.MethodReferences.self"
[sameAs] => [m_sameAs__java_lang_Number__java_lang_Boolean_$pp_methodreferences]
[n] => [n] "n"
[return false;] => [return false;] "methodreferences.MethodReferences.sameAs"
[main] => [m_main__void_$pp_methodreferences]
[{
    Producer<Object> objectFactory = Object::new;
...    JsFunctionInterface<Number, Boolean> jsFunctionWithParameters = this::sameAs;
  }] => [let /** !MethodReferences<T> */ $$q, /** !MethodReferences<*> */ $$q_1, /** !MethodReferences<*> */ $$q_2;] "methodreferences.MethodReferences.main"
[Producer<Object> objectFactory = Object::new;] => [let objectFactory = Producer.$adapt(() =>{
   return j_l_Object.$create__();
  });] "methodreferences.MethodReferences.main"
[objectFactory] => [objectFactory] "objectFactory"
[Object::new] => [return j_l_Object.$create__();] "methodreferences.MethodReferences.<lambda in main>"
[objectFactory = MethodReferences::m;] => [objectFactory = Producer.$adapt(() =>{
   return MethodReferences.m_m__java_lang_Object();
  });] "methodreferences.MethodReferences.main"
[MethodReferences::m] => [return MethodReferences.m_m__java_lang_Object();] "methodreferences.MethodReferences.<lambda in main>"
[objectFactory = new MethodReferences<T>()::isA;] => [objectFactory = ($$q = /**@type {!MethodReferences<T>}*/ (MethodReferences.$create__()), Producer.$adapt(() =>{
   return $$q.m_isA__java_lang_Boolean();
  }));] "methodreferences.MethodReferences.main"
[new MethodReferences<T>()::isA] => [return $$q.m_isA__java_lang_Boolean();] "methodreferences.MethodReferences.<lambda in main>"
[BiFunction<MethodReferences<T>, Number, Boolean> biFunction = MethodReferences::sameAs;] => [let biFunction = BiFunction.$adapt((arg0, arg1) =>{
   let arg0_1 = /**@type {MethodReferences}*/ ($Casts.$to(arg0, MethodReferences));
...   return arg0_1.m_sameAs__java_lang_Number__java_lang_Boolean_$pp_methodreferences(arg1_1);
  });] "methodreferences.MethodReferences.main"
[biFunction] => [biFunction] "biFunction"
[MethodReferences::sameAs] => [let arg0_1 = /**@type {MethodReferences}*/ ($Casts.$to(arg0, MethodReferences));] "methodreferences.MethodReferences.<lambda in main>"
[MethodReferences::sameAs] => [let arg1_1 = /**@type {(Number|number)}*/ ($Casts.$to(arg1, Number));] "methodreferences.MethodReferences.<lambda in main>"
[MethodReferences::sameAs] => [return arg0_1.m_sameAs__java_lang_Number__java_lang_Boolean_$pp_methodreferences(arg1_1);] "methodreferences.MethodReferences.<lambda in main>"
[Function<Number, Boolean> functionWithParameters = this::sameAs;] => [let functionWithParameters = MethodReferences_Function.$adapt((arg0_2) =>{
   let arg0_3 = /**@type {(Number|number)}*/ ($Casts.$to(arg0_2, Number));
   return this.m_sameAs__java_lang_Number__java_lang_Boolean_$pp_methodreferences(arg0_3);
  });] "methodreferences.MethodReferences.main"
[functionWithParameters] => [functionWithParameters] "functionWithParameters"
[this::sameAs] => [let arg0_3 = /**@type {(Number|number)}*/ ($Casts.$to(arg0_2, Number));] "methodreferences.MethodReferences.<lambda in main>"
[this::sameAs] => [return this.m_sameAs__java_lang_Number__java_lang_Boolean_$pp_methodreferences(arg0_3);] "methodreferences.MethodReferences.<lambda in main>"
[Predicate<MethodReferences<T>> objectPredicate = MethodReferences::isA;] => [let objectPredicate = Predicate.$adapt((arg0_4) =>{
   let arg0_5 = /**@type {MethodReferences}*/ ($Casts.$to(arg0_4, MethodReferences));
   return Boolean.m_booleanValue__java_lang_Boolean__boolean(arg0_5.m_isA__java_lang_Boolean());
  });] "methodreferences.MethodReferences.main"
[objectPredicate] => [objectPredicate] "objectPredicate"
[MethodReferences::isA] => [let arg0_5 = /**@type {MethodReferences}*/ ($Casts.$to(arg0_4, MethodReferences));] "methodreferences.MethodReferences.<lambda in main>"
[MethodReferences::isA] => [return Boolean.m_booleanValue__java_lang_Boolean__boolean(arg0_5.m_isA__java_lang_Boolean());] "methodreferences.MethodReferences.<lambda in main>"
[Producer<ObjectCapturingOuter> objectCapturingOuterProducer = ObjectCapturingOuter::new;] => [let objectCapturingOuterProducer = Producer.$adapt(() =>{
   return /**@type {!ObjectCapturingOuter<T>}*/ (ObjectCapturingOuter.$create__methodreferences_MethodReferences(this));
  });] "methodreferences.MethodReferences.main"
[objectCapturingOuterProducer] => [objectCapturingOuterProducer] "objectCapturingOuterProducer"
[ObjectCapturingOuter::new] => [return /**@type {!ObjectCapturingOuter<T>}*/ (ObjectCapturingOuter.$create__methodreferences_MethodReferences(this));] "methodreferences.MethodReferences.<lambda in main>"
[ArrayProducer<Object> arrayProducer = Double[]::new;] => [let arrayProducer = ArrayProducer.$adapt((/** number */ arg0_6) =>{
   return /**@type {!Array<?number>}*/ ($Arrays.$create([arg0_6], Double));
  });] "methodreferences.MethodReferences.main"
[arrayProducer] => [arrayProducer] "arrayProducer"
[Double[]::new] => [return /**@type {!Array<?number>}*/ ($Arrays.$create([arg0_6], Double));] "methodreferences.MethodReferences.<lambda in main>"
[objectFactory = new MethodReferences<>()::self;] => [objectFactory = ($$q_1 = /**@type {!MethodReferences<*>}*/ (MethodReferences.$create__()), Producer.$adapt(() =>{
   return $$q_1.m_self__java_lang_Object_$pp_methodreferences();
  }));] "methodreferences.MethodReferences.main"
[new MethodReferences<>()::self] => [return $$q_1.m_self__java_lang_Object_$pp_methodreferences();] "methodreferences.MethodReferences.<lambda in main>"
[Function<MethodReferences<T>, Object> function = MethodReferences::self;] => [let function_1 = MethodReferences_Function.$adapt((arg0_7) =>{
   let arg0_8 = /**@type {MethodReferences}*/ ($Casts.$to(arg0_7, MethodReferences));
   return arg0_8.m_self__java_lang_Object_$pp_methodreferences();
  });] "methodreferences.MethodReferences.main"
[function] => [function_1] "function"
[MethodReferences::self] => [let arg0_8 = /**@type {MethodReferences}*/ ($Casts.$to(arg0_7, MethodReferences));] "methodreferences.MethodReferences.<lambda in main>"
[MethodReferences::self] => [return arg0_8.m_self__java_lang_Object_$pp_methodreferences();] "methodreferences.MethodReferences.<lambda in main>"
[Function<Integer, Object[]> arrayFactory = Object[]::new;] => [let arrayFactory = MethodReferences_Function.$adapt((arg0_9) =>{
   let arg0_10 = /**@type {Integer}*/ ($Casts.$to(arg0_9, Integer));
   return new Array(arg0_10.m_intValue__int());
  });] "methodreferences.MethodReferences.main"
[arrayFactory] => [arrayFactory] "arrayFactory"
[Object[]::new] => [let arg0_10 = /**@type {Integer}*/ ($Casts.$to(arg0_9, Integer));] "methodreferences.MethodReferences.<lambda in main>"
[Object[]::new] => [return new Array(arg0_10.m_intValue__int());] "methodreferences.MethodReferences.<lambda in main>"
[Producer<String> superToStringProducer = super::toString;] => [let superToStringProducer = Producer.$adapt(() =>{
   return j_l_Object.prototype.toString.call(this);
  });] "methodreferences.MethodReferences.main"
[superToStringProducer] => [superToStringProducer] "superToStringProducer"
[super::toString] => [return j_l_Object.prototype.toString.call(this);] "methodreferences.MethodReferences.<lambda in main>"
[JsProducer<Object> jsobjectFactory = Object::new;] => [let jsobjectFactory = () =>{
   return j_l_Object.$create__();
  };] "methodreferences.MethodReferences.main"
[jsobjectFactory] => [jsobjectFactory] "jsobjectFactory"
[Object::new] => [return j_l_Object.$create__();] "methodreferences.MethodReferences.<lambda in main>"
[jsobjectFactory = MethodReferences::m;] => [jsobjectFactory = () =>{
   return MethodReferences.m_m__java_lang_Object();
  };] "methodreferences.MethodReferences.main"
[MethodReferences::m] => [return MethodReferences.m_m__java_lang_Object();] "methodreferences.MethodReferences.<lambda in main>"
[jsobjectFactory = new MethodReferences<>()::self;] => [jsobjectFactory = ($$q_2 = /**@type {!MethodReferences<*>}*/ (MethodReferences.$create__()), () =>{
   return $$q_2.m_self__java_lang_Object_$pp_methodreferences();
  });] "methodreferences.MethodReferences.main"
[new MethodReferences<>()::self] => [return $$q_2.m_self__java_lang_Object_$pp_methodreferences();] "methodreferences.MethodReferences.<lambda in main>"
[JsFunctionInterface<MethodReferences<T>, Object> jsfunction = MethodReferences::self;] => [let jsfunction = (arg0_11) =>{
   let arg0_12 = /**@type {MethodReferences}*/ ($Casts.$to(arg0_11, MethodReferences));
   return arg0_12.m_self__java_lang_Object_$pp_methodreferences();
  };] "methodreferences.MethodReferences.main"
[jsfunction] => [jsfunction] "jsfunction"
[MethodReferences::self] => [let arg0_12 = /**@type {MethodReferences}*/ ($Casts.$to(arg0_11, MethodReferences));] "methodreferences.MethodReferences.<lambda in main>"
[MethodReferences::self] => [return arg0_12.m_self__java_lang_Object_$pp_methodreferences();] "methodreferences.MethodReferences.<lambda in main>"
[JsFunctionInterface<Integer, Object[]> jsarrayFactory = Object[]::new;] => [let jsarrayFactory = (arg0_13) =>{
   let arg0_14 = /**@type {Integer}*/ ($Casts.$to(arg0_13, Integer));
   return new Array(arg0_14.m_intValue__int());
  };] "methodreferences.MethodReferences.main"
[jsarrayFactory] => [jsarrayFactory] "jsarrayFactory"
[Object[]::new] => [let arg0_14 = /**@type {Integer}*/ ($Casts.$to(arg0_13, Integer));] "methodreferences.MethodReferences.<lambda in main>"
[Object[]::new] => [return new Array(arg0_14.m_intValue__int());] "methodreferences.MethodReferences.<lambda in main>"
[JsProducer<String> jsSuperToStringProducer = super::toString;] => [let jsSuperToStringProducer = () =>{
   return j_l_Object.prototype.toString.call(this);
  };] "methodreferences.MethodReferences.main"
[jsSuperToStringProducer] => [jsSuperToStringProducer] "jsSuperToStringProducer"
[super::toString] => [return j_l_Object.prototype.toString.call(this);] "methodreferences.MethodReferences.<lambda in main>"
[JsBiFunction<MethodReferences<T>, Number, Boolean> jsbiFunction = MethodReferences::sameAs;] => [let jsbiFunction = (arg0_15, arg1_2) =>{
   let arg0_16 = /**@type {MethodReferences}*/ ($Casts.$to(arg0_15, MethodReferences));
...   return arg0_16.m_sameAs__java_lang_Number__java_lang_Boolean_$pp_methodreferences(arg1_3);
  };] "methodreferences.MethodReferences.main"
[jsbiFunction] => [jsbiFunction] "jsbiFunction"
[MethodReferences::sameAs] => [let arg0_16 = /**@type {MethodReferences}*/ ($Casts.$to(arg0_15, MethodReferences));] "methodreferences.MethodReferences.<lambda in main>"
[MethodReferences::sameAs] => [let arg1_3 = /**@type {(Number|number)}*/ ($Casts.$to(arg1_2, Number));] "methodreferences.MethodReferences.<lambda in main>"
[MethodReferences::sameAs] => [return arg0_16.m_sameAs__java_lang_Number__java_lang_Boolean_$pp_methodreferences(arg1_3);] "methodreferences.MethodReferences.<lambda in main>"
[JsFunctionInterface<Number, Boolean> jsFunctionWithParameters = this::sameAs;] => [let jsFunctionWithParameters = (arg0_17) =>{
   let arg0_18 = /**@type {(Number|number)}*/ ($Casts.$to(arg0_17, Number));
   return this.m_sameAs__java_lang_Number__java_lang_Boolean_$pp_methodreferences(arg0_18);
  };] "methodreferences.MethodReferences.main"
[jsFunctionWithParameters] => [jsFunctionWithParameters] "jsFunctionWithParameters"
[this::sameAs] => [let arg0_18 = /**@type {(Number|number)}*/ ($Casts.$to(arg0_17, Number));] "methodreferences.MethodReferences.<lambda in main>"
[this::sameAs] => [return this.m_sameAs__java_lang_Number__java_lang_Boolean_$pp_methodreferences(arg0_18);] "methodreferences.MethodReferences.<lambda in main>"
[static Producer<String> staticStringProducer = m()::toString;] => [get f_staticStringProducer__methodreferences_MethodReferences]
[static Producer<String> staticStringProducer = m()::toString;] => [return (MethodReferences.$clinit(), MethodReferences.$static_staticStringProducer__methodreferences_MethodReferences);] "methodreferences.MethodReferences.<synthetic: getter>"
[static Producer<String> staticStringProducer = m()::toString;] => [set f_staticStringProducer__methodreferences_MethodReferences]
[static Producer<String> staticStringProducer = m()::toString;] => [(MethodReferences.$clinit(), MethodReferences.$static_staticStringProducer__methodreferences_MethodReferences = value);] "methodreferences.MethodReferences.<synthetic: setter>"
[MethodReferences] => [$clinit]
[MethodReferences] => [let /** * */ $$q;] "methodreferences.MethodReferences.<clinit>"
[MethodReferences] => [MethodReferences.$clinit = () =>{};] "methodreferences.MethodReferences.<clinit>"
[MethodReferences] => [MethodReferences.$loadModules();] "methodreferences.MethodReferences.<clinit>"
[MethodReferences] => [j_l_Object.$clinit();] "methodreferences.MethodReferences.<clinit>"
[static Producer<String> staticStringProducer = m()::toString;] => [MethodReferences.$static_staticStringProducer__methodreferences_MethodReferences = ($$q = MethodReferences.m_m__java_lang_Object(), Producer.$adapt(() =>{
   return $Objects.m_toString__java_lang_Object__java_lang_String($$q);
  }));] "methodreferences.MethodReferences.<clinit>"
[m()::toString] => [return $Objects.m_toString__java_lang_Object__java_lang_String($$q);] "methodreferences.MethodReferences.<lambda in <clinit>>"
[MethodReferences] => [/**@private {Producer<?string>} @nodts*/
MethodReferences.$static_staticStringProducer__methodreferences_MethodReferences;]
