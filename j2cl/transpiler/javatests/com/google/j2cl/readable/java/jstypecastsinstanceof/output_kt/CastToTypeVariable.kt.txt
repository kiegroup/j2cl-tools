// Generated from "jstypecastsinstanceof/CastToTypeVariable.java"
@file:OptIn(ExperimentalObjCName::class)
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "REPEATED_BOUND",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_ANONYMOUS_PARAMETER",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER")

package jstypecastsinstanceof

import javaemul.lang.*
import jsinterop.annotations.JsOverlay
import jsinterop.annotations.JsPackage
import jsinterop.annotations.JsType
import kotlin.Any
import kotlin.Array
import kotlin.Boolean
import kotlin.Int
import kotlin.OptIn
import kotlin.Suppress
import kotlin.experimental.ExperimentalObjCName
import kotlin.native.ObjCName

@ObjCName("J2ktJstypecastsinstanceofCastToTypeVariable", exact = true)
@JsType(name = "Object", namespace = JsPackage.GLOBAL, isNative = true)
open class CastToTypeVariable<T: CastToTypeVariable<T>?> {
 @ObjCName("setField")
 @JsOverlay
 fun setField(
  @ObjCName("withInt") index: Int,
  @ObjCName("withBoolean") value: Boolean
 ): T {
  val o: Any? = Any()
  val a: Array<T>? = o as Array<T>?
  return this as (T & Any)
 }
}
