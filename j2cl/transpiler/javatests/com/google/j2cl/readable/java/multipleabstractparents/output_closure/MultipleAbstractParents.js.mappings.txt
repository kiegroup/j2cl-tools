[MultipleAbstractParents] => [MultipleAbstractParents]
[MultipleAbstractParents] => [constructor]
[MultipleAbstractParents] => [super();] "multipleabstractparents.MultipleAbstractParents.<synthetic: ctor_js>"
[MultipleAbstractParents] => [$create__]
[MultipleAbstractParents] => [MultipleAbstractParents.$clinit();] "multipleabstractparents.MultipleAbstractParents.<synthetic: ctor_create>"
[MultipleAbstractParents] => [let $instance = new MultipleAbstractParents();] "multipleabstractparents.MultipleAbstractParents.<synthetic: ctor_create>"
[MultipleAbstractParents] => [$instance.$ctor__multipleabstractparents_MultipleAbstractParents__void();] "multipleabstractparents.MultipleAbstractParents.<synthetic: ctor_create>"
[MultipleAbstractParents] => [return $instance;] "multipleabstractparents.MultipleAbstractParents.<synthetic: ctor_create>"
[MultipleAbstractParents] => [$ctor__multipleabstractparents_MultipleAbstractParents__void]
[MultipleAbstractParents] => [this.$ctor__java_lang_Object__void();] "multipleabstractparents.MultipleAbstractParents.<init>"
[main] => [m_main__arrayOf_java_lang_String__void]
[args] => [args] "args"
[{
    assert new ArrayList<String>().getFoo(null).equals("AbstractCollection");
...    assert ((IStringList) new StringList()).getFoo(null).equals("AbstractCollection");
  }] => [MultipleAbstractParents.$clinit();] "multipleabstractparents.MultipleAbstractParents.main"
[assert new ArrayList<String>().getFoo(null).equals("AbstractCollection");] => [$Asserts.$assert(j_l_String.m_equals__java_lang_String__java_lang_Object__boolean(/**@type {!ArrayList<?string>}*/ (ArrayList.$create__()).m_getFoo__java_lang_Object__java_lang_String(null), 'AbstractCollection'));] "multipleabstractparents.MultipleAbstractParents.main"
[assert new StringList().getFoo(null).equals("AbstractCollection");] => [$Asserts.$assert(j_l_String.m_equals__java_lang_String__java_lang_Object__boolean(StringList.$create__().m_getFoo__java_lang_Object__java_lang_String(null), 'AbstractCollection'));] "multipleabstractparents.MultipleAbstractParents.main"
[assert ((IStringList) new StringList()).getFoo(null).equals("AbstractCollection");] => [$Asserts.$assert(j_l_String.m_equals__java_lang_String__java_lang_Object__boolean(/**@type {!IStringList}*/ (StringList.$create__()).m_getFoo__java_lang_String__java_lang_String(null), 'AbstractCollection'));] "multipleabstractparents.MultipleAbstractParents.main"
[MultipleAbstractParents] => [$clinit]
[MultipleAbstractParents] => [MultipleAbstractParents.$clinit = () =>{};] "multipleabstractparents.MultipleAbstractParents.<clinit>"
[MultipleAbstractParents] => [MultipleAbstractParents.$loadModules();] "multipleabstractparents.MultipleAbstractParents.<clinit>"
[MultipleAbstractParents] => [j_l_Object.$clinit();] "multipleabstractparents.MultipleAbstractParents.<clinit>"
