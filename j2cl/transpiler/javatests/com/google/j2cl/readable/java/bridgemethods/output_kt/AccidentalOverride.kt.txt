// Generated from "bridgemethods/AccidentalOverride.java"
@file:OptIn(ExperimentalObjCName::class)
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_ANONYMOUS_PARAMETER",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER",
 "REDUNDANT_ELSE_IN_WHEN")

package bridgemethods

import javaemul.lang.*
import kotlin.Int
import kotlin.Number
import kotlin.OptIn
import kotlin.String
import kotlin.Suppress
import kotlin.experimental.ExperimentalObjCName
import kotlin.native.ObjCName

@ObjCName("J2ktBridgemethodsI", exact = true)
fun interface I<T, S> {
 @ObjCName("fun")
 fun `fun`(
  @ObjCName("withId") s: S
 ): T
}

@ObjCName("J2ktBridgemethodsA", exact = true)
open class A<T, S> internal constructor() {
 @ObjCName("fun")
 open fun `fun`(
  @ObjCName("withId") s: S
 ): T {
  return null as T
 }

 @ObjCName("get")
 open fun get(): T {
  return null as T
 }
}

@ObjCName("J2ktBridgemethodsB", exact = true)
open class B internal constructor(): A<Number?, String?>(), I<Int?, String?> {
 override fun `fun`(s: String?): Int? {
  return Int(1)
 }
}

@ObjCName("J2ktBridgemethodsSpecializedInterface", exact = true)
interface SpecializedInterface {
 @ObjCName("fun")
 fun `fun`(
  @ObjCName("withNSString") s: String?
 ): String?

 @ObjCName("get")
 fun get(): String?
}

@ObjCName("J2ktBridgemethodsAccidentalOverride", exact = true)
open class AccidentalOverride internal constructor(): A<String?, String?>(), SpecializedInterface {}
