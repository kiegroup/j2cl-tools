// Generated from "packageprivatemethods/package1/SuperParent.java"
@file:OptIn(ExperimentalObjCName::class, ExperimentalObjCRefinement::class)
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "REPEATED_BOUND",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER")

package packageprivatemethods.package1

import javaemul.lang.*
import kotlin.Int
import kotlin.OptIn
import kotlin.Suppress
import kotlin.experimental.ExperimentalObjCName
import kotlin.experimental.ExperimentalObjCRefinement
import kotlin.native.HiddenFromObjC
import kotlin.native.ObjCName

@ObjCName("J2ktPackageprivatemethodsPackage1SuperParent", exact = true)
open class SuperParent {
 @HiddenFromObjC
 open fun overrideInParentExposedInChild_pp_packageprivatemethods_package1(a: Int): Int {
  return a - 1
 }

 @HiddenFromObjC
 open fun exposedInChild_pp_packageprivatemethods_package1(a: Int, b: Int): Int {
  return a + b
 }

 @HiddenFromObjC
 open fun exposedInChildWithInterface_pp_packageprivatemethods_package1(a: Int, b: Int): Int {
  return a + b
 }

 @HiddenFromObjC
 open fun exposedAbstractInParent_pp_packageprivatemethods_package1(a: Int, b: Int, c: Int): Int {
  return a + b + c
 }
}
