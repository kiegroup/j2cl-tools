// Generated from "jsfunction/JsFunctionOptimization.java"
@file:OptIn(ExperimentalObjCName::class)
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "REPEATED_BOUND",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_ANONYMOUS_PARAMETER",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER")

package jsfunction

import javaemul.lang.*
import jsinterop.annotations.JsFunction
import kotlin.Any
import kotlin.Int
import kotlin.OptIn
import kotlin.String
import kotlin.Suppress
import kotlin.experimental.ExperimentalObjCName
import kotlin.native.ObjCName

@ObjCName("J2ktJsfunctionJsFunctionOptimization", exact = true)
open class JsFunctionOptimization {
 @ObjCName("main")
 open fun main(
  @ObjCName("withInt") r: Int
 ) {
  object : Any() {
   internal fun m_pp_jsfunction() {
    val x: String? = ""
    object : Any() {
     internal fun m_pp_jsfunction() {
      val `var`: Int = 1
      val f: JsFunctionOptimization.F? = object : JsFunctionOptimization.F {
       override fun m(s: String?): String? {
        val r1: Int = r
        val var1: Int = `var`
        val x1: String? = x
        return java.lang.String.valueOf(r) + s + x + `var` + object : JsFunctionOptimization.F {
         override fun m(s: String?): String? {
          return "" + s + r1 + x1 + var1
         }
        }.m("hello")
       }
      }
      val f2: JsFunctionOptimization.F? = object : JsFunctionOptimization.F {
       override fun m(s: String?): String? {
        val r1: Int = r
        val var1: Int = `var`
        val x1: String? = x
        return java.lang.String.valueOf(r) + s + x + `var` + object : Any() {
         fun sayHey(): String? {
          return "Hey"
         }
        }.sayHey()
       }
      }
     }
    }
   }
  }
 }

 @JsFunction
 fun interface F {
  @ObjCName("m")
  fun m(
   @ObjCName("withNSString") s: String?
  ): String?
 }
}
