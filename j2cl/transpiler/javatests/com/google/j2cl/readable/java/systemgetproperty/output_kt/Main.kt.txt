// Generated from "systemgetproperty/Main.java"
@file:OptIn(ExperimentalObjCName::class)
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_ANONYMOUS_PARAMETER",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER",
 "REDUNDANT_ELSE_IN_WHEN")

package systemgetproperty

import javaemul.lang.*
import java.lang.System
import kotlin.Array
import kotlin.Boolean
import kotlin.OptIn
import kotlin.String
import kotlin.Suppress
import kotlin.experimental.ExperimentalObjCName
import kotlin.jvm.JvmStatic
import kotlin.native.ObjCName

@ObjCName("J2ktSystemgetpropertyMain", exact = true)
open class Main {
 @ObjCName("J2ktSystemgetpropertyMainCompanion", exact = true)
 companion object {
  private val property: String? = System.getProperty("jre.classMetadata")

  private val propertyWithDefault: String? = System.getProperty("jre.classMetadata", "default")

  @JvmStatic
  @ObjCName("main")
  fun main(
   @ObjCName("withNSStringArray") args: Array<String?>?
  ) {
   var x: Boolean = false
   x = Main.property === "SIMPLE"
   x = Main.property!!.equals("SIMPLE")
   x = Main.property!!.equalsIgnoreCase("SIMPLE")
   x = Main.property === "NOTSIMPLE"
   x = Main.propertyWithDefault!!.equals("SIMPLE")
   x = System.getProperty("jre.bar", "bar")!!.equals("bar")
   x = System.getProperty("jre.classMetadata", Main.mightHaveSideEffects())!!.equals("SIMPLE")
   x = System.getProperty("unset.property", Main.mightHaveSideEffects())!!.equals("foo")
  }

  @JvmStatic
  private fun mightHaveSideEffects(): String? {
   return "Foo"
  }
 }
}
