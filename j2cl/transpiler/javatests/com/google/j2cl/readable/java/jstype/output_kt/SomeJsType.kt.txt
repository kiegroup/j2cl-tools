// Generated from "jstype/SomeJsType.java"
@file:OptIn(ExperimentalObjCName::class, ExperimentalObjCRefinement::class)
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "REPEATED_BOUND",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER")

package jstype

import javaemul.lang.*
import kotlin.Any
import kotlin.Double
import kotlin.Int
import kotlin.OptIn
import kotlin.Suppress
import kotlin.experimental.ExperimentalObjCName
import kotlin.experimental.ExperimentalObjCRefinement
import kotlin.jvm.JvmField
import kotlin.native.HiddenFromObjC
import kotlin.native.ObjCName

@ObjCName("J2ktJstypeSomeJsType", exact = true)
open class SomeJsType<T> {
 @JvmField
 @ObjCName("publicField_")
 var publicField: Int = 0

 @JvmField
 @HiddenFromObjC
 var privateField_private_2: Int = 0

 @JvmField
 @HiddenFromObjC
 var packageField_pp_jstype: Int = 0

 @JvmField
 @ObjCName("protectedField_")
 var protectedField: Int = 0

 @ObjCName("publicMethod")
 open fun publicMethod() {}

 @HiddenFromObjC
 fun privateMethod_private_2() {}

 @HiddenFromObjC
 open fun packageMethod_pp_jstype() {}

 @ObjCName("protectedMethod")
 open fun protectedMethod() {}

 @ObjCName("useFieldsAndMethods")
 open fun useFieldsAndMethods() {
  val value: Int = this.publicField + this.privateField_private_2 + this.packageField_pp_jstype + this.protectedField
  this.publicMethod()
  this.privateMethod_private_2()
  this.packageMethod_pp_jstype()
  this.protectedMethod()
 }

 @HiddenFromObjC
 fun testStarAndWildCard_private_2(s: SomeJsType.Star?, w: SomeJsType.Wildcard?): SomeJsType.Wildcard? {
  val `object`: Any? = Any()
  val star: SomeJsType.Star? = Double.valueOf(3.0) as SomeJsType.Star
  return star as SomeJsType.Wildcard?
 }

 interface Star {}

 interface Wildcard {}
}
