// Generated from "bridgemethods/EnumMap.java"
@file:OptIn(ExperimentalObjCName::class)
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_ANONYMOUS_PARAMETER",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER",
 "REDUNDANT_ELSE_IN_WHEN")

package bridgemethods

import javaemul.lang.*
import kotlin.Enum
import kotlin.OptIn
import kotlin.Suppress
import kotlin.experimental.ExperimentalObjCName
import kotlin.native.ObjCName

@ObjCName("J2ktBridgemethodsMap", exact = true)
fun interface Map<K, V> {
 @ObjCName("put")
 fun put(
  @ObjCName("withId") key: K,
  @ObjCName("withId") value: V
 ): V
}

@ObjCName("J2ktBridgemethodsAbstractMap", exact = true)
open class AbstractMap<K, V> internal constructor(): Map<K, V> {
 override fun put(key: K, value: V): V {
  return value
 }
}

@ObjCName("J2ktBridgemethodsEnumMap", exact = true)
open class EnumMap<K: Enum<K>, V>: AbstractMap<K, V>() {
 override fun put(key: K, value: V): V {
  return value
 }
}
