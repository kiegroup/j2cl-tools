// Generated by J2KT from "j2kt/NotNullAssertionProblems.java"

#import <Foundation/NSObjCRuntime.h>

@class J2ktJ2ktNotNullAssertionProblems;
@class J2ktJ2ktNotNullAssertionProblemsCompanion;
@class J2ktJ2ktNotNullAssertionProblems_Consumer;
@class J2ktJ2ktNotNullAssertionProblems_GenericConsumer;
@class J2ktJ2ktNotNullAssertionProblems_UpperWildcardConsumer;
@class J2ktJ2ktNotNullAssertionProblems_VarargConsumer;
@class NSString;

@protocol J2ktJ2ktNotNullAssertionProblems_Supplier;

NS_ASSUME_NONNULL_BEGIN

@compatibility_alias J2ktNotNullAssertionProblems J2ktJ2ktNotNullAssertionProblems;

@compatibility_alias J2ktNotNullAssertionProblemsCompanion J2ktJ2ktNotNullAssertionProblemsCompanion;

NS_INLINE void J2ktNotNullAssertionProblems_testImplicitInvocationTypeArguments_wildcardsWithNSString_withJ2ktNotNullAssertionProblems_Supplier_(NSString* string, id<J2ktJ2ktNotNullAssertionProblems_Supplier> wildcardSupplier) {
 [J2ktJ2ktNotNullAssertionProblemsCompanion.shared testImplicitInvocationTypeArguments_wildcardsWithNSString:string withJ2ktNotNullAssertionProblems_Supplier:wildcardSupplier];
}

NS_INLINE void J2ktNotNullAssertionProblems_testImplicitConstructorTypeArguments_wildcardsWithNSString_withJ2ktNotNullAssertionProblems_Supplier_(NSString* string, id<J2ktJ2ktNotNullAssertionProblems_Supplier> wildcardSupplier) {
 [J2ktJ2ktNotNullAssertionProblemsCompanion.shared testImplicitConstructorTypeArguments_wildcardsWithNSString:string withJ2ktNotNullAssertionProblems_Supplier:wildcardSupplier];
}

NS_INLINE void J2ktNotNullAssertionProblems_testRawConstructorTypeArguments_wildcardsWithNSString_withJ2ktNotNullAssertionProblems_Supplier_(NSString* string, id<J2ktJ2ktNotNullAssertionProblems_Supplier> wildcardSupplier) {
 [J2ktJ2ktNotNullAssertionProblemsCompanion.shared testRawConstructorTypeArguments_wildcardsWithNSString:string withJ2ktNotNullAssertionProblems_Supplier:wildcardSupplier];
}

NS_INLINE void J2ktNotNullAssertionProblems_testImplicitConstructorTypeArguments_inferenceWithNSString_(NSString* string) {
 [J2ktJ2ktNotNullAssertionProblemsCompanion.shared testImplicitConstructorTypeArguments_inferenceWithNSString:string];
}

NS_INLINE void J2ktNotNullAssertionProblems_accept1WithId_(id t) {
 [J2ktJ2ktNotNullAssertionProblemsCompanion.shared accept1WithId:t];
}

NS_INLINE void J2ktNotNullAssertionProblems_accept2WithId_withId_(id t1, id t2) {
 [J2ktJ2ktNotNullAssertionProblemsCompanion.shared accept2WithId:t1 withId:t2];
}

NS_INLINE void J2ktNotNullAssertionProblems_acceptUpperBoundWithJ2ktNotNullAssertionProblems_Supplier_withId_(id<J2ktJ2ktNotNullAssertionProblems_Supplier> t1, id t2) {
 [J2ktJ2ktNotNullAssertionProblemsCompanion.shared acceptUpperBoundWithJ2ktNotNullAssertionProblems_Supplier:t1 withId:t2];
}

NS_INLINE void J2ktNotNullAssertionProblems_acceptGenericWithJ2ktNotNullAssertionProblems_Supplier_withId_(id<J2ktJ2ktNotNullAssertionProblems_Supplier> t1, id t2) {
 [J2ktJ2ktNotNullAssertionProblemsCompanion.shared acceptGenericWithJ2ktNotNullAssertionProblems_Supplier:t1 withId:t2];
}

@compatibility_alias J2ktNotNullAssertionProblems_Consumer J2ktJ2ktNotNullAssertionProblems_Consumer;

NS_INLINE J2ktJ2ktNotNullAssertionProblems_Consumer* create_J2ktNotNullAssertionProblems_Consumer_initWithId_(id t) {
 return [[J2ktJ2ktNotNullAssertionProblems_Consumer alloc] initWithId:t];
}

NS_INLINE J2ktJ2ktNotNullAssertionProblems_Consumer* new_J2ktNotNullAssertionProblems_Consumer_initWithId_(id t) {
 return [[J2ktJ2ktNotNullAssertionProblems_Consumer alloc] initWithId:t];
}

NS_INLINE J2ktJ2ktNotNullAssertionProblems_Consumer* create_J2ktNotNullAssertionProblems_Consumer_initWithId_withId_(id t1, id t2) {
 return [[J2ktJ2ktNotNullAssertionProblems_Consumer alloc] initWithId:t1 withId:t2];
}

NS_INLINE J2ktJ2ktNotNullAssertionProblems_Consumer* new_J2ktNotNullAssertionProblems_Consumer_initWithId_withId_(id t1, id t2) {
 return [[J2ktJ2ktNotNullAssertionProblems_Consumer alloc] initWithId:t1 withId:t2];
}

@compatibility_alias J2ktNotNullAssertionProblems_VarargConsumer J2ktJ2ktNotNullAssertionProblems_VarargConsumer;

@compatibility_alias J2ktNotNullAssertionProblems_GenericConsumer J2ktJ2ktNotNullAssertionProblems_GenericConsumer;

NS_INLINE J2ktJ2ktNotNullAssertionProblems_GenericConsumer* create_J2ktNotNullAssertionProblems_GenericConsumer_initWithJ2ktNotNullAssertionProblems_Supplier_withId_(id<J2ktJ2ktNotNullAssertionProblems_Supplier> supplier, id t) {
 return [[J2ktJ2ktNotNullAssertionProblems_GenericConsumer alloc] initWithJ2ktNotNullAssertionProblems_Supplier:supplier withId:t];
}

NS_INLINE J2ktJ2ktNotNullAssertionProblems_GenericConsumer* new_J2ktNotNullAssertionProblems_GenericConsumer_initWithJ2ktNotNullAssertionProblems_Supplier_withId_(id<J2ktJ2ktNotNullAssertionProblems_Supplier> supplier, id t) {
 return [[J2ktJ2ktNotNullAssertionProblems_GenericConsumer alloc] initWithJ2ktNotNullAssertionProblems_Supplier:supplier withId:t];
}

@compatibility_alias J2ktNotNullAssertionProblems_UpperWildcardConsumer J2ktJ2ktNotNullAssertionProblems_UpperWildcardConsumer;

NS_INLINE J2ktJ2ktNotNullAssertionProblems_UpperWildcardConsumer* create_J2ktNotNullAssertionProblems_UpperWildcardConsumer_initWithJ2ktNotNullAssertionProblems_Supplier_withId_(id<J2ktJ2ktNotNullAssertionProblems_Supplier> supplier, id t) {
 return [[J2ktJ2ktNotNullAssertionProblems_UpperWildcardConsumer alloc] initWithJ2ktNotNullAssertionProblems_Supplier:supplier withId:t];
}

NS_INLINE J2ktJ2ktNotNullAssertionProblems_UpperWildcardConsumer* new_J2ktNotNullAssertionProblems_UpperWildcardConsumer_initWithJ2ktNotNullAssertionProblems_Supplier_withId_(id<J2ktJ2ktNotNullAssertionProblems_Supplier> supplier, id t) {
 return [[J2ktJ2ktNotNullAssertionProblems_UpperWildcardConsumer alloc] initWithJ2ktNotNullAssertionProblems_Supplier:supplier withId:t];
}

#define J2ktNotNullAssertionProblems_Supplier J2ktJ2ktNotNullAssertionProblems_Supplier

NS_ASSUME_NONNULL_END
