// Generated from "j2kt/AccidentalOverride.java"
@file:OptIn(ExperimentalObjCName::class)
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "REPEATED_BOUND",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_ANONYMOUS_PARAMETER",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER")

package j2kt

import javaemul.lang.*
import kotlin.OptIn
import kotlin.Suppress
import kotlin.experimental.ExperimentalObjCName
import kotlin.native.ObjCName

@ObjCName("J2ktJ2ktAccidentalOverride", exact = true)
open class AccidentalOverride {
 abstract inner class SuperClass internal constructor() {
  @ObjCName("accidentalOverride")
  open fun accidentalOverride() {}
 }

 interface Interface {
  @ObjCName("accidentalOverride")
  fun accidentalOverride() {}

  @ObjCName("abstractAccidentalOverride")
  fun abstractAccidentalOverride() {}
 }

 open inner class TestImplicitOverride internal constructor(): AccidentalOverride.SuperClass(), AccidentalOverride.Interface {
  override fun accidentalOverride() {
   super<AccidentalOverride.SuperClass>.accidentalOverride()
  }
 }

 open inner class TestExplicitOverride internal constructor(): AccidentalOverride.SuperClass(), AccidentalOverride.Interface {
  override fun accidentalOverride() {
   super<AccidentalOverride.SuperClass>.accidentalOverride()
  }
 }

 abstract inner class SubClass internal constructor(): AccidentalOverride.SuperClass() {
  @ObjCName("abstractAccidentalOverride")
  abstract fun abstractAccidentalOverride()
 }

 abstract inner class TestImplicitOverrideInAbstractClass internal constructor(): AccidentalOverride.SubClass(), AccidentalOverride.Interface {
  abstract override fun abstractAccidentalOverride()

  override fun accidentalOverride() {
   super<AccidentalOverride.SubClass>.accidentalOverride()
  }
 }

 abstract inner class TestExplicitOverrideInAbstractClass internal constructor(): AccidentalOverride.SubClass(), AccidentalOverride.Interface {
  override fun accidentalOverride() {
   super<AccidentalOverride.SubClass>.accidentalOverride()
  }

  abstract override fun abstractAccidentalOverride()
 }
}
