// Generated from "importglobaljstypes/Number.java"
@file:OptIn(ExperimentalObjCName::class)
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_ANONYMOUS_PARAMETER",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER",
 "REDUNDANT_ELSE_IN_WHEN")

package importglobaljstypes

import javaemul.lang.*
import jsinterop.annotations.JsMethod
import jsinterop.annotations.JsPackage
import jsinterop.annotations.JsProperty
import jsinterop.annotations.JsType
import kotlin.Boolean
import kotlin.Double
import kotlin.Int
import kotlin.OptIn
import kotlin.String
import kotlin.Suppress
import kotlin.experimental.ExperimentalObjCName
import kotlin.jvm.JvmStatic
import kotlin.native.ObjCName

@ObjCName("J2ktImportglobaljstypesNumber", exact = true)
open class Number {
 @ObjCName("testJsDocForLiteralType")
 open fun testJsDocForLiteralType(
  @ObjCName("withImportglobaljstypesNumber_MyLiteralType") a: Number.MyLiteralType?
 ): Number.MyLiteralType? {
  return a
 }

 @ObjCName("J2ktImportglobaljstypesNumberCompanion", exact = true)
 companion object {
  @JvmStatic
  @ObjCName("f")
  @JsMethod(name = "Number.isInteger", namespace = JsPackage.GLOBAL)
  external fun f(
   @ObjCName("withDouble") x: Double
  ): Boolean

  @JvmStatic
  @ObjCName("test")
  fun test(
   @ObjCName("withDouble") x: Double
  ): Boolean {
   return Number.f(x)
  }

  @JvmStatic
  @JsMethod(name = "Array", namespace = JsPackage.GLOBAL)
  private external fun <T> createArray(): Number.NativeArray<T>?

  @JvmStatic
  private fun getStringAt(index: Int): String? {
   return Number.createArray<String?>()!!.at(index)
  }

  @JvmStatic
  private fun getArrayLength(array: Number.NativeArray<*>?): Int {
   return array!!.getLength()
  }
 }

 @ObjCName("J2ktImportglobaljstypesNumber_NativeArray", exact = true)
 @JsType(name = "Array", namespace = JsPackage.GLOBAL, isNative = true)
 interface NativeArray<T> {
  @ObjCName("getLength")
  @JsProperty
  fun getLength(): Int

  @ObjCName("at")
  fun at(
   @ObjCName("withInt") index: Int
  ): T
 }

 @ObjCName("J2ktImportglobaljstypesNumber_MyLiteralType", exact = true)
 @JsType(name = "Object", namespace = JsPackage.GLOBAL, isNative = true)
 interface MyLiteralType {}
}
