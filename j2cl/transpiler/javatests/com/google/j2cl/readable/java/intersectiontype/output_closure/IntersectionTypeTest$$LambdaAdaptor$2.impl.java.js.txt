goog.module('intersectiontype.IntersectionTypeTest.$LambdaAdaptor$2$impl');

const Cmp2 = goog.require('intersectiontype.Cmp2$impl');
const Serial = goog.require('intersectiontype.Serial$impl');
const j_l_Object = goog.require('java.lang.Object$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

/**
 * @template T
 * @implements {Cmp2<T>}
 * @implements {Serial}
 */
class $LambdaAdaptor$2 extends j_l_Object {
 /** @nodts */
 constructor(/** ?function(number):number */ fn) {
  $LambdaAdaptor$2.$clinit();
  super();
  /**@type {?function(number):number} @nodts*/
  this.f_fn__intersectiontype_IntersectionTypeTest_$LambdaAdaptor$2;
  this.$ctor__intersectiontype_IntersectionTypeTest_$LambdaAdaptor$2__intersectiontype_Cmp2_$JsFunction__void(fn);
 }
 /** @nodts */
 $ctor__intersectiontype_IntersectionTypeTest_$LambdaAdaptor$2__intersectiontype_Cmp2_$JsFunction__void(/** ?function(number):number */ fn) {
  this.$ctor__java_lang_Object__void();
  this.f_fn__intersectiontype_IntersectionTypeTest_$LambdaAdaptor$2 = fn;
 }
 /** @override @nodts @return {number} */
 m_cmp__int__int(/** number */ arg0) {
  let /** ?function(number):number */ $function;
  return ($function = this.f_fn__intersectiontype_IntersectionTypeTest_$LambdaAdaptor$2, $function(arg0));
 }
 /** @nodts */
 static $clinit() {
  $LambdaAdaptor$2.$clinit = () =>{};
  $LambdaAdaptor$2.$loadModules();
  j_l_Object.$clinit();
 }
 /** @nodts @return {boolean} */
 static $isInstance(/** ? */ instance) {
  return instance instanceof $LambdaAdaptor$2;
 }
 
 /** @nodts */
 static $loadModules() {}
}
Cmp2.$markImplementor($LambdaAdaptor$2);
Serial.$markImplementor($LambdaAdaptor$2);
$Util.$setClassMetadata($LambdaAdaptor$2, 'intersectiontype.IntersectionTypeTest$$LambdaAdaptor$2');

exports = $LambdaAdaptor$2;

//# sourceMappingURL=IntersectionTypeTest$$LambdaAdaptor$2.js.map
