goog.module('packageprivatemethods.package1.Parent$impl');

const $Util = goog.require('nativebootstrap.Util$impl');
const SuperParent = goog.require('packageprivatemethods.package1.SuperParent$impl');

/**
 * @abstract
 */
class Parent extends SuperParent {
 /** @protected @nodts */
 constructor() {
  super();
 }
 /** @nodts */
 $ctor__packageprivatemethods_package1_Parent__void() {
  this.$ctor__packageprivatemethods_package1_SuperParent__void();
 }
 /** @override @nodts @return {number} */
 m_overrideInParentExposedInChild__int__int_$pp_packageprivatemethods_package1(/** number */ a) {
  return a;
 }
 /** @abstract @nodts @return {number} */
 m_exposedAbstractInParent__int__int__int__int(/** number */ a, /** number */ b, /** number */ c) {}
 //Bridge method.
 /** @final @override @nodts @return {number} */
 m_exposedAbstractInParent__int__int__int__int_$pp_packageprivatemethods_package1(/** number */ arg0, /** number */ arg1, /** number */ arg2) {
  return this.m_exposedAbstractInParent__int__int__int__int(arg0, arg1, arg2);
 }
 /** @nodts */
 static $clinit() {
  Parent.$clinit = () =>{};
  Parent.$loadModules();
  SuperParent.$clinit();
 }
 /** @nodts @return {boolean} */
 static $isInstance(/** ? */ instance) {
  return instance instanceof Parent;
 }
 
 /** @nodts */
 static $loadModules() {}
}
$Util.$setClassMetadata(Parent, 'packageprivatemethods.package1.Parent');

exports = Parent;

//# sourceMappingURL=Parent.js.map
