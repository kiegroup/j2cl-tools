// Generated from "cloneable/Cloneables.java"
@file:OptIn(ExperimentalObjCName::class)
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "REPEATED_BOUND",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER")

package cloneable

import javaemul.lang.*
import kotlin.Any
import kotlin.Cloneable
import kotlin.OptIn
import kotlin.Suppress
import kotlin.experimental.ExperimentalObjCName
import kotlin.native.ObjCName

@ObjCName("J2ktCloneableCloneables", exact = true)
open class Cloneables {
 @ObjCName("J2ktCloneableCloneables_WithoutCloneable", exact = true)
 open class WithoutCloneable {
  @ObjCName("clone")
  open fun clone(): Any {
   return Cloneables.WithoutCloneable()
  }
 }

 @ObjCName("J2ktCloneableCloneables_WithCloneable", exact = true)
 open class WithCloneable: Cloneable {
  open override fun clone(): Any {
   return Cloneables.WithCloneable()
  }
 }

 @ObjCName("J2ktCloneableCloneables_WithoutCloneableChild", exact = true)
 class WithoutCloneableChild: Cloneables.WithoutCloneable() {
  override fun clone(): Any {
   return Cloneables.WithoutCloneableChild()
  }
 }

 @ObjCName("J2ktCloneableCloneables_WithCloneableChild", exact = true)
 class WithCloneableChild: Cloneables.WithCloneable() {
  override fun clone(): Any {
   return Cloneables.WithCloneableChild()
  }
 }
}
