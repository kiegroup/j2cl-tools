goog.module('bridgemethods.TestCase102.BI1$impl');

const $Util = goog.require('nativebootstrap.Util$impl');

let $LambdaAdaptor = goog.forwardDeclare('bridgemethods.TestCase102.BI1.$LambdaAdaptor$impl');

/**
 * @interface
 */
class BI1 {
 /** @abstract @nodts */
 m_set__java_lang_String__void(/** ?string */ value) {}
 /** @nodts @return {BI1} */
 static $adapt(/** ?function(?string):void */ fn) {
  BI1.$clinit();
  return new $LambdaAdaptor(fn);
 }
 /** @nodts */
 static $clinit() {
  BI1.$clinit = () =>{};
  BI1.$loadModules();
 }
 
 static $markImplementor(/** Function */ ctor) {
  ctor.prototype.$implements__bridgemethods_TestCase102_BI1 = true;
 }
 /** @nodts @return {boolean} */
 static $isInstance(/** ? */ instance) {
  return instance != null && !!instance.$implements__bridgemethods_TestCase102_BI1;
 }
 
 /** @nodts */
 static $loadModules() {
  $LambdaAdaptor = goog.module.get('bridgemethods.TestCase102.BI1.$LambdaAdaptor$impl');
 }
}
BI1.$markImplementor(/**@type {Function}*/ (BI1));
$Util.$setClassMetadataForInterface(BI1, 'bridgemethods.TestCase102$BI1');

exports = BI1;

//# sourceMappingURL=TestCase102$BI1.js.map
