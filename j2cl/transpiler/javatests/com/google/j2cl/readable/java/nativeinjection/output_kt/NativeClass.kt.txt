// Generated from "nativeinjection/NativeClass.java"
@file:OptIn(ExperimentalObjCName::class)
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "REPEATED_BOUND",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_ANONYMOUS_PARAMETER",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER")

package nativeinjection

import javaemul.lang.*
import jsinterop.annotations.JsMethod
import kotlin.OptIn
import kotlin.String
import kotlin.Suppress
import kotlin.experimental.ExperimentalObjCName
import kotlin.jvm.JvmStatic
import kotlin.native.ObjCName

@ObjCName("J2ktNativeinjectionNativeClass", exact = true)
open class NativeClass {
 @ObjCName("nativeInstanceMethod")
 @JsMethod
 external open fun nativeInstanceMethod(): String?

 @ObjCName("J2ktNativeinjectionNativeClassCompanion", exact = true)
 companion object {
  @JvmStatic
  @ObjCName("nativeStaticMethod")
  @JsMethod
  external fun nativeStaticMethod(): NativeClass?

  @JvmStatic
  @JsMethod(name = "notPublicNativeStaticMethod")
  internal external fun notPublicNativeStaticMethod_pp_nativeinjection(): NativeClass?
 }

 @ObjCName("J2ktNativeinjectionNativeClass_InnerClass", exact = true)
 open class InnerClass {
  @ObjCName("nativeInstanceMethod")
  @JsMethod
  external open fun nativeInstanceMethod(): String?
 }
}
