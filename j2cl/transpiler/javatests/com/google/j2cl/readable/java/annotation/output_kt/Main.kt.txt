// Generated from "annotation/Main.java"
@file:OptIn(ExperimentalObjCName::class)
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_ANONYMOUS_PARAMETER",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER",
 "REDUNDANT_ELSE_IN_WHEN")

package annotation

import javaemul.lang.*
import kotlin.Annotation
import kotlin.Int
import kotlin.OptIn
import kotlin.Suppress
import kotlin.experimental.ExperimentalObjCName
import kotlin.native.ObjCName

@ObjCName("J2ktAnnotationMain", exact = true)
open class Main {
 @ObjCName("J2ktAnnotationMain_Foo", exact = true)
 interface Foo: Annotation {
  @ObjCName("bar")
  fun bar(): Int

  @ObjCName("J2ktAnnotationMain_FooCompanion", exact = true)
  companion object {
   @ObjCName("CONSTANT_")
   const val CONSTANT: Int = 123
  }
 }

 @ObjCName("J2ktAnnotationMain_Zoo", exact = true)
 interface Zoo: Annotation {}

 @ObjCName("J2ktAnnotationMain_Bar", exact = true)
 open inner class Bar internal constructor() {
  internal open fun baz_pp_annotation(): Int {
   val foo: Main.Foo? = null
   foo!!.bar()
   return Main.Foo.CONSTANT
  }
 }
}
