// Generated from "instanceinnerclass/InstanceInnerClass.java"
@file:OptIn(ExperimentalObjCName::class)
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "REPEATED_BOUND",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER")

package instanceinnerclass

import javaemul.lang.*
import kotlin.Int
import kotlin.OptIn
import kotlin.Suppress
import kotlin.experimental.ExperimentalObjCName
import kotlin.jvm.JvmField
import kotlin.native.ObjCName

@ObjCName("J2ktInstanceinnerclassInstanceInnerClass", exact = true)
open class InstanceInnerClass {
 @JvmField
 @ObjCName("instanceField_")
 var instanceField: Int = 0

 @ObjCName("funOuter")
 open fun funOuter() {}

 @ObjCName("test")
 open fun test() {
  InstanceInnerClass().InnerClass()
 }

 @ObjCName("J2ktInstanceinnerclassInstanceInnerClass_InnerClass", exact = true)
 open inner class InnerClass {
  @JvmField
  @ObjCName("field_")
  var field: Int = this@InstanceInnerClass.instanceField + this@InstanceInnerClass.instanceField

  @JvmField
  @ObjCName("enclosingInstance_")
  var enclosingInstance: InstanceInnerClass? = this@InstanceInnerClass

  @ObjCName("funInner")
  open fun funInner() {
   this@InstanceInnerClass.funOuter()
   this@InstanceInnerClass.funOuter()
  }
 }
}
