[ForStatement] => [ForStatement]
[ForStatement] => [constructor]
[ForStatement] => [super();] "forstatement.ForStatement.<synthetic: ctor_js>"
[ForStatement] => [$create__]
[ForStatement] => [ForStatement.$clinit();] "forstatement.ForStatement.<synthetic: ctor_create>"
[ForStatement] => [let $instance = new ForStatement();] "forstatement.ForStatement.<synthetic: ctor_create>"
[ForStatement] => [$instance.$ctor__forstatement_ForStatement__void();] "forstatement.ForStatement.<synthetic: ctor_create>"
[ForStatement] => [return $instance;] "forstatement.ForStatement.<synthetic: ctor_create>"
[ForStatement] => [$ctor__forstatement_ForStatement__void]
[ForStatement] => [this.$ctor__java_lang_Object__void();] "forstatement.ForStatement.<init>"
[test] => [m_test__void]
[for (int i = 0, count = 0; i < 100; i++) {
      count++;
    }] => [for (let i = 0, count = 0; i < 100; i = i + 1 | 0) {
   count = count + 1 | 0;
  }] "forstatement.ForStatement.test"
[i] => [i] "i"
[count] => [count] "count"
[count++;] => [count = count + 1 | 0;] "forstatement.ForStatement.test"
[for (long l = 0, count = 0; l < 100; l++, l++) {
      count++;
    }] => [for (let l = $Long.fromInt(0), count_1 = $Long.fromInt(0); $LongUtils.less(l, $Long.fromInt(100)); l = $LongUtils.plus(l, $Long.fromInt(1)), l = $LongUtils.plus(l, $Long.fromInt(1))) {
   count_1 = $LongUtils.plus(count_1, $Long.fromInt(1));
  }] "forstatement.ForStatement.test"
[l] => [l] "l"
[count] => [count_1] "count"
[count++;] => [count_1 = $LongUtils.plus(count_1, $Long.fromInt(1));] "forstatement.ForStatement.test"
[boolean a = false;] => [let a = false;] "forstatement.ForStatement.test"
[a] => [a] "a"
[for (; a |= true; ) {}] => [for (; a = !!(+ a | + true); ) {}] "forstatement.ForStatement.test"
[boolean b = false;] => [let b = false;] "forstatement.ForStatement.test"
[b] => [b] "b"
[for (; b = a; ) {}] => [for (; b = a; ) {}] "forstatement.ForStatement.test"
[for (returnsValue(); ; returnsValue()) {}] => [for (ForStatement.m_returnsValue__int(); true; ForStatement.m_returnsValue__int()) {}] "forstatement.ForStatement.test"
[testContinue] => [m_testContinue__void]
[LABEL:
    for (int i = 0, j = 0; i < 10; i++, j++) {
...      }
    }] => [LABEL: for (let i = 0, j = 0; i < 10; i = i + 1 | 0, j = j + 1 | 0) {
   if (i == 5) {
...   }
  }] "forstatement.ForStatement.testContinue"
[for (int i = 0, j = 0; i < 10; i++, j++) {
      if (i == 5) {
...      }
    }] => [for (let i = 0, j = 0; i < 10; i = i + 1 | 0, j = j + 1 | 0) {
   if (i == 5) {
...   }
  }] "forstatement.ForStatement.testContinue"
[i] => [i] "i"
[j] => [j] "j"
[if (i == 5) {
        continue;
      }] => [if (i == 5) {
    continue;
   }] "forstatement.ForStatement.testContinue"
[continue;] => [continue;] "forstatement.ForStatement.testContinue"
[for (int k = 0, l = 0; k < 10; k++, l++) {
        if (j == 5) {
...        }
      }] => [for (let k = 0, l = 0; k < 10; k = k + 1 | 0, l = l + 1 | 0) {
    if (j == 5) {
...    }
   }] "forstatement.ForStatement.testContinue"
[k] => [k] "k"
[l] => [l] "l"
[if (j == 5) {
          continue LABEL;
        }] => [if (j == 5) {
     continue LABEL;
    }] "forstatement.ForStatement.testContinue"
[continue LABEL;] => [continue LABEL;] "forstatement.ForStatement.testContinue"
[testInitializeInForCondition] => [m_testInitializeInForCondition__void]
[for (int i = 0, x; i < 1 && (x = 3) != 0; i++) {
      int y;
      y = i + x;
    }] => [for (let i = 0, /** number */ x; i < 1 && (x = 3) != 0; i = i + 1 | 0) {
   let /** number */ y;
   y = i + x | 0;
  }] "forstatement.ForStatement.testInitializeInForCondition"
[i] => [i] "i"
[x] => [x] "x"
[int y;] => [let /** number */ y;] "forstatement.ForStatement.testInitializeInForCondition"
[y] => [y] "y"
[y = i + x;] => [y = i + x | 0;] "forstatement.ForStatement.testInitializeInForCondition"
[testForStatementInsideDeadCode] => [m_testForStatementInsideDeadCode__void]
[if (false) {
      // The variable i is inferred to be effectively final by JDT because the code here is
...      for (int i = 0; i < 100; i++) {}
    }] => [if (false) {
   for (let i = 0; i < 100; i = i + 1 | 0) {}
  }] "forstatement.ForStatement.testForStatementInsideDeadCode"
[for (int i = 0; i < 100; i++) {}] => [for (let i = 0; i < 100; i = i + 1 | 0) {}] "forstatement.ForStatement.testForStatementInsideDeadCode"
[i] => [i] "i"
[returnsValue] => [m_returnsValue__int]
[return 1;] => [return 1;] "forstatement.ForStatement.returnsValue"
[ForStatement] => [$clinit]
[ForStatement] => [ForStatement.$clinit = () =>{};] "forstatement.ForStatement.<clinit>"
[ForStatement] => [ForStatement.$loadModules();] "forstatement.ForStatement.<clinit>"
[ForStatement] => [j_l_Object.$clinit();] "forstatement.ForStatement.<clinit>"
