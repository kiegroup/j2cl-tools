// Generated from "labelstatement/LabeledStatement.java"
@file:OptIn(ExperimentalObjCName::class)
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "REPEATED_BOUND",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_ANONYMOUS_PARAMETER",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER")

package labelstatement

import javaemul.lang.*
import kotlin.Any
import kotlin.OptIn
import kotlin.Suppress
import kotlin.experimental.ExperimentalObjCName
import kotlin.native.ObjCName

@ObjCName("J2ktLabelstatementLabeledStatement", exact = true)
open class LabeledStatement {
 @ObjCName("loopStatements")
 open fun loopStatements() {
  LABEL@ while (true) {
   break@LABEL
  }
  WHILE@ while (true) {
   when (0) {
    0 -> {
     continue@WHILE
    }
    else -> {}
   }
  }
 }

 @ObjCName("simpleStatement")
 open fun simpleStatement() {
  this.foo_private_2()
  LABEL@ do {
   break@LABEL
  } while (false)
  LABEL_1@ do {
   break@LABEL_1
  } while (false)
  LABEL_2@ do {
   break@LABEL_2
  } while (false)
  LOOP@ do {
   continue@LOOP
  } while (false)
  return
 }

 @ObjCName("block")
 open fun block() {
  LABEL@ do {
   break@LABEL
  } while (false)
 }

 @ObjCName("ifStatement")
 open fun ifStatement() {
  LABEL@ do {
   if (true) {
    break@LABEL
   }
  } while (false)
 }

 @ObjCName("switchStatement")
 open fun switchStatement() {
  LABEL@ do {
   CASE@ do {
    CASE_1@ do {
     when (0) {
      0 -> {
       break@CASE_1
      }
      else -> {
       break@CASE
      }
     }
     break@LABEL
    } while (false)
    if (true) {
     break@LABEL
    }
   } while (false)
  } while (false)
 }

 @ObjCName("nestedScopes")
 open fun nestedScopes() {
  do {
   object : Any() {
    internal fun m_pp_labelstatement() {
     do {} while (false)
    }
   }
  } while (false)
 }

 internal fun foo_private_2() {}
}
