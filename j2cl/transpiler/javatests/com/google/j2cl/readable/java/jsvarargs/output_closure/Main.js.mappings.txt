[Main] => [Main]
[Main] => [constructor]
[Main] => [super();] "jsvarargs.Main.<synthetic: ctor_js>"
[Main] => [/**@type {number} @nodts*/
  this.f_field__jsvarargs_Main = 0;] "jsvarargs.Main.<synthetic: ctor_js>"
[field] => [f_field__jsvarargs_Main]
[Main] => [$create__int]
[f] => [f] "f"
[Main] => [Main.$clinit();] "jsvarargs.Main.<synthetic: ctor_create>"
[Main] => [let $instance = new Main();] "jsvarargs.Main.<synthetic: ctor_create>"
[Main] => [$instance.$ctor__jsvarargs_Main__int__void(f);] "jsvarargs.Main.<synthetic: ctor_create>"
[Main] => [return $instance;] "jsvarargs.Main.<synthetic: ctor_create>"
[Main] => [$ctor__jsvarargs_Main__int__void]
[f] => [f] "f"
[{
    this.field = f;
  }] => [this.$ctor__java_lang_Object__void();] "jsvarargs.Main.<init>"
[this.field = f;] => [this.f_field__jsvarargs_Main = f;] "jsvarargs.Main.<init>"
[f1] => [f1]
[multiplier] => [multiplier] "multiplier"
[numbers] => [numbers] "numbers"
[{
    return numbers.length + numbers[0] + multiplier;
  }] => [Main.$clinit();] "jsvarargs.Main.f1"
[{
    return numbers.length + numbers[0] + multiplier;
  }] => [$Arrays.$stampType(numbers, $$int, 1);] "jsvarargs.Main.f1"
[return numbers.length + numbers[0] + multiplier;] => [return numbers.length + numbers[0] + multiplier | 0;] "jsvarargs.Main.f1"
[f2] => [f2]
[numbers] => [numbers] "numbers"
[{
    return numbers.length + numbers[0];
  }] => [Main.$clinit();] "jsvarargs.Main.f2"
[{
    return numbers.length + numbers[0];
  }] => [$Arrays.$stampType(numbers, $$int, 1);] "jsvarargs.Main.f2"
[return numbers.length + numbers[0];] => [return numbers.length + numbers[0] | 0;] "jsvarargs.Main.f2"
[f3] => [f3]
[m] => [m] "m"
[numbers] => [numbers] "numbers"
[{
    return this.field + m + numbers[1];
  }] => [$Arrays.$stampType(numbers, $$int, 1);] "jsvarargs.Main.f3"
[return this.field + m + numbers[1];] => [return this.f_field__jsvarargs_Main + m + numbers[1] | 0;] "jsvarargs.Main.f3"
[f4] => [f4]
[numbers] => [numbers] "numbers"
[{
    return this.field + numbers[1];
  }] => [$Arrays.$stampType(numbers, $$int, 1);] "jsvarargs.Main.f4"
[return this.field + numbers[1];] => [return this.f_field__jsvarargs_Main + numbers[1] | 0;] "jsvarargs.Main.f4"
[generics] => [generics]
[elements] => [elements] "elements"
[{
    return elements[0];
  }] => [Main.$clinit();] "jsvarargs.Main.generics"
[return elements[0];] => [return elements[0];] "jsvarargs.Main.generics"
[parameterizedType] => [parameterizedType]
[elements] => [elements] "elements"
[{
    return elements[0].get(0);
  }] => [Main.$clinit();] "jsvarargs.Main.parameterizedType"
[{
    return elements[0].get(0);
  }] => [$Arrays.$stampType(elements, List, 1);] "jsvarargs.Main.parameterizedType"
[return elements[0].get(0);] => [return /**@type {Main}*/ ($Casts.$to(elements[0].getAtIndex(0), Main));] "jsvarargs.Main.parameterizedType"
[parameterizedByT] => [parameterizedByT]
[elements] => [elements] "elements"
[{
    return elements[0].get(0);
  }] => [Main.$clinit();] "jsvarargs.Main.parameterizedByT"
[{
    return elements[0].get(0);
  }] => [$Arrays.$stampType(elements, List, 1);] "jsvarargs.Main.parameterizedByT"
[return elements[0].get(0);] => [return elements[0].getAtIndex(0);] "jsvarargs.Main.parameterizedByT"
[testStaticMethodNotFirst] => [m_testStaticMethodNotFirst__void]
[f1(1, 1, 2);] => [Main.f1(1, 1, 2);] "jsvarargs.Main.testStaticMethodNotFirst"
[Main.f1(1, 1, 2);] => [Main.f1(1, 1, 2);] "jsvarargs.Main.testStaticMethodNotFirst"
[f1(1);] => [Main.f1(1);] "jsvarargs.Main.testStaticMethodNotFirst"
[Main.f1(1);] => [Main.f1(1);] "jsvarargs.Main.testStaticMethodNotFirst"
[f1(1, new int[] {1, 2});] => [Main.f1(1, 1, 2);] "jsvarargs.Main.testStaticMethodNotFirst"
[Main.f1(1, new int[] {1, 2});] => [Main.f1(1, 1, 2);] "jsvarargs.Main.testStaticMethodNotFirst"
[f1(1, new int[] {});] => [Main.f1(1);] "jsvarargs.Main.testStaticMethodNotFirst"
[Main.f1(1, new int[] {});] => [Main.f1(1);] "jsvarargs.Main.testStaticMethodNotFirst"
[int[] ints = new int[] {1, 2};] => [let ints = /**@type {!Array<number>}*/ ($Arrays.$init([1, 2], $$int));] "jsvarargs.Main.testStaticMethodNotFirst"
[ints] => [ints] "ints"
[f1(1, ints);] => [Main.f1(1, ...InternalPreconditions.m_checkNotNull__java_lang_Object__java_lang_Object(ints));] "jsvarargs.Main.testStaticMethodNotFirst"
[Main.f1(1, ints);] => [Main.f1(1, ...InternalPreconditions.m_checkNotNull__java_lang_Object__java_lang_Object(ints));] "jsvarargs.Main.testStaticMethodNotFirst"
[Main.f1(1, null);] => [Main.f1(1, ...InternalPreconditions.m_checkNotNull__java_lang_Object__java_lang_Object(null));] "jsvarargs.Main.testStaticMethodNotFirst"
[testStaticMethodFirst] => [m_testStaticMethodFirst__void]
[f2(1, 2);] => [Main.f2(1, 2);] "jsvarargs.Main.testStaticMethodFirst"
[generics(1, 2);] => [Main.generics(Integer.m_valueOf__int__java_lang_Integer(1), Integer.m_valueOf__int__java_lang_Integer(2));] "jsvarargs.Main.testStaticMethodFirst"
[Main.f2(1, 2);] => [Main.f2(1, 2);] "jsvarargs.Main.testStaticMethodFirst"
[Main.generics(1, 2);] => [Main.generics(Integer.m_valueOf__int__java_lang_Integer(1), Integer.m_valueOf__int__java_lang_Integer(2));] "jsvarargs.Main.testStaticMethodFirst"
[f2();] => [Main.f2();] "jsvarargs.Main.testStaticMethodFirst"
[generics();] => [Main.generics();] "jsvarargs.Main.testStaticMethodFirst"
[Main.f2();] => [Main.f2();] "jsvarargs.Main.testStaticMethodFirst"
[Main.generics();] => [Main.generics();] "jsvarargs.Main.testStaticMethodFirst"
[Main.<Integer>generics();] => [Main.generics();] "jsvarargs.Main.testStaticMethodFirst"
[f2(new int[] {1, 2});] => [Main.f2(1, 2);] "jsvarargs.Main.testStaticMethodFirst"
[Main.f2(new int[] {1, 2});] => [Main.f2(1, 2);] "jsvarargs.Main.testStaticMethodFirst"
[Main.generics(new int[] {1, 2});] => [Main.generics(/**@type {!Array<number>}*/ ($Arrays.$init([1, 2], $$int)));] "jsvarargs.Main.testStaticMethodFirst"
[Main.<Integer>generics(new Integer[] {1, 2});] => [Main.generics(Integer.m_valueOf__int__java_lang_Integer(1), Integer.m_valueOf__int__java_lang_Integer(2));] "jsvarargs.Main.testStaticMethodFirst"
[f2(new int[] {});] => [Main.f2();] "jsvarargs.Main.testStaticMethodFirst"
[Main.f2(new int[] {});] => [Main.f2();] "jsvarargs.Main.testStaticMethodFirst"
[Main.generics(new int[] {});] => [Main.generics(/**@type {!Array<number>}*/ ($Arrays.$init([], $$int)));] "jsvarargs.Main.testStaticMethodFirst"
[int[] ints = new int[] {1, 2};] => [let ints = /**@type {!Array<number>}*/ ($Arrays.$init([1, 2], $$int));] "jsvarargs.Main.testStaticMethodFirst"
[ints] => [ints] "ints"
[Integer[] integers = new Integer[] {1, 2};] => [let integers = /**@type {!Array<Integer>}*/ ($Arrays.$init([Integer.m_valueOf__int__java_lang_Integer(1), Integer.m_valueOf__int__java_lang_Integer(2)], Integer));] "jsvarargs.Main.testStaticMethodFirst"
[integers] => [integers] "integers"
[f2(ints);] => [Main.f2(...InternalPreconditions.m_checkNotNull__java_lang_Object__java_lang_Object(ints));] "jsvarargs.Main.testStaticMethodFirst"
[Main.f2(ints);] => [Main.f2(...InternalPreconditions.m_checkNotNull__java_lang_Object__java_lang_Object(ints));] "jsvarargs.Main.testStaticMethodFirst"
[Main.<Integer>generics(integers);] => [Main.generics(...InternalPreconditions.m_checkNotNull__java_lang_Object__java_lang_Object(integers));] "jsvarargs.Main.testStaticMethodFirst"
[testInstanceMethodNotFirst] => [m_testInstanceMethodNotFirst__void]
[Main m = new Main(1);] => [let m = Main.$create__int(1);] "jsvarargs.Main.testInstanceMethodNotFirst"
[m] => [m] "m"
[m.f3(1, 1, 2);] => [m.f3(1, 1, 2);] "jsvarargs.Main.testInstanceMethodNotFirst"
[m.f3(1);] => [m.f3(1);] "jsvarargs.Main.testInstanceMethodNotFirst"
[m.f3(1, new int[] {1, 2});] => [m.f3(1, 1, 2);] "jsvarargs.Main.testInstanceMethodNotFirst"
[m.f3(1, new int[] {});] => [m.f3(1);] "jsvarargs.Main.testInstanceMethodNotFirst"
[int[] ints = new int[] {1, 2};] => [let ints = /**@type {!Array<number>}*/ ($Arrays.$init([1, 2], $$int));] "jsvarargs.Main.testInstanceMethodNotFirst"
[ints] => [ints] "ints"
[m.f3(1, ints);] => [m.f3(1, ...InternalPreconditions.m_checkNotNull__java_lang_Object__java_lang_Object(ints));] "jsvarargs.Main.testInstanceMethodNotFirst"
[testInstanceMethodFirst] => [m_testInstanceMethodFirst__void]
[Main m = new Main(1);] => [let m = Main.$create__int(1);] "jsvarargs.Main.testInstanceMethodFirst"
[m] => [m] "m"
[m.f4(1, 2);] => [m.f4(1, 2);] "jsvarargs.Main.testInstanceMethodFirst"
[m.f4();] => [m.f4();] "jsvarargs.Main.testInstanceMethodFirst"
[m.f4(new int[] {1, 2});] => [m.f4(1, 2);] "jsvarargs.Main.testInstanceMethodFirst"
[m.f4(new int[] {});] => [m.f4();] "jsvarargs.Main.testInstanceMethodFirst"
[int[] ints = new int[] {1, 2};] => [let ints = /**@type {!Array<number>}*/ ($Arrays.$init([1, 2], $$int));] "jsvarargs.Main.testInstanceMethodFirst"
[ints] => [ints] "ints"
[m.f4(ints);] => [m.f4(...InternalPreconditions.m_checkNotNull__java_lang_Object__java_lang_Object(ints));] "jsvarargs.Main.testInstanceMethodFirst"
[testJsFunction] => [m_testJsFunction__void]
[AFunction a = new AFunction();] => [let a = /**@type {AFunction}*/ (AFunction.$create__());] "jsvarargs.Main.testJsFunction"
[a] => [a] "a"
[Object o1 = new Object();] => [let o1 = j_l_Object.$create__();] "jsvarargs.Main.testJsFunction"
[o1] => [o1] "o1"
[Object o2 = new Object();] => [let o2 = j_l_Object.$create__();] "jsvarargs.Main.testJsFunction"
[o2] => [o2] "o2"
[a.f1(0, o1, o2);] => [/**@type {function(number, ...*):*}*/ (a)(0, o1, o2);] "jsvarargs.Main.testJsFunction"
[a.f1(0);] => [/**@type {function(number, ...*):*}*/ (a)(0);] "jsvarargs.Main.testJsFunction"
[a.f1(0, new Object[] {o1, o2});] => [/**@type {function(number, ...*):*}*/ (a)(0, o1, o2);] "jsvarargs.Main.testJsFunction"
[a.f1(0, new Object[] {});] => [/**@type {function(number, ...*):*}*/ (a)(0);] "jsvarargs.Main.testJsFunction"
[Object[] os = new Object[] {o1, o2};] => [let os = [o1, o2];] "jsvarargs.Main.testJsFunction"
[os] => [os] "os"
[a.f1(0, os);] => [/**@type {function(number, ...*):*}*/ (a)(0, ...InternalPreconditions.m_checkNotNull__java_lang_Object__java_lang_Object(os));] "jsvarargs.Main.testJsFunction"
[testSideEffect] => [m_testSideEffect__void]
[int[] ints = new int[] {1, 2};] => [let ints = /**@type {!Array<number>}*/ ($Arrays.$init([1, 2], $$int));] "jsvarargs.Main.testSideEffect"
[ints] => [ints] "ints"
[new Main(1).f3(1, ints);] => [Main.$create__int(1).f3(1, ...InternalPreconditions.m_checkNotNull__java_lang_Object__java_lang_Object(ints));] "jsvarargs.Main.testSideEffect"
[testNullJsVarargs] => [m_testNullJsVarargs__void]
[int[] ints = null;] => [let ints = null;] "jsvarargs.Main.testNullJsVarargs"
[ints] => [ints] "ints"
[Main.f2(ints);] => [Main.f2(...InternalPreconditions.m_checkNotNull__java_lang_Object__java_lang_Object(ints));] "jsvarargs.Main.testNullJsVarargs"
[testGenericJsFunctionWithVarags] => [m_testGenericJsFunctionWithVarags__void]
[GenericFunction<U> function = (n, param) -> param;] => [let function_1 = (/** U */ n, .../** ...U */ param) =>{
   return param;
  };] "jsvarargs.Main.testGenericJsFunctionWithVarags"
[function] => [function_1] "function"
[n] => [n] "n"
[param] => [param] "param"
[param] => [return param;] "jsvarargs.Main.<lambda in testGenericJsFunctionWithVarags>"
[Main] => [$clinit]
[Main] => [Main.$clinit = () =>{};] "jsvarargs.Main.<clinit>"
[Main] => [Main.$loadModules();] "jsvarargs.Main.<clinit>"
[Main] => [j_l_Object.$clinit();] "jsvarargs.Main.<clinit>"
