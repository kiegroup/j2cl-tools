goog.module('methodreferences.MethodReferences$impl');

const j_l_Object = goog.require('java.lang.Object$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let Boolean = goog.forwardDeclare('java.lang.Boolean$impl');
let Double = goog.forwardDeclare('java.lang.Double$impl');
let Integer = goog.forwardDeclare('java.lang.Integer$impl');
let Number = goog.forwardDeclare('java.lang.Number$impl');
let ArrayProducer = goog.forwardDeclare('methodreferences.MethodReferences.ArrayProducer$impl');
let BiFunction = goog.forwardDeclare('methodreferences.MethodReferences.BiFunction$impl');
let MethodReferences_Function = goog.forwardDeclare('methodreferences.MethodReferences.Function$impl');
let ObjectCapturingOuter = goog.forwardDeclare('methodreferences.MethodReferences.ObjectCapturingOuter$impl');
let Predicate = goog.forwardDeclare('methodreferences.MethodReferences.Predicate$impl');
let Producer = goog.forwardDeclare('methodreferences.MethodReferences.Producer$impl');
let $Arrays = goog.forwardDeclare('vmbootstrap.Arrays$impl');
let $Casts = goog.forwardDeclare('vmbootstrap.Casts$impl');
let $Objects = goog.forwardDeclare('vmbootstrap.Objects$impl');

/**
 * @template T
 */
class MethodReferences extends j_l_Object {
 /** @protected @nodts */
 constructor() {
  super();
 }
 /** @nodts @template T @return {!MethodReferences<T>} */
 static $create__() {
  MethodReferences.$clinit();
  let $instance = new MethodReferences();
  $instance.$ctor__methodreferences_MethodReferences__void();
  return $instance;
 }
 /** @nodts */
 $ctor__methodreferences_MethodReferences__void() {
  this.$ctor__java_lang_Object__void();
 }
 /** @nodts @return {*} */
 static m_m__java_lang_Object() {
  MethodReferences.$clinit();
  return j_l_Object.$create__();
 }
 /** @nodts @return {?boolean} */
 m_isA__java_lang_Boolean() {
  return true;
 }
 /** @nodts @return {*} */
 m_self__java_lang_Object_$pp_methodreferences() {
  return this;
 }
 /** @nodts @return {?boolean} */
 m_sameAs__java_lang_Number__java_lang_Boolean_$pp_methodreferences(/** (Number|number) */ n) {
  return false;
 }
 /** @nodts */
 m_main__void_$pp_methodreferences() {
  let /** !MethodReferences<T> */ $$q, /** !MethodReferences<*> */ $$q_1, /** !MethodReferences<*> */ $$q_2;
  let objectFactory = Producer.$adapt(() =>{
   return j_l_Object.$create__();
  });
  objectFactory = Producer.$adapt(() =>{
   return MethodReferences.m_m__java_lang_Object();
  });
  objectFactory = ($$q = /**@type {!MethodReferences<T>}*/ (MethodReferences.$create__()), Producer.$adapt(() =>{
   return $$q.m_isA__java_lang_Boolean();
  }));
  let biFunction = BiFunction.$adapt((arg0, arg1) =>{
   let arg0_1 = /**@type {MethodReferences}*/ ($Casts.$to(arg0, MethodReferences));
   let arg1_1 = /**@type {(Number|number)}*/ ($Casts.$to(arg1, Number));
   return arg0_1.m_sameAs__java_lang_Number__java_lang_Boolean_$pp_methodreferences(arg1_1);
  });
  let functionWithParameters = MethodReferences_Function.$adapt((arg0_2) =>{
   let arg0_3 = /**@type {(Number|number)}*/ ($Casts.$to(arg0_2, Number));
   return this.m_sameAs__java_lang_Number__java_lang_Boolean_$pp_methodreferences(arg0_3);
  });
  let objectPredicate = Predicate.$adapt((arg0_4) =>{
   let arg0_5 = /**@type {MethodReferences}*/ ($Casts.$to(arg0_4, MethodReferences));
   return Boolean.m_booleanValue__java_lang_Boolean__boolean(arg0_5.m_isA__java_lang_Boolean());
  });
  let objectCapturingOuterProducer = Producer.$adapt(() =>{
   return /**@type {!ObjectCapturingOuter<T>}*/ (ObjectCapturingOuter.$create__methodreferences_MethodReferences(this));
  });
  let arrayProducer = ArrayProducer.$adapt((/** number */ arg0_6) =>{
   return /**@type {!Array<?number>}*/ ($Arrays.$create([arg0_6], Double));
  });
  objectFactory = ($$q_1 = /**@type {!MethodReferences<*>}*/ (MethodReferences.$create__()), Producer.$adapt(() =>{
   return $$q_1.m_self__java_lang_Object_$pp_methodreferences();
  }));
  let function_1 = MethodReferences_Function.$adapt((arg0_7) =>{
   let arg0_8 = /**@type {MethodReferences}*/ ($Casts.$to(arg0_7, MethodReferences));
   return arg0_8.m_self__java_lang_Object_$pp_methodreferences();
  });
  let arrayFactory = MethodReferences_Function.$adapt((arg0_9) =>{
   let arg0_10 = /**@type {Integer}*/ ($Casts.$to(arg0_9, Integer));
   return new Array(arg0_10.m_intValue__int());
  });
  let superToStringProducer = Producer.$adapt(() =>{
   return j_l_Object.prototype.toString.call(this);
  });
  let jsobjectFactory = () =>{
   return j_l_Object.$create__();
  };
  jsobjectFactory = () =>{
   return MethodReferences.m_m__java_lang_Object();
  };
  jsobjectFactory = ($$q_2 = /**@type {!MethodReferences<*>}*/ (MethodReferences.$create__()), () =>{
   return $$q_2.m_self__java_lang_Object_$pp_methodreferences();
  });
  let jsfunction = (arg0_11) =>{
   let arg0_12 = /**@type {MethodReferences}*/ ($Casts.$to(arg0_11, MethodReferences));
   return arg0_12.m_self__java_lang_Object_$pp_methodreferences();
  };
  let jsarrayFactory = (arg0_13) =>{
   let arg0_14 = /**@type {Integer}*/ ($Casts.$to(arg0_13, Integer));
   return new Array(arg0_14.m_intValue__int());
  };
  let jsSuperToStringProducer = () =>{
   return j_l_Object.prototype.toString.call(this);
  };
  let jsbiFunction = (arg0_15, arg1_2) =>{
   let arg0_16 = /**@type {MethodReferences}*/ ($Casts.$to(arg0_15, MethodReferences));
   let arg1_3 = /**@type {(Number|number)}*/ ($Casts.$to(arg1_2, Number));
   return arg0_16.m_sameAs__java_lang_Number__java_lang_Boolean_$pp_methodreferences(arg1_3);
  };
  let jsFunctionWithParameters = (arg0_17) =>{
   let arg0_18 = /**@type {(Number|number)}*/ ($Casts.$to(arg0_17, Number));
   return this.m_sameAs__java_lang_Number__java_lang_Boolean_$pp_methodreferences(arg0_18);
  };
 }
 /** @nodts @return {Producer<?string>} */
 static get f_staticStringProducer__methodreferences_MethodReferences() {
  return (MethodReferences.$clinit(), MethodReferences.$static_staticStringProducer__methodreferences_MethodReferences);
 }
 /** @nodts */
 static set f_staticStringProducer__methodreferences_MethodReferences(/** Producer<?string> */ value) {
  (MethodReferences.$clinit(), MethodReferences.$static_staticStringProducer__methodreferences_MethodReferences = value);
 }
 /** @nodts */
 static $clinit() {
  let /** * */ $$q;
  MethodReferences.$clinit = () =>{};
  MethodReferences.$loadModules();
  j_l_Object.$clinit();
  MethodReferences.$static_staticStringProducer__methodreferences_MethodReferences = ($$q = MethodReferences.m_m__java_lang_Object(), Producer.$adapt(() =>{
   return $Objects.m_toString__java_lang_Object__java_lang_String($$q);
  }));
 }
 /** @nodts @return {boolean} */
 static $isInstance(/** ? */ instance) {
  return instance instanceof MethodReferences;
 }
 
 /** @nodts */
 static $loadModules() {
  Boolean = goog.module.get('java.lang.Boolean$impl');
  Double = goog.module.get('java.lang.Double$impl');
  Integer = goog.module.get('java.lang.Integer$impl');
  Number = goog.module.get('java.lang.Number$impl');
  ArrayProducer = goog.module.get('methodreferences.MethodReferences.ArrayProducer$impl');
  BiFunction = goog.module.get('methodreferences.MethodReferences.BiFunction$impl');
  MethodReferences_Function = goog.module.get('methodreferences.MethodReferences.Function$impl');
  ObjectCapturingOuter = goog.module.get('methodreferences.MethodReferences.ObjectCapturingOuter$impl');
  Predicate = goog.module.get('methodreferences.MethodReferences.Predicate$impl');
  Producer = goog.module.get('methodreferences.MethodReferences.Producer$impl');
  $Arrays = goog.module.get('vmbootstrap.Arrays$impl');
  $Casts = goog.module.get('vmbootstrap.Casts$impl');
  $Objects = goog.module.get('vmbootstrap.Objects$impl');
 }
}
/**@private {Producer<?string>} @nodts*/
MethodReferences.$static_staticStringProducer__methodreferences_MethodReferences;
$Util.$setClassMetadata(MethodReferences, 'methodreferences.MethodReferences');

exports = MethodReferences;

//# sourceMappingURL=MethodReferences.js.map
