// Generated from "nativejstypes/TopLevel.java"
@file:OptIn(ExperimentalObjCName::class)
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_ANONYMOUS_PARAMETER",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER",
 "REDUNDANT_ELSE_IN_WHEN")

package nativejstypes

import javaemul.lang.*
import jsinterop.annotations.JsType
import kotlin.Int
import kotlin.OptIn
import kotlin.Suppress
import kotlin.experimental.ExperimentalObjCName
import kotlin.jvm.JvmField
import kotlin.native.ObjCName

@ObjCName("J2ktNativejstypesTopLevel", exact = true)
@JsType(name = "toplevel", namespace = "", isNative = true)
open class TopLevel {
 private constructor()

 @ObjCName("J2ktNativejstypesTopLevelCompanion", exact = true)
 companion object {
  @JvmField
  @ObjCName("x_")
  var x: Int = 0
 }

 @ObjCName("J2ktNativejstypesTopLevel_Nested", exact = true)
 @JsType(isNative = true)
 open class Nested internal constructor() {
  @JvmField
  @ObjCName("x_")
  var x: Int = 0
 }
}

@ObjCName("J2ktNativejstypesTopLevelNestedReference", exact = true)
@JsType(name = "toplevel.Nested", namespace = "", isNative = true)
open class TopLevelNestedReference internal constructor() {
 @JvmField
 @ObjCName("x_")
 var x: Int = 0
}
