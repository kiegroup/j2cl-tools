// Generated from "simplelocalclass/SimpleLocalClass.java"
@file:OptIn(ExperimentalObjCName::class, ExperimentalObjCRefinement::class)
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "REPEATED_BOUND",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER")

package simplelocalclass

import javaemul.lang.*
import kotlin.Int
import kotlin.OptIn
import kotlin.Suppress
import kotlin.experimental.ExperimentalObjCName
import kotlin.experimental.ExperimentalObjCRefinement
import kotlin.jvm.JvmField
import kotlin.native.HiddenFromObjC
import kotlin.native.ObjCName

@ObjCName("J2ktSimplelocalclassSimpleLocalClass", exact = true)
open class SimpleLocalClass {
 @ObjCName("test")
 open fun test(
  @ObjCName("withInt") p: Int
 ) {
  val localVar: Int = 1
  open class ___1InnerClass {
   open fun `fun`(): Int {
    return localVar + p
   }
  }
  ___1InnerClass().`fun`()
  open class ___1InnerClassWithoutCaptures {}
  ___1InnerClassWithoutCaptures()
 }

 @ObjCName("fun")
 open fun `fun`() {
  val localVar: Int = 1
  open class ___2InnerClass {
   @JvmField
   @HiddenFromObjC
   var field_pp_simplelocalclass: Int = localVar
  }
 }

 @ObjCName("foo")
 open fun foo() {
  open class ___1Abc___InnerClass {}
  open class ___1Klm___InnerClass {}
 }
}
