// Generated from "localclassinstaticcontext/LocalClassInStaticContext.java"
@file:OptIn(ExperimentalObjCName::class)
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "REPEATED_BOUND",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_ANONYMOUS_PARAMETER",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER")

package localclassinstaticcontext

import javaemul.lang.*
import kotlin.Any
import kotlin.Int
import kotlin.OptIn
import kotlin.Suppress
import kotlin.experimental.ExperimentalObjCName
import kotlin.jvm.JvmField
import kotlin.jvm.JvmStatic
import kotlin.native.ObjCName

@ObjCName("J2ktLocalclassinstaticcontextLocalClassInStaticContext", exact = true)
open class LocalClassInStaticContext {
 @ObjCName("J2ktLocalclassinstaticcontextLocalClassInStaticContextCompanion", exact = true)
 companion object {
  @JvmField
  @ObjCName("f_")
  var f: Any? = object : Any() {}

  @JvmStatic
  @ObjCName("test")
  fun test() {
   open class A internal constructor() {}
   A()
   val a: Any? = object : Any() {
    internal fun m_pp_localclassinstaticcontext() {
     A()
    }
   }
  }

  init {
   open class B internal constructor() {}
   B()
   val b: Any? = object : Any() {}
  }
 }

 @ObjCName("J2ktLocalclassinstaticcontextLocalClassInStaticContext_C", exact = true)
 open class C {
  @JvmField
  @ObjCName("f_")
  var f: Int = 1

  @ObjCName("test")
  open fun test() {
   open class D internal constructor() {
    open fun `fun`(): Int {
     return this@C.f
    }
   }
   D().`fun`()
  }
 }
}
