// Generated from "j2ktnotpassing/InitializationProblemWithNullLiteral.java"
@file:OptIn(ExperimentalObjCName::class)
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_ANONYMOUS_PARAMETER",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER",
 "REDUNDANT_ELSE_IN_WHEN")

package j2ktnotpassing

import javaemul.lang.*
import kotlin.Any
import kotlin.Int
import kotlin.OptIn
import kotlin.Suppress
import kotlin.experimental.ExperimentalObjCName
import kotlin.jvm.JvmField
import kotlin.jvm.JvmStatic
import kotlin.native.ObjCName

@ObjCName("J2ktJ2ktnotpassingInitializationProblemWithNullLiteral", exact = true)
open class InitializationProblemWithNullLiteral {
 @JvmField
 internal val completelyNormalFinalField_pp_j2ktnotpassing: Int

 @JvmField
 internal var problematicFoo_pp_j2ktnotpassing: InitializationProblemWithNullLiteral.Foo<*> = InitializationProblemWithNullLiteral.Foo.with_pp_j2ktnotpassing<Any>(null!!)

 internal constructor() {
  this.completelyNormalFinalField_pp_j2ktnotpassing = 0
 }

 @ObjCName("J2ktJ2ktnotpassingInitializationProblemWithNullLiteral_Foo", exact = true)
 open class Foo<V> internal constructor() {
  @ObjCName("J2ktJ2ktnotpassingInitializationProblemWithNullLiteral_FooCompanion", exact = true)
  companion object {
   @JvmStatic
   internal fun <V> with_pp_j2ktnotpassing(v: V): InitializationProblemWithNullLiteral.Foo<V> {
    return InitializationProblemWithNullLiteral.Foo<V>()
   }
  }
 }
}
