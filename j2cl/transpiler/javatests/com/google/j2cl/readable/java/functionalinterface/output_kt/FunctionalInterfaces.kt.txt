// Generated from "functionalinterface/FunctionalInterfaces.java"
@file:OptIn(ExperimentalObjCName::class)
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "REPEATED_BOUND",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER")

package functionalinterface

import javaemul.lang.*
import kotlin.Int
import kotlin.OptIn
import kotlin.String
import kotlin.Suppress
import kotlin.experimental.ExperimentalObjCName
import kotlin.native.ObjCName

@ObjCName("J2ktFunctionalinterfaceFunctionalInterfaces", exact = true)
open class FunctionalInterfaces {
 @ObjCName("J2ktFunctionalinterfaceFunctionalInterfaces_NonParametrized", exact = true)
 fun interface NonParametrized {
  @ObjCName("apply")
  fun apply(
   @ObjCName("withNSString") string: String?
  ): String?
 }

 @ObjCName("J2ktFunctionalinterfaceFunctionalInterfaces_Parametrized", exact = true)
 fun interface Parametrized<T> {
  @ObjCName("apply")
  fun apply(
   @ObjCName("withId") t: T
  ): T
 }

 @ObjCName("J2ktFunctionalinterfaceFunctionalInterfaces_Specialized", exact = true)
 fun interface Specialized: FunctionalInterfaces.Parametrized<String?> {
  override fun apply(string: String?): String?
 }

 @ObjCName("J2ktFunctionalinterfaceFunctionalInterfaces_WithDefaultMethod", exact = true)
 fun interface WithDefaultMethod {
  @ObjCName("apply")
  fun apply(
   @ObjCName("withNSString") string: String?
  ): String?

  @ObjCName("defaultApply")
  fun defaultApply(
   @ObjCName("withNSString") string: String?
  ): String? {
   return this@WithDefaultMethod.apply(string)
  }
 }

 @ObjCName("J2ktFunctionalinterfaceFunctionalInterfaces_WithObjectMethods", exact = true)
 fun interface WithObjectMethods {
  @ObjCName("apply")
  fun apply(
   @ObjCName("withNSString") string: String?
  ): String?
 }

 @ObjCName("J2ktFunctionalinterfaceFunctionalInterfaces_WithParametrizedMethod", exact = true)
 interface WithParametrizedMethod {
  @ObjCName("apply")
  fun <T> apply(
   @ObjCName("withId") t: T
  ): T
 }

 @ObjCName("J2ktFunctionalinterfaceFunctionalInterfaces_WithKtProperty", exact = true)
 interface WithKtProperty {
  @ObjCName("size")
  val size: Int
 }
}
