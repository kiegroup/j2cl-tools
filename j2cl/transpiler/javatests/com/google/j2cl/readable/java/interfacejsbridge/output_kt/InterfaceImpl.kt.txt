// Generated from "interfacejsbridge/InterfaceImpl.java"
@file:OptIn(ExperimentalObjCName::class)
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_ANONYMOUS_PARAMETER",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER",
 "REDUNDANT_ELSE_IN_WHEN")

package interfacejsbridge

import javaemul.lang.*
import jsinterop.annotations.JsType
import kotlin.Int
import kotlin.OptIn
import kotlin.Suppress
import kotlin.experimental.ExperimentalObjCName
import kotlin.native.ObjCName

@ObjCName("J2ktInterfacejsbridgeMyJsInterface", exact = true)
@JsType
fun interface MyJsInterface {
 @ObjCName("foo")
 fun foo(
  @ObjCName("withInt") a: Int
 ): Int
}

@ObjCName("J2ktInterfacejsbridgeMyInterface", exact = true)
fun interface MyInterface {
 @ObjCName("foo")
 fun foo(
  @ObjCName("withInt") a: Int
 ): Int
}

@ObjCName("J2ktInterfacejsbridgeSubInterface", exact = true)
fun interface SubInterface: MyJsInterface, MyInterface {
 override fun foo(a: Int): Int
}

@ObjCName("J2ktInterfacejsbridgeInterfaceImpl", exact = true)
open class InterfaceImpl: SubInterface {
 override fun foo(a: Int): Int {
  return 0
 }
}
