goog.module('overridingmethods.SomeInterface$impl');

const $Util = goog.require('nativebootstrap.Util$impl');

let $LambdaAdaptor = goog.forwardDeclare('overridingmethods.SomeInterface.$LambdaAdaptor$impl');

/**
 * @interface
 */
class SomeInterface {
 /** @abstract @nodts */
 m_bar__void() {}
 /** @nodts @return {SomeInterface} */
 static $adapt(/** ?function():void */ fn) {
  SomeInterface.$clinit();
  return new $LambdaAdaptor(fn);
 }
 /** @nodts */
 static $clinit() {
  SomeInterface.$clinit = () =>{};
  SomeInterface.$loadModules();
 }
 
 static $markImplementor(/** Function */ ctor) {
  ctor.prototype.$implements__overridingmethods_SomeInterface = true;
 }
 /** @nodts @return {boolean} */
 static $isInstance(/** ? */ instance) {
  return instance != null && !!instance.$implements__overridingmethods_SomeInterface;
 }
 
 /** @nodts */
 static $loadModules() {
  $LambdaAdaptor = goog.module.get('overridingmethods.SomeInterface.$LambdaAdaptor$impl');
 }
}
SomeInterface.$markImplementor(/**@type {Function}*/ (SomeInterface));
$Util.$setClassMetadataForInterface(SomeInterface, 'overridingmethods.SomeInterface');

exports = SomeInterface;

//# sourceMappingURL=SomeInterface.js.map
