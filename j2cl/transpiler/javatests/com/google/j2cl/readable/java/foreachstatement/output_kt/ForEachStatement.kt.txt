// Generated from "foreachstatement/ForEachStatement.java"
@file:OptIn(ExperimentalObjCName::class, ExperimentalObjCRefinement::class)
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "REPEATED_BOUND",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER")

package foreachstatement

import javaemul.lang.*
import java.lang.Exception
import javaemul.lang.JavaIterable
import kotlin.Any
import kotlin.Int
import kotlin.OptIn
import kotlin.String
import kotlin.Suppress
import kotlin.Throwable
import kotlin.arrayOfNulls
import kotlin.collections.MutableIterable
import kotlin.collections.MutableIterator
import kotlin.experimental.ExperimentalObjCName
import kotlin.experimental.ExperimentalObjCRefinement
import kotlin.native.HiddenFromObjC
import kotlin.native.ObjCName

@ObjCName("J2ktForeachstatementForEachStatement", exact = true)
open class ForEachStatement {
 @ObjCName("test")
 open fun test(
  @ObjCName("withJavaLangIterable") iterable: MutableIterable<Throwable?>?
 ) {
  for (t in iterable!!) {
   val t_1: Throwable? = t
   t_1!!.toString()
  }
  for (t_2 in arrayOfNulls<Throwable>(10)) {
   val t_3: Throwable? = t_2
   t_3!!.toString()
  }
 }

 @HiddenFromObjC
 fun testMulticatch_private_2() {
  try {
   throw Exception()
  } catch (e: ForEachStatement.Exception1) {
   for (o in e!!) {
    val o_1: Any? = o
   }
  } catch (e: ForEachStatement.Exception2) {
   for (o in e!!) {
    val o_1: Any? = o
   }
  }
 }

 @HiddenFromObjC
 fun <T: MutableIterable<String?>?, U: T> testTypeVariable_private_2() {
  val iterable: U? = null
  for (s in iterable!!) {
   val s_1: String? = s
  }
  val anotherIterable: ForEachStatement.IterableReturningTypeVariable<*>? = null
  for (s_2 in anotherIterable!!) {
   val s_3: Int = s_2!!
  }
 }

 open class Exception1: Exception(), JavaIterable<String?> {
  open override fun iterator(): MutableIterator<String?> {
   return null!!
  }
 }

 open class Exception2: Exception(), JavaIterable<Any?> {
  open override fun iterator(): MutableIterator<Any?> {
   return null!!
  }
 }

 open class IterableReturningTypeVariable<T: MutableIterator<Int?>>: JavaIterable<Int?> {
  open override fun iterator(): T {
   return null!!
  }
 }
}
