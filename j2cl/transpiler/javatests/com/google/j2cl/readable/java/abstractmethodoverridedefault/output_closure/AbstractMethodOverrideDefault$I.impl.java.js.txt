goog.module('abstractmethodoverridedefault.AbstractMethodOverrideDefault.I$impl');

const $Util = goog.require('nativebootstrap.Util$impl');

let $LambdaAdaptor = goog.forwardDeclare('abstractmethodoverridedefault.AbstractMethodOverrideDefault.I.$LambdaAdaptor$impl');

/**
 * @interface
 */
class I {
 /** @abstract @nodts */
 m_foo__void() {}
 /** @abstract @nodts */
 m_bar__void() {}
 /** @nodts @return {I} */
 static $adapt(/** ?function():void */ fn) {
  I.$clinit();
  return new $LambdaAdaptor(fn);
 }
 /** @nodts */
 static m_bar__$default__abstractmethodoverridedefault_AbstractMethodOverrideDefault_I__void(/** !I */ $thisArg) {
  I.$clinit();
 }
 /** @nodts */
 static $clinit() {
  I.$clinit = () =>{};
  I.$loadModules();
 }
 
 static $markImplementor(/** Function */ ctor) {
  ctor.prototype.$implements__abstractmethodoverridedefault_AbstractMethodOverrideDefault_I = true;
 }
 /** @nodts @return {boolean} */
 static $isInstance(/** ? */ instance) {
  return instance != null && !!instance.$implements__abstractmethodoverridedefault_AbstractMethodOverrideDefault_I;
 }
 
 /** @nodts */
 static $loadModules() {
  $LambdaAdaptor = goog.module.get('abstractmethodoverridedefault.AbstractMethodOverrideDefault.I.$LambdaAdaptor$impl');
 }
}
I.$markImplementor(/**@type {Function}*/ (I));
$Util.$setClassMetadataForInterface(I, 'abstractmethodoverridedefault.AbstractMethodOverrideDefault$I');

exports = I;

//# sourceMappingURL=AbstractMethodOverrideDefault$I.js.map
