goog.module('jsvarargs.Main.SubMain$impl');

const Main = goog.require('jsvarargs.Main$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let InternalPreconditions = goog.forwardDeclare('javaemul.internal.InternalPreconditions$impl');
let $Arrays = goog.forwardDeclare('vmbootstrap.Arrays$impl');
let $$int = goog.forwardDeclare('vmbootstrap.primitives.$int$impl');

class SubMain extends Main {
 /** @protected @nodts */
 constructor() {
  super();
 }
 /** @nodts @return {!SubMain} */
 static $create__() {
  SubMain.$clinit();
  let $instance = new SubMain();
  $instance.$ctor__jsvarargs_Main_SubMain__void();
  return $instance;
 }
 /** @nodts */
 $ctor__jsvarargs_Main_SubMain__void() {
  this.$ctor__jsvarargs_Main__int__void(10);
 }
 /** @override @return {number} */
 f3(/** number */ m, .../** ...number */ numbers) {
  $Arrays.$stampType(numbers, $$int, 1);
  let a = super.f3(1, 1, 2);
  a = a + super.f3(1) | 0;
  a = a + super.f3(1, 1, 2) | 0;
  a = a + super.f3(1) | 0;
  let ints = /**@type {!Array<number>}*/ ($Arrays.$init([1, 2], $$int));
  a = a + super.f3(1, ...InternalPreconditions.m_checkNotNull__java_lang_Object__java_lang_Object(ints)) | 0;
  return a;
 }
 /** @nodts */
 static $clinit() {
  SubMain.$clinit = () =>{};
  SubMain.$loadModules();
  Main.$clinit();
 }
 /** @nodts @return {boolean} */
 static $isInstance(/** ? */ instance) {
  return instance instanceof SubMain;
 }
 
 /** @nodts */
 static $loadModules() {
  InternalPreconditions = goog.module.get('javaemul.internal.InternalPreconditions$impl');
  $Arrays = goog.module.get('vmbootstrap.Arrays$impl');
  $$int = goog.module.get('vmbootstrap.primitives.$int$impl');
 }
}
$Util.$setClassMetadata(SubMain, 'jsvarargs.Main$SubMain');

exports = SubMain;

//# sourceMappingURL=Main$SubMain.js.map
