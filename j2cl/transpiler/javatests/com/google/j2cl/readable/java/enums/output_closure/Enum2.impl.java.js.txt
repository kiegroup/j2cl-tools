goog.module('enums.Enum2$impl');

const Enum = goog.require('java.lang.Enum$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let Enum1 = goog.forwardDeclare('enums.Enum1$impl');
let $1 = goog.forwardDeclare('enums.Enum2.$1$impl');
let j_l_Object = goog.forwardDeclare('java.lang.Object$impl');
let $Equality = goog.forwardDeclare('nativebootstrap.Equality$impl');
let $Arrays = goog.forwardDeclare('vmbootstrap.Arrays$impl');
let $Enums = goog.forwardDeclare('vmbootstrap.Enums$impl');

/**
 * @extends {Enum<Enum2>}
 */
class Enum2 extends Enum {
 /** @protected @nodts */
 constructor() {
  super();
  /**@type {number} @nodts*/
  this.f_foo__enums_Enum2 = 0;
 }
 //Factory method corresponding to constructor 'Enum2(String, int, int)'.
 /** @nodts @return {!Enum2} */
 static $create__java_lang_String__int__int(/** ?string */ $name, /** number */ $ordinal, /** number */ foo) {
  let $instance = new Enum2();
  $instance.$ctor__enums_Enum2__java_lang_String__int__int__void($name, $ordinal, foo);
  return $instance;
 }
 //Initialization from constructor 'Enum2(String, int, int)'.
 /** @nodts */
 $ctor__enums_Enum2__java_lang_String__int__int__void(/** ?string */ $name, /** number */ $ordinal, /** number */ foo) {
  this.f_name__java_lang_Enum_ = $name;
  this.f_ordinal__java_lang_Enum_ = $ordinal;
  this.$ctor__java_lang_Enum__java_lang_String__int__void($name, $ordinal);
  this.$init__void_$p_enums_Enum2();
  this.f_foo__enums_Enum2 = foo;
 }
 //Factory method corresponding to constructor 'Enum2(String, int, Enum)'.
 /** @nodts @return {!Enum2} */
 static $create__java_lang_String__int__java_lang_Enum(/** ?string */ $name, /** number */ $ordinal, /** Enum */ foo) {
  let $instance = new Enum2();
  $instance.$ctor__enums_Enum2__java_lang_String__int__java_lang_Enum__void($name, $ordinal, foo);
  return $instance;
 }
 //Initialization from constructor 'Enum2(String, int, Enum)'.
 /** @nodts */
 $ctor__enums_Enum2__java_lang_String__int__java_lang_Enum__void(/** ?string */ $name, /** number */ $ordinal, /** Enum */ foo) {
  this.f_name__java_lang_Enum_ = $name;
  this.f_ordinal__java_lang_Enum_ = $ordinal;
  this.$ctor__enums_Enum2__java_lang_String__int__int__void($name, $ordinal, foo.ordinal());
 }
 //Factory method corresponding to constructor 'Enum2(String, int, Object...)'.
 /** @nodts @return {!Enum2} */
 static $create__java_lang_String__int__arrayOf_java_lang_Object(/** ?string */ $name, /** number */ $ordinal, /** Array<*> */ somePars) {
  let $instance = new Enum2();
  $instance.$ctor__enums_Enum2__java_lang_String__int__arrayOf_java_lang_Object__void($name, $ordinal, somePars);
  return $instance;
 }
 //Initialization from constructor 'Enum2(String, int, Object...)'.
 /** @nodts */
 $ctor__enums_Enum2__java_lang_String__int__arrayOf_java_lang_Object__void(/** ?string */ $name, /** number */ $ordinal, /** Array<*> */ somePars) {
  this.f_name__java_lang_Enum_ = $name;
  this.f_ordinal__java_lang_Enum_ = $ordinal;
  this.$ctor__enums_Enum2__java_lang_String__int__int__void($name, $ordinal, somePars.length);
 }
 /** @nodts @return {Enum2} */
 static m_f__java_lang_Object__enums_Enum2(/** * */ o) {
  Enum2.$clinit();
  return null;
 }
 /** @nodts */
 m_specialMethods__void_$pp_enums() {
  let o1 = Enum2.m_valueOf__java_lang_String__enums_Enum2(null).ordinal();
  let o2 = Enum2.m_valueOf__java_lang_String__enums_Enum2('VALUE1').ordinal();
  let l = Enum2.m_values__arrayOf_enums_Enum2().length;
 }
 /** @nodts @return {!Enum2} */
 static m_valueOf__java_lang_String__enums_Enum2(/** string */ name) {
  Enum2.$clinit();
  if ($Equality.$same(Enum2.f_namesToValuesMap__enums_Enum2_, null)) {
   Enum2.f_namesToValuesMap__enums_Enum2_ = /**@type {Map<?string, !Enum2>}*/ ($Enums.createMapFromValues(Enum2.m_values__arrayOf_enums_Enum2()));
  }
  return /**@type {Enum2}*/ ($Enums.getValueFromNameAndMap(name, Enum2.f_namesToValuesMap__enums_Enum2_));
 }
 /** @nodts @return {!Array<!Enum2>} */
 static m_values__arrayOf_enums_Enum2() {
  Enum2.$clinit();
  return /**@type {!Array<Enum2>}*/ ($Arrays.$init([Enum2.$static_VALUE1__enums_Enum2, Enum2.$static_VALUE2__enums_Enum2, Enum2.$static_VALUE3__enums_Enum2, Enum2.$static_VALUE4__enums_Enum2], Enum2));
 }
 /** @private @nodts */
 $init__void_$p_enums_Enum2() {
  this.f_foo__enums_Enum2 = Enum1.f_V1__enums_Enum1.ordinal();
 }
 /** @nodts @return {!Enum2} */
 static get f_VALUE1__enums_Enum2() {
  return (Enum2.$clinit(), Enum2.$static_VALUE1__enums_Enum2);
 }
 /** @nodts @return {!Enum2} */
 static get f_VALUE2__enums_Enum2() {
  return (Enum2.$clinit(), Enum2.$static_VALUE2__enums_Enum2);
 }
 /** @nodts @return {!Enum2} */
 static get f_VALUE3__enums_Enum2() {
  return (Enum2.$clinit(), Enum2.$static_VALUE3__enums_Enum2);
 }
 /** @nodts @return {!Enum2} */
 static get f_VALUE4__enums_Enum2() {
  return (Enum2.$clinit(), Enum2.$static_VALUE4__enums_Enum2);
 }
 /** @nodts @return {Enum2} */
 static get f_C__enums_Enum2() {
  return (Enum2.$clinit(), Enum2.$static_C__enums_Enum2);
 }
 /** @nodts */
 static set f_C__enums_Enum2(/** Enum2 */ value) {
  (Enum2.$clinit(), Enum2.$static_C__enums_Enum2 = value);
 }
 /** @nodts */
 static $clinit() {
  Enum2.$clinit = () =>{};
  Enum2.$loadModules();
  Enum.$clinit();
  Enum2.$static_VALUE1__enums_Enum2 = Enum2.$create__java_lang_String__int__int($Util.$makeEnumName('VALUE1'), Enum2.$ordinal_VALUE1__enums_Enum2, 2);
  Enum2.$static_VALUE2__enums_Enum2 = Enum2.$create__java_lang_String__int__java_lang_Enum($Util.$makeEnumName('VALUE2'), Enum2.$ordinal_VALUE2__enums_Enum2, Enum1.f_V1__enums_Enum1);
  Enum2.$static_VALUE3__enums_Enum2 = Enum2.$create__java_lang_String__int__arrayOf_java_lang_Object($Util.$makeEnumName('VALUE3'), Enum2.$ordinal_VALUE3__enums_Enum2, []);
  Enum2.$static_VALUE4__enums_Enum2 = $1.$create__java_lang_String__int__int($Util.$makeEnumName('VALUE4'), Enum2.$ordinal_VALUE4__enums_Enum2, 5);
  Enum2.$static_C__enums_Enum2 = Enum2.m_f__java_lang_Object__enums_Enum2(j_l_Object.$create__());
 }
 /** @nodts @return {boolean} */
 static $isInstance(/** ? */ instance) {
  return instance instanceof Enum2;
 }
 
 /** @nodts */
 static $loadModules() {
  Enum1 = goog.module.get('enums.Enum1$impl');
  $1 = goog.module.get('enums.Enum2.$1$impl');
  j_l_Object = goog.module.get('java.lang.Object$impl');
  $Equality = goog.module.get('nativebootstrap.Equality$impl');
  $Arrays = goog.module.get('vmbootstrap.Arrays$impl');
  $Enums = goog.module.get('vmbootstrap.Enums$impl');
 }
}
/**@const {number} @nodts*/
Enum2.$ordinal_VALUE1__enums_Enum2 = 0;
/**@const {number} @nodts*/
Enum2.$ordinal_VALUE2__enums_Enum2 = 1;
/**@const {number} @nodts*/
Enum2.$ordinal_VALUE3__enums_Enum2 = 2;
/**@const {number} @nodts*/
Enum2.$ordinal_VALUE4__enums_Enum2 = 3;
/**@private {!Enum2} @nodts*/
Enum2.$static_VALUE1__enums_Enum2;
/**@private {!Enum2} @nodts*/
Enum2.$static_VALUE2__enums_Enum2;
/**@private {!Enum2} @nodts*/
Enum2.$static_VALUE3__enums_Enum2;
/**@private {!Enum2} @nodts*/
Enum2.$static_VALUE4__enums_Enum2;
/**@private {Enum2} @nodts*/
Enum2.$static_C__enums_Enum2;
/**@type {Map<?string, !Enum2>} @nodts*/
Enum2.f_namesToValuesMap__enums_Enum2_;
$Util.$setClassMetadataForEnum(Enum2, 'enums.Enum2');

exports = Enum2;

//# sourceMappingURL=Enum2.js.map
