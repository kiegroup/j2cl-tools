goog.module('bridgejsmethod.Main.G$impl');

const $Util = goog.require('nativebootstrap.Util$impl');

let $LambdaAdaptor = goog.forwardDeclare('bridgejsmethod.Main.G.$LambdaAdaptor$impl');

/**
 * @interface
 * @template V
 */
class G {
 /** @abstract @nodts @return {V} */
 m_enclose__java_lang_Object__java_lang_Object(/** V */ value) {}
 /** @nodts @template V @return {G<V>} */
 static $adapt(/** ?function(V):V */ fn) {
  G.$clinit();
  return /**@type {!$LambdaAdaptor<V>}*/ (new $LambdaAdaptor(fn));
 }
 /** @nodts */
 static $clinit() {
  G.$clinit = () =>{};
  G.$loadModules();
 }
 
 static $markImplementor(/** Function */ ctor) {
  ctor.prototype.$implements__bridgejsmethod_Main_G = true;
 }
 /** @nodts @return {boolean} */
 static $isInstance(/** ? */ instance) {
  return instance != null && !!instance.$implements__bridgejsmethod_Main_G;
 }
 
 /** @nodts */
 static $loadModules() {
  $LambdaAdaptor = goog.module.get('bridgejsmethod.Main.G.$LambdaAdaptor$impl');
 }
}
G.$markImplementor(/**@type {Function}*/ (G));
$Util.$setClassMetadataForInterface(G, 'bridgejsmethod.Main$G');

exports = G;

//# sourceMappingURL=Main$G.js.map
