[ArithmeticExpressions] => [ArithmeticExpressions]
[ArithmeticExpressions] => [constructor]
[ArithmeticExpressions] => [super();] "arithmeticexpressions.ArithmeticExpressions.<synthetic: ctor_js>"
[ArithmeticExpressions] => [/**@type {!$Long} @nodts*/
  this.f_bar__arithmeticexpressions_ArithmeticExpressions = $Long.fromInt(0);] "arithmeticexpressions.ArithmeticExpressions.<synthetic: ctor_js>"
[bar] => [f_bar__arithmeticexpressions_ArithmeticExpressions]
[ArithmeticExpressions] => [/**@type {!$Long} @nodts*/
  this.f_intField__arithmeticexpressions_ArithmeticExpressions = $Long.fromInt(0);] "arithmeticexpressions.ArithmeticExpressions.<synthetic: ctor_js>"
[intField] => [f_intField__arithmeticexpressions_ArithmeticExpressions]
[ArithmeticExpressions] => [$create__]
[ArithmeticExpressions] => [ArithmeticExpressions.$clinit();] "arithmeticexpressions.ArithmeticExpressions.<synthetic: ctor_create>"
[ArithmeticExpressions] => [let $instance = new ArithmeticExpressions();] "arithmeticexpressions.ArithmeticExpressions.<synthetic: ctor_create>"
[ArithmeticExpressions] => [$instance.$ctor__arithmeticexpressions_ArithmeticExpressions__void();] "arithmeticexpressions.ArithmeticExpressions.<synthetic: ctor_create>"
[ArithmeticExpressions] => [return $instance;] "arithmeticexpressions.ArithmeticExpressions.<synthetic: ctor_create>"
[ArithmeticExpressions] => [$ctor__arithmeticexpressions_ArithmeticExpressions__void]
[ArithmeticExpressions] => [this.$ctor__java_lang_Object__void();] "arithmeticexpressions.ArithmeticExpressions.<init>"
[ArithmeticExpressions] => [this.$init__void_$p_arithmeticexpressions_ArithmeticExpressions();] "arithmeticexpressions.ArithmeticExpressions.<init>"
[testCoercions] => [m_testCoercions__void]
[byte b = (byte) 1L;] => [let b = 1;] "arithmeticexpressions.ArithmeticExpressions.testCoercions"
[b] => [b] "b"
[char c = (char) 1L;] => [let c = 1 /* '\u0001' */;] "arithmeticexpressions.ArithmeticExpressions.testCoercions"
[c] => [c] "c"
[short s = (short) 1L;] => [let s = 1;] "arithmeticexpressions.ArithmeticExpressions.testCoercions"
[s] => [s] "s"
[int i = (int) 1L;] => [let i = 1;] "arithmeticexpressions.ArithmeticExpressions.testCoercions"
[i] => [i] "i"
[float f = (float) 1L;] => [let f = 1;] "arithmeticexpressions.ArithmeticExpressions.testCoercions"
[f] => [f] "f"
[double d = (double) 1L;] => [let d = 1;] "arithmeticexpressions.ArithmeticExpressions.testCoercions"
[d] => [d] "d"
[b = (byte) 9223372036854775807L;] => [b = -1;] "arithmeticexpressions.ArithmeticExpressions.testCoercions"
[c = (char) 9223372036854775807L;] => [c = 65535 /* '\uFFFF' */;] "arithmeticexpressions.ArithmeticExpressions.testCoercions"
[s = (short) 9223372036854775807L;] => [s = -1;] "arithmeticexpressions.ArithmeticExpressions.testCoercions"
[i = (int) 9223372036854775807L;] => [i = -1;] "arithmeticexpressions.ArithmeticExpressions.testCoercions"
[f = (float) 9223372036854775807L;] => [f = 9.223372036854776E18;] "arithmeticexpressions.ArithmeticExpressions.testCoercions"
[d = (double) 9223372036854775807L;] => [d = 9.223372036854776E18;] "arithmeticexpressions.ArithmeticExpressions.testCoercions"
[Object o = c;] => [let o = Character.m_valueOf__char__java_lang_Character(c);] "arithmeticexpressions.ArithmeticExpressions.testCoercions"
[o] => [o] "o"
[s = (short) (char) o;] => [s = $Primitives.narrowCharToShort(/**@type {!Character}*/ ($Casts.$to(o, Character)).m_charValue__char());] "arithmeticexpressions.ArithmeticExpressions.testCoercions"
[testPrimitives] => [m_testPrimitives__void]
[{
    int a = 10,
...    k = y == z;
  }] => [let /** number */ $value, /** number */ $value_1;] "arithmeticexpressions.ArithmeticExpressions.testPrimitives"
[int a = 10,
        b = a++,
...        v = -(+(-1)),
        w = 5 - (-4);] => [let a = 10, b = ($value = a, a = a + 1 | 0, $value), c = ($value_1 = a, a = a - 1 | 0, $value_1), d = a = a + 1 | 0, e = a = a - 1 | 0, f = - a | 0, g = + a, h = ~a, i = 1 + 1 + 2 - 5 | 0, j = Math.imul(1 + 2, 3 + 4), p = $Primitives.coerceDivision(Math.imul($Primitives.coerceDivision(1 / 2), 3) % 4), r = - -2147483648 | 0, t = - (- (- 1 | 0) | 0) | 0, u = + + + 1, v = - + (- 1 | 0) | 0, w = 5 - - 4 | 0;] "arithmeticexpressions.ArithmeticExpressions.testPrimitives"
[a] => [a] "a"
[b] => [b] "b"
[c] => [c] "c"
[d] => [d] "d"
[e] => [e] "e"
[f] => [f] "f"
[g] => [g] "g"
[h] => [h] "h"
[i] => [i] "i"
[j] => [j] "j"
[p] => [p] "p"
[r] => [r] "r"
[t] => [t] "t"
[u] => [u] "u"
[v] => [v] "v"
[w] => [w] "w"
[boolean k = !(1 + 2 + 3 == 4), l = (1 + 2 != 4), m = Long.MAX_VALUE != 9223372036854776833d;] => [let k = !((1 + 2 + 3 | 0) == 4), l = (1 + 2 | 0) != 4, m = $Primitives.widenLongToDouble(Long.f_MAX_VALUE__java_lang_Long) != 9.223372036854778E18;] "arithmeticexpressions.ArithmeticExpressions.testPrimitives"
[k] => [k] "k"
[l] => [l] "l"
[m] => [m] "m"
[double o = ((5 + 1) / 2) - 0.0;] => [let o = $Primitives.coerceDivision((5 + 1 | 0) / 2) - 0;] "arithmeticexpressions.ArithmeticExpressions.testPrimitives"
[o] => [o] "o"
[a = a << 31L;] => [a = a << 31;] "arithmeticexpressions.ArithmeticExpressions.testPrimitives"
[a <<= 1L;] => [a <<= 1;] "arithmeticexpressions.ArithmeticExpressions.testPrimitives"
[a += 1L;] => [a = $Primitives.narrowLongToInt($LongUtils.plus($Primitives.widenIntToLong(a), $Long.fromInt(1)));] "arithmeticexpressions.ArithmeticExpressions.testPrimitives"
[a /= 1L;] => [a = $Primitives.narrowLongToInt($LongUtils.divide($Primitives.widenIntToLong(a), $Long.fromInt(1)));] "arithmeticexpressions.ArithmeticExpressions.testPrimitives"
[a += Double.MAX_VALUE;] => [a = $Primitives.narrowDoubleToInt(a + Double.f_MAX_VALUE__java_lang_Double);] "arithmeticexpressions.ArithmeticExpressions.testPrimitives"
[((k)) |= true;] => [k = !!(+ k | + true);] "arithmeticexpressions.ArithmeticExpressions.testPrimitives"
[short s = 10;] => [let s = 10;] "arithmeticexpressions.ArithmeticExpressions.testPrimitives"
[s] => [s] "s"
[k = ++s == 10;] => [k = (s = $Primitives.narrowIntToShort(s + 1 | 0)) == 10;] "arithmeticexpressions.ArithmeticExpressions.testPrimitives"
[int q = 3 >> 2;] => [let q = 3 >> 2;] "arithmeticexpressions.ArithmeticExpressions.testPrimitives"
[q] => [q] "q"
[q = 3 >>> 2;] => [q = 3 >>> 2 | 0;] "arithmeticexpressions.ArithmeticExpressions.testPrimitives"
[byte x = (byte) (((short) a + (byte) (short) b) * (short) (byte) c);] => [let x = $Primitives.narrowIntToByte(Math.imul($Primitives.narrowIntToShort(a) + $Primitives.narrowIntToByte($Primitives.narrowIntToShort(b)), $Primitives.narrowIntToShort($Primitives.narrowIntToByte(c))));] "arithmeticexpressions.ArithmeticExpressions.testPrimitives"
[x] => [x] "x"
[char y = 'y';] => [let y = 121 /* 'y' */;] "arithmeticexpressions.ArithmeticExpressions.testPrimitives"
[y] => [y] "y"
[Long z = 121L;] => [let z = Long.m_valueOf__long__java_lang_Long($Long.fromInt(121));] "arithmeticexpressions.ArithmeticExpressions.testPrimitives"
[z] => [z] "z"
[k = y == z;] => [k = $LongUtils.equals($Primitives.widenCharToLong(y), z.m_longValue__long());] "arithmeticexpressions.ArithmeticExpressions.testPrimitives"
[testCompoundArray] => [m_testCompoundArray__void]
[int[] ints = null;] => [let ints = null;] "arithmeticexpressions.ArithmeticExpressions.testCompoundArray"
[ints] => [ints] "ints"
[ints[0] += 1;] => [$Arrays.$set(ints, 0, ints[0] + 1 | 0);] "arithmeticexpressions.ArithmeticExpressions.testCompoundArray"
[ints[0] -= 1;] => [$Arrays.$set(ints, 0, ints[0] - 1 | 0);] "arithmeticexpressions.ArithmeticExpressions.testCompoundArray"
[ints[0] *= 1;] => [$Arrays.$set(ints, 0, Math.imul(ints[0], 1));] "arithmeticexpressions.ArithmeticExpressions.testCompoundArray"
[ints[0] /= 1;] => [$Arrays.$set(ints, 0, $Primitives.coerceDivision(ints[0] / 1));] "arithmeticexpressions.ArithmeticExpressions.testCompoundArray"
[ints[0] &= 1;] => [ints[0] &= 1;] "arithmeticexpressions.ArithmeticExpressions.testCompoundArray"
[ints[0] ^= 1;] => [ints[0] ^= 1;] "arithmeticexpressions.ArithmeticExpressions.testCompoundArray"
[ints[0] |= 1;] => [ints[0] |= 1;] "arithmeticexpressions.ArithmeticExpressions.testCompoundArray"
[ints[0] %= 1;] => [$Arrays.$set(ints, 0, $Primitives.coerceDivision(ints[0] % 1));] "arithmeticexpressions.ArithmeticExpressions.testCompoundArray"
[ints[0] <<= 1;] => [ints[0] <<= 1;] "arithmeticexpressions.ArithmeticExpressions.testCompoundArray"
[ints[0] >>= 1;] => [ints[0] >>= 1;] "arithmeticexpressions.ArithmeticExpressions.testCompoundArray"
[ints[0] >>>= 1;] => [$Arrays.$set(ints, 0, ints[0] >>> 1 | 0);] "arithmeticexpressions.ArithmeticExpressions.testCompoundArray"
[ints[0]++;] => [$Arrays.$set(ints, 0, ints[0] + 1 | 0);] "arithmeticexpressions.ArithmeticExpressions.testCompoundArray"
[++ints[0];] => [$Arrays.$set(ints, 0, ints[0] + 1 | 0);] "arithmeticexpressions.ArithmeticExpressions.testCompoundArray"
[int i = 0;] => [let i = 0;] "arithmeticexpressions.ArithmeticExpressions.testCompoundArray"
[i] => [i] "i"
[ints[i++]++;] => [let /** number */ $value;] "arithmeticexpressions.ArithmeticExpressions.testCompoundArray"
[ints[i++]++;] => [let $array = ints, $index = ($value = i, i = i + 1 | 0, $value);] "arithmeticexpressions.ArithmeticExpressions.testCompoundArray"
[ints[i++]++;] => [$Arrays.$set($array, $index, $array[$index] + 1 | 0);] "arithmeticexpressions.ArithmeticExpressions.testCompoundArray"
[++ints[++i];] => [let $array_1 = ints, $index_1 = i = i + 1 | 0;] "arithmeticexpressions.ArithmeticExpressions.testCompoundArray"
[++ints[++i];] => [$Arrays.$set($array_1, $index_1, $array_1[$index_1] + 1 | 0);] "arithmeticexpressions.ArithmeticExpressions.testCompoundArray"
[ints[i++] /= 1;] => [let /** number */ $value_1;] "arithmeticexpressions.ArithmeticExpressions.testCompoundArray"
[ints[i++] /= 1;] => [let $array_2 = ints, $index_2 = ($value_1 = i, i = i + 1 | 0, $value_1);] "arithmeticexpressions.ArithmeticExpressions.testCompoundArray"
[ints[i++] /= 1;] => [$Arrays.$set($array_2, $index_2, $Primitives.coerceDivision($array_2[$index_2] / 1));] "arithmeticexpressions.ArithmeticExpressions.testCompoundArray"
[long[] longs = null;] => [let longs = null;] "arithmeticexpressions.ArithmeticExpressions.testCompoundArray"
[longs] => [longs] "longs"
[longs[0] += 1;] => [$Arrays.$set(longs, 0, $LongUtils.plus(longs[0], $Long.fromInt(1)));] "arithmeticexpressions.ArithmeticExpressions.testCompoundArray"
[longs[0]--;] => [$Arrays.$set(longs, 0, $LongUtils.minus(longs[0], $Long.fromInt(1)));] "arithmeticexpressions.ArithmeticExpressions.testCompoundArray"
[--longs[0];] => [$Arrays.$set(longs, 0, $LongUtils.minus(longs[0], $Long.fromInt(1)));] "arithmeticexpressions.ArithmeticExpressions.testCompoundArray"
[getLongArray()[0]++;] => [let $array_3 = ArithmeticExpressions.m_getLongArray__arrayOf_long(), $index_3 = 0;] "arithmeticexpressions.ArithmeticExpressions.testCompoundArray"
[getLongArray()[0]++;] => [$Arrays.$set($array_3, $index_3, $LongUtils.plus($array_3[$index_3], $Long.fromInt(1)));] "arithmeticexpressions.ArithmeticExpressions.testCompoundArray"
[boolean[] booleans = null;] => [let booleans = null;] "arithmeticexpressions.ArithmeticExpressions.testCompoundArray"
[booleans] => [booleans] "booleans"
[booleans[0] |= true;] => [$Arrays.$set(booleans, 0, !!(+ booleans[0] | + true));] "arithmeticexpressions.ArithmeticExpressions.testCompoundArray"
[String[] strings = null;] => [let strings = null;] "arithmeticexpressions.ArithmeticExpressions.testCompoundArray"
[strings] => [strings] "strings"
[strings[0] += null;] => [$Arrays.$set(strings, 0, j_l_String.m_valueOf__java_lang_Object__java_lang_String(strings[0]) + j_l_String.m_valueOf__java_lang_Object__java_lang_String(null));] "arithmeticexpressions.ArithmeticExpressions.testCompoundArray"
[short[] shorts = null;] => [let shorts = null;] "arithmeticexpressions.ArithmeticExpressions.testCompoundArray"
[shorts] => [shorts] "shorts"
[boolean b = ++shorts[0] == 10;] => [let b = $Arrays.$set(shorts, 0, $Primitives.narrowIntToShort(shorts[0] + 1 | 0)) == 10;] "arithmeticexpressions.ArithmeticExpressions.testCompoundArray"
[b] => [b] "b"
[getLongArray] => [m_getLongArray__arrayOf_long]
[return null;] => [return null;] "arithmeticexpressions.ArithmeticExpressions.getLongArray"
[testCompoundBoxedTypes] => [m_testCompoundBoxedTypes__void]
[{
    Integer c = 1000;
...    int n = 1 + ref.field;
  }] => [let /** Integer */ $value, /** Integer */ $value_1, /** Integer */ $value_2;] "arithmeticexpressions.ArithmeticExpressions.testCompoundBoxedTypes"
[Integer c = 1000;] => [let c = Integer.m_valueOf__int__java_lang_Integer(1000);] "arithmeticexpressions.ArithmeticExpressions.testCompoundBoxedTypes"
[c] => [c] "c"
[Integer d = 10000;] => [let d = Integer.m_valueOf__int__java_lang_Integer(10000);] "arithmeticexpressions.ArithmeticExpressions.testCompoundBoxedTypes"
[d] => [d] "d"
[d += c;] => [d = Integer.m_valueOf__int__java_lang_Integer(d.m_intValue__int() + c.m_intValue__int() | 0);] "arithmeticexpressions.ArithmeticExpressions.testCompoundBoxedTypes"
[int i = 43;] => [let i = 43;] "arithmeticexpressions.ArithmeticExpressions.testCompoundBoxedTypes"
[i] => [i] "i"
[d += i;] => [d = Integer.m_valueOf__int__java_lang_Integer(d.m_intValue__int() + i | 0);] "arithmeticexpressions.ArithmeticExpressions.testCompoundBoxedTypes"
[d <<= i;] => [d = Integer.m_valueOf__int__java_lang_Integer(d.m_intValue__int() << i);] "arithmeticexpressions.ArithmeticExpressions.testCompoundBoxedTypes"
[i += c;] => [i = i + c.m_intValue__int() | 0;] "arithmeticexpressions.ArithmeticExpressions.testCompoundBoxedTypes"
[Integer e = ++c;] => [let e = c = Integer.m_valueOf__int__java_lang_Integer(c.m_intValue__int() + 1 | 0);] "arithmeticexpressions.ArithmeticExpressions.testCompoundBoxedTypes"
[e] => [e] "e"
[e = ++c;] => [e = c = Integer.m_valueOf__int__java_lang_Integer(c.m_intValue__int() + 1 | 0);] "arithmeticexpressions.ArithmeticExpressions.testCompoundBoxedTypes"
[Double e2 = 100d;] => [let e2 = 100;] "arithmeticexpressions.ArithmeticExpressions.testCompoundBoxedTypes"
[e2] => [e2] "e2"
[++e2;] => [e2 = Double.m_doubleValue__java_lang_Double__double(e2) + 1;] "arithmeticexpressions.ArithmeticExpressions.testCompoundBoxedTypes"
[Integer f = c++;] => [let f = ($value = c, c = Integer.m_valueOf__int__java_lang_Integer(c.m_intValue__int() + 1 | 0), $value);] "arithmeticexpressions.ArithmeticExpressions.testCompoundBoxedTypes"
[f] => [f] "f"
[f = c++;] => [f = ($value_1 = c, c = Integer.m_valueOf__int__java_lang_Integer(c.m_intValue__int() + 1 | 0), $value_1);] "arithmeticexpressions.ArithmeticExpressions.testCompoundBoxedTypes"
[Byte b = 0;] => [let b = Byte.m_valueOf__byte__java_lang_Byte(0);] "arithmeticexpressions.ArithmeticExpressions.testCompoundBoxedTypes"
[b] => [b] "b"
[b++;] => [b = Byte.m_valueOf__byte__java_lang_Byte($Primitives.narrowIntToByte(b.m_byteValue__byte() + 1 | 0));] "arithmeticexpressions.ArithmeticExpressions.testCompoundBoxedTypes"
[Character ch = 'c';] => [let ch = Character.m_valueOf__char__java_lang_Character(99 /* 'c' */);] "arithmeticexpressions.ArithmeticExpressions.testCompoundBoxedTypes"
[ch] => [ch] "ch"
[ch++;] => [ch = Character.m_valueOf__char__java_lang_Character($Primitives.narrowIntToChar(ch.m_charValue__char() + 1 /* '\u0001' */ | 0));] "arithmeticexpressions.ArithmeticExpressions.testCompoundBoxedTypes"
[(++f).intValue();] => [(f = Integer.m_valueOf__int__java_lang_Integer(f.m_intValue__int() + 1 | 0)).m_intValue__int();] "arithmeticexpressions.ArithmeticExpressions.testCompoundBoxedTypes"
[(f--).intValue();] => [($value_2 = f, f = Integer.m_valueOf__int__java_lang_Integer(f.m_intValue__int() - 1 | 0), $value_2).m_intValue__int();] "arithmeticexpressions.ArithmeticExpressions.testCompoundBoxedTypes"
[Ref<Byte> ref = null;] => [let ref = null;] "arithmeticexpressions.ArithmeticExpressions.testCompoundBoxedTypes"
[ref] => [ref] "ref"
[ref.field++;] => [ref.f_field__arithmeticexpressions_ArithmeticExpressions_1Ref = Byte.m_valueOf__byte__java_lang_Byte($Primitives.narrowIntToByte(/**@type {Byte}*/ ($Casts.$to(ref.f_field__arithmeticexpressions_ArithmeticExpressions_1Ref, Byte)).m_byteValue__byte() + 1 | 0));] "arithmeticexpressions.ArithmeticExpressions.testCompoundBoxedTypes"
[int n = 1 + ref.field;] => [let n = 1 + /**@type {Byte}*/ ($Casts.$to(ref.f_field__arithmeticexpressions_ArithmeticExpressions_1Ref, Byte)).m_byteValue__byte() | 0;] "arithmeticexpressions.ArithmeticExpressions.testCompoundBoxedTypes"
[n] => [n] "n"
[getInteger] => [m_getInteger__java_lang_Integer]
[return null;] => [return null;] "arithmeticexpressions.ArithmeticExpressions.getInteger"
[testSideEffect] => [m_testSideEffect__void]
[getWithSideEffect().intField += 5;] => [let $qualifier = ArithmeticExpressions.m_getWithSideEffect__arithmeticexpressions_ArithmeticExpressions();] "arithmeticexpressions.ArithmeticExpressions.testSideEffect"
[getWithSideEffect().intField += 5;] => [$qualifier.f_intField__arithmeticexpressions_ArithmeticExpressions = $LongUtils.plus($qualifier.f_intField__arithmeticexpressions_ArithmeticExpressions, $Long.fromInt(5));] "arithmeticexpressions.ArithmeticExpressions.testSideEffect"
[getWithSideEffect] => [m_getWithSideEffect__arithmeticexpressions_ArithmeticExpressions]
[return null;] => [return null;] "arithmeticexpressions.ArithmeticExpressions.getWithSideEffect"
[testExtendedOperands] => [m_testExtendedOperands__void]
[Integer boxedInteger = 3;] => [let boxedInteger = Integer.m_valueOf__int__java_lang_Integer(3);] "arithmeticexpressions.ArithmeticExpressions.testExtendedOperands"
[boxedInteger] => [boxedInteger] "boxedInteger"
[int i;] => [let /** number */ i;] "arithmeticexpressions.ArithmeticExpressions.testExtendedOperands"
[i] => [i] "i"
[long l;] => [let /** !$Long */ l;] "arithmeticexpressions.ArithmeticExpressions.testExtendedOperands"
[l] => [l] "l"
[double d;] => [let /** number */ d;] "arithmeticexpressions.ArithmeticExpressions.testExtendedOperands"
[d] => [d] "d"
[l = 2 - boxedInteger - 2L;] => [l = $LongUtils.minus($Primitives.widenIntToLong(2 - boxedInteger.m_intValue__int() | 0), $Long.fromInt(2));] "arithmeticexpressions.ArithmeticExpressions.testExtendedOperands"
[l = 2 | boxedInteger | 2L;] => [l = $LongUtils.bitOr($Primitives.widenIntToLong(2 | boxedInteger.m_intValue__int()), $Long.fromInt(2));] "arithmeticexpressions.ArithmeticExpressions.testExtendedOperands"
[l = 1000000L * l * 60 * 60 * 24;] => [l = $LongUtils.times($LongUtils.times($LongUtils.times($LongUtils.times($Long.fromInt(1000000), l), $Long.fromInt(60)), $Long.fromInt(60)), $Long.fromInt(24));] "arithmeticexpressions.ArithmeticExpressions.testExtendedOperands"
[l = 24 * 60 * 60 * l * 1000000L;] => [l = $LongUtils.times($LongUtils.times($Primitives.widenIntToLong(Math.imul(Math.imul(24, 60), 60)), l), $Long.fromInt(1000000));] "arithmeticexpressions.ArithmeticExpressions.testExtendedOperands"
[d = l = i = 20;] => [d = $Primitives.widenLongToDouble(l = $Primitives.widenIntToLong(i = 20));] "arithmeticexpressions.ArithmeticExpressions.testExtendedOperands"
[l = boxedInteger = i = 20;] => [l = $Primitives.widenIntToLong((boxedInteger = Integer.m_valueOf__int__java_lang_Integer(i = 20)).m_intValue__int());] "arithmeticexpressions.ArithmeticExpressions.testExtendedOperands"
[l = i + boxedInteger + l + 20;] => [l = $LongUtils.plus($LongUtils.plus($Primitives.widenIntToLong(i + boxedInteger.m_intValue__int() | 0), l), $Long.fromInt(20));] "arithmeticexpressions.ArithmeticExpressions.testExtendedOperands"
[d = 20 + l + d;] => [d = $Primitives.widenLongToDouble($LongUtils.plus($Long.fromInt(20), l)) + d;] "arithmeticexpressions.ArithmeticExpressions.testExtendedOperands"
[testEffectivelyFinalVariableInAssignmentExpression] => [m_testEffectivelyFinalVariableInAssignmentExpression__boolean__void]
[condition] => [condition] "condition"
[long effectivelyFinal;] => [let /** !$Long */ effectivelyFinal;] "arithmeticexpressions.ArithmeticExpressions.testEffectivelyFinalVariableInAssignmentExpression"
[effectivelyFinal] => [effectivelyFinal] "effectivelyFinal"
[if (condition && ((effectivelyFinal = bar) != 0)) {
      long unused = effectivelyFinal;
    }] => [if (condition && $LongUtils.notEquals(effectivelyFinal = this.f_bar__arithmeticexpressions_ArithmeticExpressions, $Long.fromInt(0))) {
   let unused = effectivelyFinal;
  }] "arithmeticexpressions.ArithmeticExpressions.testEffectivelyFinalVariableInAssignmentExpression"
[long unused = effectivelyFinal;] => [let unused = effectivelyFinal;] "arithmeticexpressions.ArithmeticExpressions.testEffectivelyFinalVariableInAssignmentExpression"
[unused] => [unused] "unused"
[incrementCounter] => [m_incrementCounter__long]
[return ++counter;] => [return ArithmeticExpressions.f_counter__arithmeticexpressions_ArithmeticExpressions_ = $LongUtils.plus(ArithmeticExpressions.f_counter__arithmeticexpressions_ArithmeticExpressions_, $Long.fromInt(1));] "arithmeticexpressions.ArithmeticExpressions.incrementCounter"
[ArithmeticExpressions] => [$init__void_$p_arithmeticexpressions_ArithmeticExpressions]
[ArithmeticExpressions] => [let /** !$Long */ $value;] "arithmeticexpressions.ArithmeticExpressions.<init>"
[public long bar = foo++;] => [this.f_bar__arithmeticexpressions_ArithmeticExpressions = ($value = ArithmeticExpressions.$static_foo__arithmeticexpressions_ArithmeticExpressions, ArithmeticExpressions.$static_foo__arithmeticexpressions_ArithmeticExpressions = $LongUtils.plus(ArithmeticExpressions.$static_foo__arithmeticexpressions_ArithmeticExpressions, $Long.fromInt(1)), $value);] "arithmeticexpressions.ArithmeticExpressions.<init>"
[public static long one = 1;] => [get f_one__arithmeticexpressions_ArithmeticExpressions]
[public static long one = 1;] => [return (ArithmeticExpressions.$clinit(), ArithmeticExpressions.$static_one__arithmeticexpressions_ArithmeticExpressions);] "arithmeticexpressions.ArithmeticExpressions.<synthetic: getter>"
[public static long one = 1;] => [set f_one__arithmeticexpressions_ArithmeticExpressions]
[public static long one = 1;] => [(ArithmeticExpressions.$clinit(), ArithmeticExpressions.$static_one__arithmeticexpressions_ArithmeticExpressions = value);] "arithmeticexpressions.ArithmeticExpressions.<synthetic: setter>"
[public static long foo = one++;] => [get f_foo__arithmeticexpressions_ArithmeticExpressions]
[public static long foo = one++;] => [return (ArithmeticExpressions.$clinit(), ArithmeticExpressions.$static_foo__arithmeticexpressions_ArithmeticExpressions);] "arithmeticexpressions.ArithmeticExpressions.<synthetic: getter>"
[public static long foo = one++;] => [set f_foo__arithmeticexpressions_ArithmeticExpressions]
[public static long foo = one++;] => [(ArithmeticExpressions.$clinit(), ArithmeticExpressions.$static_foo__arithmeticexpressions_ArithmeticExpressions = value);] "arithmeticexpressions.ArithmeticExpressions.<synthetic: setter>"
[ArithmeticExpressions] => [$clinit]
[ArithmeticExpressions] => [let /** !$Long */ $value;] "arithmeticexpressions.ArithmeticExpressions.<clinit>"
[ArithmeticExpressions] => [ArithmeticExpressions.$clinit = () =>{};] "arithmeticexpressions.ArithmeticExpressions.<clinit>"
[ArithmeticExpressions] => [ArithmeticExpressions.$loadModules();] "arithmeticexpressions.ArithmeticExpressions.<clinit>"
[ArithmeticExpressions] => [j_l_Object.$clinit();] "arithmeticexpressions.ArithmeticExpressions.<clinit>"
[public static long one = 1;] => [ArithmeticExpressions.$static_one__arithmeticexpressions_ArithmeticExpressions = $Long.fromInt(1);] "arithmeticexpressions.ArithmeticExpressions.<clinit>"
[public static long foo = one++;] => [ArithmeticExpressions.$static_foo__arithmeticexpressions_ArithmeticExpressions = ($value = ArithmeticExpressions.$static_one__arithmeticexpressions_ArithmeticExpressions, ArithmeticExpressions.$static_one__arithmeticexpressions_ArithmeticExpressions = $LongUtils.plus(ArithmeticExpressions.$static_one__arithmeticexpressions_ArithmeticExpressions, $Long.fromInt(1)), $value);] "arithmeticexpressions.ArithmeticExpressions.<clinit>"
[private static long counter = 0;] => [ArithmeticExpressions.f_counter__arithmeticexpressions_ArithmeticExpressions_ = $Long.fromInt(0);] "arithmeticexpressions.ArithmeticExpressions.<clinit>"
[private static final float FLOAT_CONSTANT = 1.1f;] => [/**@const {number} @nodts*/
ArithmeticExpressions.f_FLOAT_CONSTANT__arithmeticexpressions_ArithmeticExpressions_ = 1.100000023841858;]
[FLOAT_CONSTANT] => [f_FLOAT_CONSTANT__arithmeticexpressions_ArithmeticExpressions_]
[private static final double DOUBLE_CONSTANT = FLOAT_CONSTANT;] => [/**@const {number} @nodts*/
ArithmeticExpressions.f_DOUBLE_CONSTANT__arithmeticexpressions_ArithmeticExpressions_ = 1.100000023841858;]
[DOUBLE_CONSTANT] => [f_DOUBLE_CONSTANT__arithmeticexpressions_ArithmeticExpressions_]
[private static final double DOUBLE_CONSTANT_WITH_ARITHMETIC = FLOAT_CONSTANT + FLOAT_CONSTANT;] => [/**@const {number} @nodts*/
ArithmeticExpressions.f_DOUBLE_CONSTANT_WITH_ARITHMETIC__arithmeticexpressions_ArithmeticExpressions_ = 2.200000047683716;]
[DOUBLE_CONSTANT_WITH_ARITHMETIC] => [f_DOUBLE_CONSTANT_WITH_ARITHMETIC__arithmeticexpressions_ArithmeticExpressions_]
[ArithmeticExpressions] => [/**@private {!$Long} @nodts*/
ArithmeticExpressions.$static_one__arithmeticexpressions_ArithmeticExpressions = $Long.fromInt(0);]
[ArithmeticExpressions] => [/**@private {!$Long} @nodts*/
ArithmeticExpressions.$static_foo__arithmeticexpressions_ArithmeticExpressions = $Long.fromInt(0);]
[ArithmeticExpressions] => [/**@type {!$Long} @nodts*/
ArithmeticExpressions.f_counter__arithmeticexpressions_ArithmeticExpressions_ = $Long.fromInt(0);]
[counter] => [f_counter__arithmeticexpressions_ArithmeticExpressions_]
