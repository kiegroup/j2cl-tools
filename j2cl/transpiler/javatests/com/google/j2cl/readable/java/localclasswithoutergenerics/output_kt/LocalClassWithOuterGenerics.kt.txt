// Generated from "localclasswithoutergenerics/LocalClassWithOuterGenerics.java"
@file:OptIn(ExperimentalObjCName::class, ExperimentalObjCRefinement::class)
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "REPEATED_BOUND",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER")

package localclasswithoutergenerics

import javaemul.lang.*
import kotlin.Any
import kotlin.OptIn
import kotlin.String
import kotlin.Suppress
import kotlin.experimental.ExperimentalObjCName
import kotlin.experimental.ExperimentalObjCRefinement
import kotlin.jvm.JvmStatic
import kotlin.native.HiddenFromObjC
import kotlin.native.ObjCName

@ObjCName("J2ktLocalclasswithoutergenericsLocalClassWithOuterGenerics", exact = true)
open class LocalClassWithOuterGenerics<A> {
 @ObjCName("J2ktLocalclasswithoutergenericsLocalClassWithOuterGenericsCompanion", exact = true)
 companion object {
  @JvmStatic
  @ObjCName("foo")
  fun <T> foo() {
   open class ___1Bar {
    @HiddenFromObjC
    open fun baz_pp_localclasswithoutergenerics(other: ___1Bar?) {}
   }
   val bar: ___1Bar? = ___1Bar()
   open class ___1Baz<S> {
    @HiddenFromObjC
    open fun qux_pp_localclasswithoutergenerics(foo: ___1Baz<S>?, bar: ___1Baz<T>?, baz: ___1Baz<String?>?) {}
   }
   val baz: ___1Baz<Any?>? = ___1Baz<Any?>()
  }
 }
}
