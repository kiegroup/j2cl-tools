// Generated from "localclasswithoutergenerics/LocalClassWithOuterGenerics.java"
@file:OptIn(ExperimentalObjCName::class)
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_ANONYMOUS_PARAMETER",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER",
 "REDUNDANT_ELSE_IN_WHEN")

package localclasswithoutergenerics

import javaemul.lang.*
import kotlin.Any
import kotlin.OptIn
import kotlin.String
import kotlin.Suppress
import kotlin.experimental.ExperimentalObjCName
import kotlin.jvm.JvmStatic
import kotlin.native.ObjCName

@ObjCName("J2ktLocalclasswithoutergenericsLocalClassWithOuterGenerics", exact = true)
open class LocalClassWithOuterGenerics<A> {
 @ObjCName("J2ktLocalclasswithoutergenericsLocalClassWithOuterGenericsCompanion", exact = true)
 companion object {
  @JvmStatic
  @ObjCName("foo")
  fun <T> foo() {
   open class Bar internal constructor() {
    internal open fun baz_pp_localclasswithoutergenerics(other: Bar?) {}
   }
   val bar: Bar? = Bar()
   open class Baz<S> internal constructor() {
    internal open fun qux_pp_localclasswithoutergenerics(foo: Baz<S>?, bar: Baz<T>?, baz: Baz<String?>?) {}
   }
   val baz: Baz<Any?>? = Baz<Any?>()
  }
 }
}
