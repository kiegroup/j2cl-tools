goog.module('booleanoperations.BooleanOperations$impl');

const j_l_Object = goog.require('java.lang.Object$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let $1Outer = goog.forwardDeclare('booleanoperations.BooleanOperations.$1Outer$impl');
let $Equality = goog.forwardDeclare('nativebootstrap.Equality$impl');

class BooleanOperations extends j_l_Object {
 /** @protected @nodts */
 constructor() {
  super();
 }
 /** @nodts @return {!BooleanOperations} */
 static $create__() {
  BooleanOperations.$clinit();
  let $instance = new BooleanOperations();
  $instance.$ctor__booleanoperations_BooleanOperations__void();
  return $instance;
 }
 /** @nodts */
 $ctor__booleanoperations_BooleanOperations__void() {
  this.$ctor__java_lang_Object__void();
 }
 /** @nodts */
 static m_acceptBoolean__boolean__void(/** boolean */ b) {}
 /** @nodts */
 m_test__void() {
  let ls = true;
  let rs = true;
  let r = true;
  let t = !!!true;
  r = ls == rs;
  r = ls != rs;
  r = !!(+ ls ^ + rs);
  r = !!(+ ls & + rs);
  r = !!(+ ls | + rs);
  r = ls && rs;
  r = ls || rs;
  r = ls = rs;
  r = !!(+ r ^ + rs);
  r = !!(+ r & + rs);
  r = !!(+ r | + rs);
  BooleanOperations.m_acceptBoolean__boolean__void(ls == rs);
  BooleanOperations.m_acceptBoolean__boolean__void(ls != rs);
  BooleanOperations.m_acceptBoolean__boolean__void(!!(+ ls ^ + rs));
  BooleanOperations.m_acceptBoolean__boolean__void(!!(+ ls & + rs));
  BooleanOperations.m_acceptBoolean__boolean__void(!!(+ ls | + rs));
  BooleanOperations.m_acceptBoolean__boolean__void(ls && rs);
  BooleanOperations.m_acceptBoolean__boolean__void(ls || rs);
  BooleanOperations.m_acceptBoolean__boolean__void(ls = rs);
  let /** ?boolean */ br;
  br = /**@type {boolean}*/ (ls == rs);
  br = /**@type {boolean}*/ (ls != rs);
  br = /**@type {boolean}*/ (!!(+ ls ^ + rs));
  br = /**@type {boolean}*/ (!!(+ ls & + rs));
  br = /**@type {boolean}*/ (!!(+ ls | + rs));
  br = /**@type {boolean}*/ (ls && rs);
  br = /**@type {boolean}*/ (ls || rs);
  br = /**@type {boolean}*/ (ls = rs);
  if (ls == rs) {
   r = true;
  }
  if (ls != rs) {
   r = true;
  }
  if (!!(+ ls ^ + rs)) {
   r = true;
  }
  if (!!(+ ls & + rs)) {
   r = true;
  }
  if (!!(+ ls | + rs)) {
   r = true;
  }
  if (ls && rs) {
   r = true;
  }
  if (ls || rs) {
   r = true;
  }
  let finalOuter = $1Outer.$create__booleanoperations_BooleanOperations(this);
  finalOuter.f_b__booleanoperations_BooleanOperations_1Outer = !!(+ finalOuter.f_b__booleanoperations_BooleanOperations_1Outer | + true);
  let outer = $1Outer.$create__booleanoperations_BooleanOperations(this);
  outer.f_b__booleanoperations_BooleanOperations_1Outer = !!(+ outer.f_b__booleanoperations_BooleanOperations_1Outer | + $Equality.$same(outer = null, null));
 }
 /** @nodts */
 static $clinit() {
  BooleanOperations.$clinit = () =>{};
  BooleanOperations.$loadModules();
  j_l_Object.$clinit();
 }
 /** @nodts @return {boolean} */
 static $isInstance(/** ? */ instance) {
  return instance instanceof BooleanOperations;
 }
 
 /** @nodts */
 static $loadModules() {
  $1Outer = goog.module.get('booleanoperations.BooleanOperations.$1Outer$impl');
  $Equality = goog.module.get('nativebootstrap.Equality$impl');
 }
}
$Util.$setClassMetadata(BooleanOperations, 'booleanoperations.BooleanOperations');

exports = BooleanOperations;

//# sourceMappingURL=BooleanOperations.js.map
