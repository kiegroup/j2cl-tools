package ${packageName};

import com.google.common.base.Preconditions;
import com.google.j2cl.common.visitor.ListVisitor;
import com.google.j2cl.common.visitor.Processor;
import com.google.j2cl.common.visitor.ProcessorError;

public class Visitor_${className} {

  public static ${visitableClass.TopClassName} visit(Processor processor, ${className} ${visitableClass.ParameterName}) {
    ${visitableClass.TopClassName} result = ${visitableClass.ParameterName};

    ProcessorPrivate processorImpl = (ProcessorPrivate) processor;
    pushContext(processor, ${visitableClass.ParameterName});

    try {
      if (processorImpl.shouldProcess${className}(${visitableClass.ParameterName})) {
        processorImpl.pushParent(${visitableClass.ParameterName});
        visitMembers(processorImpl, ${visitableClass.ParameterName});
        processorImpl.popParent();
      }
      result = processorImpl.postProcess${className}(${visitableClass.ParameterName});
    } catch (RuntimeException|Error e) {
      if (e instanceof ProcessorError) {
        throw e;
      }
      throw new ProcessorError(processorImpl.getCurrentContext(), ${visitableClass.ParameterName}, e);
    }

    popContext(processor, ${visitableClass.ParameterName});
    return result;
  }

  static void pushContext(Processor processor, ${className} ${visitableClass.ParameterName}) {
#if(${visitableClass.isTop()})
#else
    Visitor_${visitableClass.SuperclassName}.pushContext(processor, ${visitableClass.ParameterName});
#end
#if (${visitableClass.isContext()})
    ProcessorPrivate processorImpl = (ProcessorPrivate) processor;
    processorImpl.push${className}(${visitableClass.ParameterName});
#end
  }

  static void popContext(Processor processor, ${className} ${visitableClass.ParameterName}) {
#if (${visitableClass.isContext()})
    ProcessorPrivate processorImpl = (ProcessorPrivate) processor;
    Preconditions.checkState(processorImpl.pop${className}() == ${visitableClass.ParameterName});
#end
#if(${visitableClass.isTop()})
#else
    Visitor_${visitableClass.SuperclassName}.popContext(processor, ${visitableClass.ParameterName});
#end
  }

  static void visitMembers(Processor processor, ${className} ${visitableClass.ParameterName}) {
    ProcessorPrivate processorImpl = (ProcessorPrivate) processor;
#if(${visitableClass.isTop()})
#else
    Visitor_${visitableClass.SuperclassName}.visitMembers(processorImpl, ${visitableClass.ParameterName});
#end
#foreach($field in $fields)
#if(${field.isNullable()})
    if (${visitableClass.ParameterName}.${field.Name} != null) {
#end
#if(${field.isList()})
      ListVisitor.visit(
          ${visitableClass.ParameterName}.${field.Name},
          n -> (${field.ComponentTypeName}) n.acceptInternal(processorImpl));
#elseif (${field.isNullable()})
      ${visitableClass.ParameterName}.${field.Name} = (${field.TypeName}) ${visitableClass.ParameterName}.${field.Name}.acceptInternal(processorImpl);
#else
      ${visitableClass.ParameterName}.${field.Name} = (${field.TypeName}) Preconditions.checkNotNull(
      ${visitableClass.ParameterName}.${field.Name}.acceptInternal(processorImpl),
          "Field \"${field.Name}\" in class \"${className}\" cannot be null");
#end
#if(${field.isNullable()})
    }
#end
#end
  }
}
