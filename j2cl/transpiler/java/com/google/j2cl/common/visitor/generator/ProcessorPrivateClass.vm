package ${packageName};

import com.google.j2cl.common.visitor.Processor;
import java.util.ArrayDeque;
import java.util.Deque;
import java.util.function.Predicate;
import java.util.stream.Stream;

abstract class ProcessorPrivate implements Processor {

  private Deque<Object> stackOfContext = new ArrayDeque<Object>();

  final Object getCurrentContext() {
    return stackOfContext.peek();
  }

#foreach($clazz in $classes)
#if(${clazz.isContext()})

  private Deque<${clazz.SimpleName}> stackOf${clazz.SimpleName} = new ArrayDeque<>();
  final void push${clazz.SimpleName}(${clazz.SimpleName} ${clazz.ParameterName}) {
    stackOfContext.push(${clazz.ParameterName});
    stackOf${clazz.SimpleName}.push(${clazz.ParameterName});
  }
  final ${clazz.SimpleName} pop${clazz.SimpleName}() {
    stackOfContext.pop();
    return stackOf${clazz.SimpleName}.pop();
  }
  public final ${clazz.SimpleName} getCurrent${clazz.SimpleName}() {
    return stackOf${clazz.SimpleName}.peek();
  }
#end
#end

  private Deque<Object> stackOfParent = new ArrayDeque<Object>();

  public Stream<Object> getParents() {
    return stackOfParent.stream();
  }

  public Object getParent() {
    return stackOfParent.peek();
  }

  public Object getParent(Predicate<Object> predicate) {
    return getParents().filter(predicate).findFirst().orElse(null);
  }

  final void pushParent(Object p) {
    stackOfParent.push(p);
  }

  final void popParent() {
    stackOfParent.pop();
  }

#foreach($clazz in $classes)
  abstract boolean shouldProcess${clazz.SimpleName}(${clazz.SimpleName} ${clazz.ParameterName});
#end

#foreach($clazz in $classes)
  abstract ${clazz.TopClassName} postProcess${clazz.SimpleName}(${clazz.SimpleName} ${clazz.ParameterName});
#end
}
