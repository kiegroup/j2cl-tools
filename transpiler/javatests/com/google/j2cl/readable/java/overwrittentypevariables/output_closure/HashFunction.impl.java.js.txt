goog.module('overwrittentypevariables.HashFunction$impl');

const $Util = goog.require('nativebootstrap.Util$impl');
const MyFunction = goog.require('overwrittentypevariables.MyFunction$impl');

let $LambdaAdaptor = goog.forwardDeclare('overwrittentypevariables.HashFunction.$LambdaAdaptor$impl');

/**
 * @interface
 * @template T
 * @extends {MyFunction<T, ?string>}
 */
class HashFunction {
 /** @nodts @template T @return {HashFunction<T>} */
 static $adapt(/** ?function(T):?string */ fn) {
  HashFunction.$clinit();
  return /**@type {!$LambdaAdaptor<T>}*/ (new $LambdaAdaptor(fn));
 }
 /** @nodts */
 static $clinit() {
  HashFunction.$clinit = () =>{};
  HashFunction.$loadModules();
 }
 
 static $markImplementor(/** Function */ ctor) {
  MyFunction.$markImplementor(ctor);
  ctor.prototype.$implements__overwrittentypevariables_HashFunction = true;
 }
 /** @nodts @return {boolean} */
 static $isInstance(/** ? */ instance) {
  return instance != null && !!instance.$implements__overwrittentypevariables_HashFunction;
 }
 
 /** @nodts */
 static $loadModules() {
  $LambdaAdaptor = goog.module.get('overwrittentypevariables.HashFunction.$LambdaAdaptor$impl');
 }
}
HashFunction.$markImplementor(/**@type {Function}*/ (HashFunction));
$Util.$setClassMetadataForInterface(HashFunction, 'overwrittentypevariables.HashFunction');

exports = HashFunction;

//# sourceMappingURL=HashFunction.js.map
