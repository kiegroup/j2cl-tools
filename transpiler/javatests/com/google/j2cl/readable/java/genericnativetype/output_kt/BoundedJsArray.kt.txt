// Generated from "genericnativetype/BoundedJsArray.java"
@file:OptIn(ExperimentalObjCName::class)
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "REPEATED_BOUND",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER")

package genericnativetype

import javaemul.lang.*
import kotlin.Int
import kotlin.OptIn
import kotlin.Suppress
import kotlin.experimental.ExperimentalObjCName
import kotlin.jvm.JvmStatic
import kotlin.native.ObjCName

@ObjCName("J2ktGenericnativetypeBoundedJsArray", exact = true)
open class BoundedJsArray<V> {
 constructor(size: Int)

 @ObjCName("J2ktGenericnativetypeBoundedJsArrayCompanion", exact = true)
 companion object {
  @JvmStatic
  @ObjCName("create")
  fun <V_1> create(): BoundedJsArray<V_1>? {
   val array: BoundedJsArray<V_1>? = null
   return array
  }

  @JvmStatic
  @ObjCName("create")
  fun <V_1> create(
   @ObjCName("withInt") size: Int
  ): BoundedJsArray<V_1>? {
   val array: BoundedJsArray<V_1>? = BoundedJsArray<V_1>(size)
   return array
  }
 }
}
