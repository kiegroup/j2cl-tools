// Generated from "methodreferences/MethodReferences.java"
@file:OptIn(ExperimentalObjCName::class, ExperimentalObjCRefinement::class)
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "REPEATED_BOUND",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER")

package methodreferences

import javaemul.lang.*
import kotlin.Any
import kotlin.Array
import kotlin.Boolean
import kotlin.Double
import kotlin.Int
import kotlin.Number
import kotlin.OptIn
import kotlin.String
import kotlin.Suppress
import kotlin.arrayOfNulls
import kotlin.experimental.ExperimentalObjCName
import kotlin.experimental.ExperimentalObjCRefinement
import kotlin.jvm.JvmField
import kotlin.jvm.JvmStatic
import kotlin.native.HiddenFromObjC
import kotlin.native.ObjCName
import kotlin.run

@ObjCName("J2ktMethodreferencesMethodReferences", exact = true)
open class MethodReferences<T> {
 @ObjCName("isA")
 open fun isA(): Boolean? {
  return Boolean.valueOf(true)
 }

 @HiddenFromObjC
 open fun self_pp_methodreferences(): Any? {
  return this
 }

 @HiddenFromObjC
 open fun sameAs_pp_methodreferences(n: Number?): Boolean? {
  return Boolean.valueOf(false)
 }

 @HiddenFromObjC
 open fun main_pp_methodreferences() {
  var objectFactory: MethodReferences.Producer<Any?>? = MethodReferences.Producer<Any?> {
   return@Producer Any()
  }
  objectFactory = MethodReferences.Producer<Any?> {
   return@Producer MethodReferences.m_pp_methodreferences()
  }
  objectFactory = run {
   val ______q: MethodReferences<T> = MethodReferences<T>()
   MethodReferences.Producer<Any?> {
    return@Producer ______q!!.isA()
   }
  }
  val biFunction: MethodReferences.BiFunction<MethodReferences<T>?, Number?, Boolean?>? = MethodReferences.BiFunction<MethodReferences<T>?, Number?, Boolean?> { arg0: MethodReferences<T>?, arg1: Number? ->
   return@BiFunction arg0!!.sameAs_pp_methodreferences(arg1)
  }
  val functionWithParameters: MethodReferences.Function<Number?, Boolean?>? = MethodReferences.Function<Number?, Boolean?> { arg0_1: Number? ->
   return@Function this.sameAs_pp_methodreferences(arg0_1)
  }
  val objectPredicate: MethodReferences.Predicate<MethodReferences<T>?>? = MethodReferences.Predicate<MethodReferences<T>?> { arg0_2: MethodReferences<T>? ->
   return@Predicate arg0_2!!.isA()!!.booleanValue()
  }
  val objectCapturingOuterProducer: MethodReferences.Producer<MethodReferences<T>.ObjectCapturingOuter?>? = MethodReferences.Producer<MethodReferences<T>.ObjectCapturingOuter?> {
   return@Producer ObjectCapturingOuter()
  }
  val arrayProducer: MethodReferences.ArrayProducer<Any?>? = MethodReferences.ArrayProducer<Any?> { arg0_3: Int ->
   return@ArrayProducer arrayOfNulls<Double>(arg0_3) as Array<Any?>?
  }
  objectFactory = run {
   val ______q_1: MethodReferences<Any?> = MethodReferences<Any?>()
   MethodReferences.Producer<Any?> {
    return@Producer ______q_1!!.self_pp_methodreferences()
   }
  }
  val function: MethodReferences.Function<MethodReferences<T>?, Any?>? = MethodReferences.Function<MethodReferences<T>?, Any?> { arg0_4: MethodReferences<T>? ->
   return@Function arg0_4!!.self_pp_methodreferences()
  }
  val arrayFactory: MethodReferences.Function<Int?, Array<Any?>?>? = MethodReferences.Function<Int?, Array<Any?>?> { arg0_5: Int? ->
   return@Function arrayOfNulls<Any>(arg0_5!!.toInt())
  }
  val superToStringProducer: MethodReferences.Producer<String?>? = MethodReferences.Producer<String?> {
   return@Producer super.toString()
  }
  var jsobjectFactory: MethodReferences.JsProducer<Any?>? = MethodReferences.JsProducer<Any?> {
   return@JsProducer Any()
  }
  jsobjectFactory = MethodReferences.JsProducer<Any?> {
   return@JsProducer MethodReferences.m_pp_methodreferences()
  }
  jsobjectFactory = run {
   val ______q_2: MethodReferences<Any?> = MethodReferences<Any?>()
   MethodReferences.JsProducer<Any?> {
    return@JsProducer ______q_2!!.self_pp_methodreferences()
   }
  }
  val jsfunction: MethodReferences.JsFunctionInterface<MethodReferences<T>?, Any?>? = MethodReferences.JsFunctionInterface<MethodReferences<T>?, Any?> { arg0_6: MethodReferences<T>? ->
   return@JsFunctionInterface arg0_6!!.self_pp_methodreferences()
  }
  val jsarrayFactory: MethodReferences.JsFunctionInterface<Int?, Array<Any?>?>? = MethodReferences.JsFunctionInterface<Int?, Array<Any?>?> { arg0_7: Int? ->
   return@JsFunctionInterface arrayOfNulls<Any>(arg0_7!!.toInt())
  }
  val jsSuperToStringProducer: MethodReferences.JsProducer<String?>? = MethodReferences.JsProducer<String?> {
   return@JsProducer super.toString()
  }
  val jsbiFunction: MethodReferences.JsBiFunction<MethodReferences<T>?, Number?, Boolean?>? = MethodReferences.JsBiFunction<MethodReferences<T>?, Number?, Boolean?> { arg0_8: MethodReferences<T>?, arg1_1: Number? ->
   return@JsBiFunction arg0_8!!.sameAs_pp_methodreferences(arg1_1)
  }
  val jsFunctionWithParameters: MethodReferences.JsFunctionInterface<Number?, Boolean?>? = MethodReferences.JsFunctionInterface<Number?, Boolean?> { arg0_9: Number? ->
   return@JsFunctionInterface this.sameAs_pp_methodreferences(arg0_9)
  }
 }

 @ObjCName("J2ktMethodreferencesMethodReferencesCompanion", exact = true)
 companion object {
  @JvmStatic
  @HiddenFromObjC
  fun m_pp_methodreferences(): Any? {
   return Any()
  }

  @JvmField
  @HiddenFromObjC
  var staticStringProducer_pp_methodreferences: MethodReferences.Producer<String?>? = run {
   val ______q: Any? = MethodReferences.m_pp_methodreferences()
   MethodReferences.Producer<String?> {
    return@Producer ______q!!.toString()
   }
  }
 }

 fun interface Producer<T> {
  @ObjCName("produce")
  fun produce(): T
 }

 fun interface Predicate<T> {
  @ObjCName("apply")
  fun apply(
   @ObjCName("withId") parameter: T
  ): Boolean
 }

 fun interface ArrayProducer<T> {
  @ObjCName("produce")
  fun produce(
   @ObjCName("withInt") size: Int
  ): Array<T>?
 }

 open inner class ObjectCapturingOuter {
  @HiddenFromObjC
  open fun getMain_pp_methodreferences(): MethodReferences<T>? {
   return this@MethodReferences as MethodReferences<T>?
  }
 }

 fun interface Function<T, U> {
  @ObjCName("apply")
  fun apply(
   @ObjCName("withId") t: T
  ): U
 }

 fun interface BiFunction<T, U, V> {
  @ObjCName("apply")
  fun apply(
   @ObjCName("withId") t: T,
   @ObjCName("withId") u: U
  ): V
 }

 fun interface JsProducer<T> {
  @ObjCName("produce")
  fun produce(): T
 }

 fun interface JsFunctionInterface<T, U> {
  @ObjCName("apply")
  fun apply(
   @ObjCName("withId") t: T
  ): U
 }

 fun interface JsBiFunction<T, U, V> {
  @ObjCName("apply")
  fun apply(
   @ObjCName("withId") t: T,
   @ObjCName("withId") u: U
  ): V
 }
}
