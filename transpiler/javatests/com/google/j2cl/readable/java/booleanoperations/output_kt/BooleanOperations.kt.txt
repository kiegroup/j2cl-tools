// Generated from "booleanoperations/BooleanOperations.java"
@file:OptIn(ExperimentalObjCName::class, ExperimentalObjCRefinement::class)
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "REPEATED_BOUND",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER")

package booleanoperations

import javaemul.lang.*
import kotlin.Boolean
import kotlin.OptIn
import kotlin.Suppress
import kotlin.experimental.ExperimentalObjCName
import kotlin.experimental.ExperimentalObjCRefinement
import kotlin.jvm.JvmField
import kotlin.jvm.JvmStatic
import kotlin.native.HiddenFromObjC
import kotlin.native.ObjCName
import kotlin.run

@ObjCName("J2ktBooleanoperationsBooleanOperations", exact = true)
open class BooleanOperations {
 @ObjCName("test")
 open fun test() {
  var ls: Boolean = true
  val rs: Boolean = true
  var r: Boolean = true
  val t: Boolean = !!!true
  r = ls == rs
  r = ls != rs
  r = ls.xor(rs)
  r = ls.and(rs)
  r = ls.or(rs)
  r = ls && rs
  r = ls || rs
  r = run {
   ls = rs
   ls
  }
  r = r.xor(rs)
  r = r.and(rs)
  r = r.or(rs)
  BooleanOperations.acceptBoolean_private_2(ls == rs)
  BooleanOperations.acceptBoolean_private_2(ls != rs)
  BooleanOperations.acceptBoolean_private_2(ls.xor(rs))
  BooleanOperations.acceptBoolean_private_2(ls.and(rs))
  BooleanOperations.acceptBoolean_private_2(ls.or(rs))
  BooleanOperations.acceptBoolean_private_2(ls && rs)
  BooleanOperations.acceptBoolean_private_2(ls || rs)
  BooleanOperations.acceptBoolean_private_2(run {
   ls = rs
   ls
  })
  var br: Boolean? = null
  br = Boolean.valueOf(ls == rs)
  br = Boolean.valueOf(ls != rs)
  br = Boolean.valueOf(ls.xor(rs))
  br = Boolean.valueOf(ls.and(rs))
  br = Boolean.valueOf(ls.or(rs))
  br = Boolean.valueOf(ls && rs)
  br = Boolean.valueOf(ls || rs)
  br = Boolean.valueOf(run {
   ls = rs
   ls
  })
  if (ls == rs) {
   r = true
  }
  if (ls != rs) {
   r = true
  }
  if (ls.xor(rs)) {
   r = true
  }
  if (ls.and(rs)) {
   r = true
  }
  if (ls.or(rs)) {
   r = true
  }
  if (ls && rs) {
   r = true
  }
  if (ls || rs) {
   r = true
  }
  open class ___1Outer {
   @JvmField
   @HiddenFromObjC
   var b_pp_booleanoperations: Boolean = false

   open inner class Inner {
    init {
     this@___1Outer.b_pp_booleanoperations = this@___1Outer.b_pp_booleanoperations.or(true)
    }
   }
  }
  val finalOuter: ___1Outer? = ___1Outer()
  finalOuter!!.b_pp_booleanoperations = finalOuter!!.b_pp_booleanoperations.or(true)
  var outer: ___1Outer? = ___1Outer()
  outer!!.b_pp_booleanoperations = outer!!.b_pp_booleanoperations.or(run {
   outer = null
   outer
  } == null)
 }

 @ObjCName("J2ktBooleanoperationsBooleanOperationsCompanion", exact = true)
 companion object {
  @JvmStatic
  @HiddenFromObjC
  fun acceptBoolean_private_2(b: Boolean) {}
 }
}
