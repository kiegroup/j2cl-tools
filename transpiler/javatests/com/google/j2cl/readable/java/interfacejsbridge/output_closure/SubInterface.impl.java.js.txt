goog.module('interfacejsbridge.SubInterface$impl');

const MyInterface = goog.require('interfacejsbridge.MyInterface$impl');
const MyJsInterface = goog.require('interfacejsbridge.MyJsInterface$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let $LambdaAdaptor = goog.forwardDeclare('interfacejsbridge.SubInterface.$LambdaAdaptor$impl');

/**
 * @interface
 * @extends {MyJsInterface}
 * @extends {MyInterface}
 */
class SubInterface {
 /** @abstract @override @return {number} */
 foo(/** number */ a) {}
 /** @nodts @return {SubInterface} */
 static $adapt(/** ?function(number):number */ fn) {
  SubInterface.$clinit();
  return new $LambdaAdaptor(fn);
 }
 /** @nodts */
 static $clinit() {
  SubInterface.$clinit = () =>{};
  SubInterface.$loadModules();
 }
 
 static $markImplementor(/** Function */ ctor) {
  MyJsInterface.$markImplementor(ctor);
  MyInterface.$markImplementor(ctor);
  ctor.prototype.$implements__interfacejsbridge_SubInterface = true;
 }
 /** @nodts @return {boolean} */
 static $isInstance(/** ? */ instance) {
  return instance != null && !!instance.$implements__interfacejsbridge_SubInterface;
 }
 
 /** @nodts */
 static $loadModules() {
  $LambdaAdaptor = goog.module.get('interfacejsbridge.SubInterface.$LambdaAdaptor$impl');
 }
}
SubInterface.$markImplementor(/**@type {Function}*/ (SubInterface));
$Util.$setClassMetadataForInterface(SubInterface, 'interfacejsbridge.SubInterface');

exports = SubInterface;

//# sourceMappingURL=SubInterface.js.map
