[Number] => [importglobaljstypes_Number]
[Number] => [constructor]
[Number] => [super();] "importglobaljstypes.Number.<synthetic: ctor_js>"
[Number] => [$create__]
[Number] => [importglobaljstypes_Number.$clinit();] "importglobaljstypes.Number.<synthetic: ctor_create>"
[Number] => [let $instance = new importglobaljstypes_Number();] "importglobaljstypes.Number.<synthetic: ctor_create>"
[Number] => [$instance.$ctor__importglobaljstypes_Number__void();] "importglobaljstypes.Number.<synthetic: ctor_create>"
[Number] => [return $instance;] "importglobaljstypes.Number.<synthetic: ctor_create>"
[Number] => [$ctor__importglobaljstypes_Number__void]
[Number] => [this.$ctor__java_lang_Object__void();] "importglobaljstypes.Number.<init>"
[test] => [m_test__double__boolean]
[x] => [x] "x"
[{
    return Number.fun(x);
  }] => [importglobaljstypes_Number.$clinit();] "importglobaljstypes.Number.test"
[return Number.fun(x);] => [return Number.isInteger(x);] "importglobaljstypes.Number.test"
[fromCharCode] => [m_fromCharCode__arrayOf_int__java_lang_String]
[array] => [array] "array"
[{
    return getFromCharCodeFunction().apply(null, array);
  }] => [importglobaljstypes_Number.$clinit();] "importglobaljstypes.Number.fromCharCode"
[return getFromCharCodeFunction().apply(null, array);] => [return /**@type {?string}*/ ($Casts.$to(String.fromCharCode.apply(null, array), j_l_String));] "importglobaljstypes.Number.fromCharCode"
[testJsDocForLiteralType] => [m_testJsDocForLiteralType__importglobaljstypes_Number_MyLiteralType__importglobaljstypes_Number_MyLiteralType]
[a] => [a] "a"
[return a;] => [return a;] "importglobaljstypes.Number.testJsDocForLiteralType"
[Number] => [$clinit]
[Number] => [importglobaljstypes_Number.$clinit = () =>{};] "importglobaljstypes.Number.<clinit>"
[Number] => [importglobaljstypes_Number.$loadModules();] "importglobaljstypes.Number.<clinit>"
[Number] => [j_l_Object.$clinit();] "importglobaljstypes.Number.<clinit>"
