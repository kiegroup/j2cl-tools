// Generated from "innerclasswithconstructor/InnerClassWithConstructor.java"
@file:OptIn(ExperimentalObjCName::class)
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "REPEATED_BOUND",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER")

package innerclasswithconstructor

import javaemul.lang.*
import kotlin.Int
import kotlin.OptIn
import kotlin.Suppress
import kotlin.experimental.ExperimentalObjCName
import kotlin.jvm.JvmField
import kotlin.native.ObjCName

@ObjCName("J2ktInnerclasswithconstructorInnerClassWithConstructor", exact = true)
open class InnerClassWithConstructor {
 @JvmField
 @ObjCName("a_")
 var a: Int = 0

 open inner class InnerClass {
  @JvmField
  var b: Int = 0

  constructor(
   @ObjCName("Int") b: Int
  ) {
   this.b = this@InnerClassWithConstructor.a + b
  }

  constructor(): this(this@InnerClassWithConstructor.a)
 }

 open inner class InnerClassWithSingleConstructor(
  @ObjCName("Int") b: Int
 ) {
  @JvmField
  var b: Int = 0

  init {
   this.b = this@InnerClassWithConstructor.a + b
  }
 }
}
