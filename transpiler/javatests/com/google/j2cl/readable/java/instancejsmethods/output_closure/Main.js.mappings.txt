[Main] => [Main]
[Main] => [constructor]
[Main] => [super();] "instancejsmethods.Main.<synthetic: ctor_js>"
[Main] => [$create__]
[Main] => [Main.$clinit();] "instancejsmethods.Main.<synthetic: ctor_create>"
[Main] => [let $instance = new Main();] "instancejsmethods.Main.<synthetic: ctor_create>"
[Main] => [$instance.$ctor__instancejsmethods_Main__void();] "instancejsmethods.Main.<synthetic: ctor_create>"
[Main] => [return $instance;] "instancejsmethods.Main.<synthetic: ctor_create>"
[Main] => [$ctor__instancejsmethods_Main__void]
[Main] => [this.$ctor__java_lang_Object__void();] "instancejsmethods.Main.<init>"
[testCallBySuperParent] => [m_testCallBySuperParent__void]
[SuperParent sp = new SuperParent();] => [let sp = SuperParent.$create__();] "instancejsmethods.Main.testCallBySuperParent"
[sp] => [sp] "sp"
[SuperParent p = new Parent();] => [let p = Parent.$create__();] "instancejsmethods.Main.testCallBySuperParent"
[p] => [p] "p"
[SuperParent c = new Child();] => [let c = Child.$create__();] "instancejsmethods.Main.testCallBySuperParent"
[c] => [c] "c"
[Parent pp = new Parent();] => [let pp = Parent.$create__();] "instancejsmethods.Main.testCallBySuperParent"
[pp] => [pp] "pp"
[Parent cc = new Child();] => [let cc = Child.$create__();] "instancejsmethods.Main.testCallBySuperParent"
[cc] => [cc] "cc"
[MyInterface intf = new Child();] => [let intf = Child.$create__();] "instancejsmethods.Main.testCallBySuperParent"
[intf] => [intf] "intf"
[sp.fun(12, 35);] => [sp.m_fun__int__int__int(12, 35);] "instancejsmethods.Main.testCallBySuperParent"
[sp.bar(6, 7);] => [sp.m_bar__int__int__int(6, 7);] "instancejsmethods.Main.testCallBySuperParent"
[p.fun(12, 35);] => [p.m_fun__int__int__int(12, 35);] "instancejsmethods.Main.testCallBySuperParent"
[p.bar(6, 7);] => [p.m_bar__int__int__int(6, 7);] "instancejsmethods.Main.testCallBySuperParent"
[c.fun(12, 35);] => [c.m_fun__int__int__int(12, 35);] "instancejsmethods.Main.testCallBySuperParent"
[c.bar(6, 7);] => [c.m_bar__int__int__int(6, 7);] "instancejsmethods.Main.testCallBySuperParent"
[pp.foo(1);] => [pp.myFoo(1);] "instancejsmethods.Main.testCallBySuperParent"
[cc.foo(1);] => [cc.myFoo(1);] "instancejsmethods.Main.testCallBySuperParent"
[intf.intfFoo();] => [intf.m_intfFoo__int();] "instancejsmethods.Main.testCallBySuperParent"
[testCallByConcreteType] => [m_testCallByConcreteType__void]
[{
    SuperParent sp = new SuperParent();
...    c.intfFoo();
  }] => [Main.$clinit();] "instancejsmethods.Main.testCallByConcreteType"
[SuperParent sp = new SuperParent();] => [let sp = SuperParent.$create__();] "instancejsmethods.Main.testCallByConcreteType"
[sp] => [sp] "sp"
[Parent p = new Parent();] => [let p = Parent.$create__();] "instancejsmethods.Main.testCallByConcreteType"
[p] => [p] "p"
[Child c = new Child();] => [let c = Child.$create__();] "instancejsmethods.Main.testCallByConcreteType"
[c] => [c] "c"
[sp.fun(12, 35);] => [sp.m_fun__int__int__int(12, 35);] "instancejsmethods.Main.testCallByConcreteType"
[sp.bar(6, 7);] => [sp.m_bar__int__int__int(6, 7);] "instancejsmethods.Main.testCallByConcreteType"
[p.fun(12, 35);] => [p.sum(12, 35);] "instancejsmethods.Main.testCallByConcreteType"
[p.bar(6, 7);] => [p.bar(6, 7);] "instancejsmethods.Main.testCallByConcreteType"
[p.foo(1);] => [p.myFoo(1);] "instancejsmethods.Main.testCallByConcreteType"
[c.fun(12, 35);] => [c.sum(12, 35);] "instancejsmethods.Main.testCallByConcreteType"
[c.bar(6, 7);] => [c.bar(6, 7);] "instancejsmethods.Main.testCallByConcreteType"
[c.foo(1);] => [c.myFoo(1);] "instancejsmethods.Main.testCallByConcreteType"
[c.intfFoo();] => [c.intfFoo();] "instancejsmethods.Main.testCallByConcreteType"
[Main] => [$clinit]
[Main] => [Main.$clinit = () =>{};] "instancejsmethods.Main.<clinit>"
[Main] => [Main.$loadModules();] "instancejsmethods.Main.<clinit>"
[Main] => [j_l_Object.$clinit();] "instancejsmethods.Main.<clinit>"
