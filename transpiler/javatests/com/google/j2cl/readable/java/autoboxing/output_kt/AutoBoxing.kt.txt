// Generated from "autoboxing/AutoBoxing.java"
@file:OptIn(ExperimentalObjCName::class, ExperimentalObjCRefinement::class)
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "REPEATED_BOUND",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER")

package autoboxing

import javaemul.lang.*
import java.lang.Void
import kotlin.Any
import kotlin.Array
import kotlin.Boolean
import kotlin.Byte
import kotlin.Char
import kotlin.Comparable
import kotlin.Double
import kotlin.Float
import kotlin.Int
import kotlin.Long
import kotlin.OptIn
import kotlin.Short
import kotlin.Suppress
import kotlin.assert
import kotlin.collections.MutableIterable
import kotlin.experimental.ExperimentalObjCName
import kotlin.experimental.ExperimentalObjCRefinement
import kotlin.jvm.JvmStatic
import kotlin.native.HiddenFromObjC
import kotlin.native.ObjCName
import kotlin.run

@ObjCName("J2ktAutoboxingAutoBoxing", exact = true)
open class AutoBoxing {
 @ObjCName("box")
 open fun box(
  @ObjCName("withBoolean") b: Boolean
 ): Boolean? {
  return Boolean.valueOf(b)
 }

 @ObjCName("box")
 open fun box(
  @ObjCName("withDouble") d: Double
 ): Double? {
  return Double.valueOf(d)
 }

 @ObjCName("box")
 open fun box(
  @ObjCName("withByte") b: Byte
 ): Byte? {
  return Byte.valueOf(b)
 }

 @ObjCName("box")
 open fun box(
  @ObjCName("withFloat") f: Float
 ): Float? {
  return Float.valueOf(f)
 }

 @ObjCName("box")
 open fun box(
  @ObjCName("withInt") i: Int
 ): Int? {
  return Int.valueOf(i)
 }

 @ObjCName("box")
 open fun box(
  @ObjCName("withLong") l: Long
 ): Long? {
  return Long.valueOf(l)
 }

 @ObjCName("box")
 open fun box(
  @ObjCName("withShort") s: Short
 ): Short? {
  return Short.valueOf(s)
 }

 @ObjCName("box")
 open fun box(
  @ObjCName("withChar") c: Char
 ): Char? {
  return Char.valueOf(c)
 }

 @ObjCName("unbox")
 open fun unbox(
  @ObjCName("withJavaLangBoolean") b: Boolean?
 ): Boolean {
  return b!!.booleanValue()
 }

 @ObjCName("unbox")
 open fun unbox(
  @ObjCName("withJavaLangDouble") d: Double?
 ): Double {
  return d!!.toDouble()
 }

 @ObjCName("unbox")
 open fun unbox(
  @ObjCName("withJavaLangByte") b: Byte?
 ): Byte {
  return b!!.toByte()
 }

 @ObjCName("unbox")
 open fun unbox(
  @ObjCName("withJavaLangFloat") f: Float?
 ): Float {
  return f!!.toFloat()
 }

 @ObjCName("unbox")
 open fun unbox(
  @ObjCName("withJavaLangInteger") i: Int?
 ): Int {
  return i!!.toInt()
 }

 @ObjCName("unbox")
 open fun unbox(
  @ObjCName("withJavaLangLong") l: Long?
 ): Long {
  return l!!.toLong()
 }

 @ObjCName("unbox")
 open fun unbox(
  @ObjCName("withJavaLangShort") s: Short?
 ): Short {
  return s!!.toShort()
 }

 @ObjCName("unbox")
 open fun unbox(
  @ObjCName("withJavaLangCharacter") c: Char?
 ): Char {
  return c!!.toChar()
 }

 @ObjCName("takesAndReturnsPrimitiveDouble")
 open fun takesAndReturnsPrimitiveDouble(
  @ObjCName("withDouble") d: Double
 ): Double {
  return d
 }

 @ObjCName("takesAndReturnsVoid")
 open fun takesAndReturnsVoid(
  @ObjCName("withJavaLangVoid") v: Void?
 ): Void? {
  return null
 }

 @ObjCName("takesFloatVarArgs")
 open fun takesFloatVarArgs(
  vararg @ObjCName("withJavaLangFloatArray") elements: Float?
 ) {
  val elements_1: Array<Float?>? = elements as Array<Float?>?
 }

 @ObjCName("takesObjectAndReturnsPrimitiveDouble")
 open fun takesObjectAndReturnsPrimitiveDouble(
  @ObjCName("withId") o: Any?
 ): Double {
  return o as Double
 }

 @ObjCName("sumWithoutBoxing")
 open fun sumWithoutBoxing(
  vararg @ObjCName("withNSObjectArray") numbers: Any?
 ): Double {
  val numbers_1: Array<Any?>? = numbers as Array<Any?>?
  var sum: Double = 0.0
  for (number in numbers_1!!) {
   val number_1: Any? = number
   sum = sum + (number_1 as Double?)!!.toDouble()
  }
  return sum
 }

 @ObjCName("sumWithoutBoxingJsVarargs")
 open fun sumWithoutBoxingJsVarargs(
  vararg @ObjCName("withNSObjectArray") numbers: Any?
 ): Double {
  val numbers_1: Array<Any?>? = numbers as Array<Any?>?
  var sum: Double = 0.0
  for (number in numbers_1!!) {
   val number_1: Any? = number
   sum = sum + (number_1 as Double?)!!.toDouble()
  }
  return sum
 }

 @ObjCName("sumWithUnboxing")
 open fun sumWithUnboxing(
  @ObjCName("withJavaLangIterable") boxedDoubles: MutableIterable<Double?>?
 ): Double {
  var sum: Double = 0.0
  for (d in boxedDoubles!!) {
   val d_1: Double = d!!
   sum = sum + d_1
  }
  return sum
 }

 @ObjCName("testBoxing")
 open fun testBoxing() {
  var bool: Boolean = true
  var d: Double = 2.2
  var b: Byte = 1.toByte()
  var f: Float = 1.1f
  var i: Int = 1
  var l: Long = 2L
  var s: Short = 1.toShort()
  var c: Char = 'a'
  var boxBool: Boolean? = Boolean.valueOf(bool)
  var boxD: Double? = Double.valueOf(d)
  var boxB: Byte? = Byte.valueOf(b)
  var boxF: Float? = Float.valueOf(f)
  var boxI: Int? = Int.valueOf(i)
  var boxL: Long? = Long.valueOf(l)
  var boxS: Short? = Short.valueOf(s)
  var boxC: Char? = Char.valueOf(c)
  boxBool = Boolean.valueOf(true)
  boxD = Double.valueOf(2.2)
  boxB = Byte.valueOf(1.toByte())
  boxF = Float.valueOf(1.1f)
  boxI = Int.valueOf(1)
  boxL = Long.valueOf(2L)
  boxS = Short.valueOf(1.toShort())
  boxC = Char.valueOf('\u0001')
  boxC = Char.valueOf('a')
  bool = this.unbox(Boolean.valueOf(bool) as Boolean?)
  d = this.unbox(Double.valueOf(d) as Double?)
  b = this.unbox(Byte.valueOf(b) as Byte?)
  f = this.unbox(Float.valueOf(f) as Float?)
  i = this.unbox(Int.valueOf(i) as Int?)
  l = this.unbox(Long.valueOf(l) as Long?)
  s = this.unbox(Short.valueOf(s) as Short?)
  c = this.unbox(Char.valueOf(c) as Char?)
  var unusedDouble: Double = this.takesObjectAndReturnsPrimitiveDouble(4)
  unusedDouble = this.sumWithoutBoxing(1, 2.2, 1.toByte(), 1.toShort(), 2.2.toFloat())
  unusedDouble = this.sumWithoutBoxingJsVarargs(1, 2.2, 1.toByte(), 1.toShort(), 2.2.toFloat())
  this.takesFloatVarArgs(Float.valueOf(1.1f), Float.valueOf('a'.code.toFloat()), Float.valueOf(2.2.toFloat()))
  var o: Any? = null
  o = Double.valueOf(2.2)
  o = Float.valueOf(1.1f)
  o = Int.valueOf(1)
  o = Char.valueOf('a')
  boxBool = Boolean.valueOf(boxBool!!.booleanValue() && boxBool!!.booleanValue())
  boxD = Double.valueOf(boxD!!.toDouble() + boxD!!.toDouble())
  boxI = Int.valueOf(boxI!!.toInt() / boxI!!.toInt())
  boxL = Long.valueOf(boxL!!.toLong() / boxL!!.toLong())
  boxBool = Boolean.valueOf(!boxBool!!.booleanValue())
  boxI = Int.valueOf(+ boxI!!.toInt())
  boxI = Int.valueOf(- boxI!!.toInt())
  boxI = Int.valueOf(boxI!!.toInt().shl(boxI!!.toInt()))
  boxI = Int.valueOf(boxI!!.toInt().shl(boxL!!.toLong().toInt()))
  boxL = Long.valueOf(boxL!!.toLong().shl(boxI!!.toInt()))
  boxL = Long.valueOf(boxL!!.toLong().shl(boxL!!.toLong().toInt()))
  o = Int.valueOf(15)
 }

 @ObjCName("testUnboxing")
 open fun testUnboxing() {
  var boxBool: Boolean? = Boolean(true)
  var boxD: Double? = Double(2.2)
  var boxB: Byte? = Byte(1.toByte())
  var boxF: Float? = Float(1.1f)
  var boxI: Int? = Int(1)
  var boxL: Long? = Long(1L)
  var boxS: Short? = Short(1.toShort())
  var boxC: Char? = Char('a')
  var bool: Boolean = boxBool!!.booleanValue()
  var d: Double = boxD!!.toDouble()
  val b: Byte = boxB!!.toByte()
  var f: Float = boxF!!.toFloat()
  var i: Int = boxI!!.toInt()
  var l: Long = boxL!!.toLong()
  val s: Short = boxS!!.toShort()
  val c: Char = boxC!!.toChar()
  boxBool = this.box(boxBool!!.booleanValue())
  boxD = this.box(boxD!!.toDouble())
  boxB = this.box(boxB!!.toByte())
  boxF = this.box(boxF!!.toFloat())
  boxI = this.box(boxI!!.toInt())
  boxL = this.box(boxL!!.toLong())
  boxS = this.box(boxS!!.toShort())
  boxC = this.box(boxC!!.toChar())
  d = boxB!!.toByte().toDouble()
  d = boxF!!.toFloat().toDouble()
  d = boxI!!.toInt().toDouble()
  d = boxL!!.toLong().toDouble()
  d = boxS!!.toShort().toDouble()
  d = boxC!!.toChar().code.toDouble()
  this.takesAndReturnsPrimitiveDouble(boxB!!.toByte().toDouble())
  this.takesAndReturnsPrimitiveDouble(boxF!!.toFloat().toDouble())
  this.takesAndReturnsPrimitiveDouble(boxI!!.toInt().toDouble())
  this.takesAndReturnsPrimitiveDouble(boxL!!.toLong().toDouble())
  this.takesAndReturnsPrimitiveDouble(boxS!!.toShort().toDouble())
  this.takesAndReturnsPrimitiveDouble(boxC!!.toChar().code.toDouble())
  val v: Void? = this.takesAndReturnsVoid(this.takesAndReturnsVoid(null))
  bool = boxBool!!.booleanValue() && boxBool!!.booleanValue()
  d = boxD!!.toDouble() + boxD!!.toDouble()
  f = boxF!!.toFloat() - boxF!!.toFloat()
  i = boxI!!.toInt() * boxI!!.toInt()
  l = boxL!!.toLong() / boxL!!.toLong()
  bool = !boxBool!!.booleanValue()
  i = + boxI!!.toInt()
  i = - boxI!!.toInt()
  i = boxI!!.toInt().inv()
  boxD = Double.valueOf(- boxD!!.toDouble())
  boxI = Int.valueOf(- boxI!!.toInt())
  when (boxI!!.toInt()) {
   else -> {}
  }
  i = i + run {
   boxI = Int.valueOf(boxI!!.toInt() + run {
    i = i + boxI!!.toInt()
    i
   })
   boxI
  }!!.toInt()
  i = i.shl(boxI!!.toInt())
  i = i.shl(boxL!!.toLong().toInt())
  l = l.shl(boxI!!.toInt())
  l = l.shl(boxL!!.toLong().toInt())
 }

 @ObjCName("testUnboxingBoolean")
 open fun testUnboxingBoolean() {
  var boxB1: Boolean? = Boolean(true)
  val boxB2: Boolean? = Boolean(false)
  var br: Boolean = false
  var boxr: Boolean = false
  boxr = boxB1 === boxB2
  br = boxB1 === boxB2
  assert(boxr)
  assert(br)
  boxr = boxB1 !== boxB2
  br = boxB1 !== boxB2
  assert(boxr)
  assert(br)
  boxr = boxB1!!.booleanValue().xor(boxB2!!.booleanValue())
  br = boxB1!!.booleanValue().xor(boxB2!!.booleanValue())
  assert(boxr)
  assert(br)
  boxr = boxB1!!.booleanValue().and(boxB2!!.booleanValue())
  br = boxB1!!.booleanValue().and(boxB2!!.booleanValue())
  assert(boxr)
  assert(br)
  boxr = boxB1!!.booleanValue().or(boxB2!!.booleanValue())
  br = boxB1!!.booleanValue().or(boxB2!!.booleanValue())
  assert(boxr)
  assert(br)
  boxr = boxB1!!.booleanValue() && boxB2!!.booleanValue()
  br = boxB1!!.booleanValue() && boxB2!!.booleanValue()
  assert(boxr)
  assert(br)
  boxr = boxB1!!.booleanValue() || boxB2!!.booleanValue()
  br = boxB1!!.booleanValue() || boxB2!!.booleanValue()
  assert(boxr)
  assert(br)
  boxr = run {
   boxB1 = boxB2
   boxB1
  }!!.booleanValue()
  br = run {
   boxB1 = boxB2
   boxB1
  }!!.booleanValue()
  assert(boxr)
  assert(br)
  boxr = run {
   boxB1 = Boolean.valueOf(boxB1!!.booleanValue().and(boxB2!!.booleanValue()))
   boxB1
  }!!.booleanValue()
  br = run {
   boxB1 = Boolean.valueOf(boxB1!!.booleanValue().and(boxB2!!.booleanValue()))
   boxB1
  }!!.booleanValue()
  assert(boxr)
  assert(br)
  boxr = run {
   boxB1 = Boolean.valueOf(boxB1!!.booleanValue().or(boxB2!!.booleanValue()))
   boxB1
  }!!.booleanValue()
  br = run {
   boxB1 = Boolean.valueOf(boxB1!!.booleanValue().or(boxB2!!.booleanValue()))
   boxB1
  }!!.booleanValue()
  assert(boxr)
  assert(br)
  boxr = run {
   boxB1 = Boolean.valueOf(boxB1!!.booleanValue().xor(boxB2!!.booleanValue()))
   boxB1
  }!!.booleanValue()
  br = run {
   boxB1 = Boolean.valueOf(boxB1!!.booleanValue().xor(boxB2!!.booleanValue()))
   boxB1
  }!!.booleanValue()
  assert(boxr)
  assert(br)
  var boxB: Boolean? = null
  boxB = Boolean.valueOf(!boxB!!.booleanValue())
  boxB = Boolean.valueOf(boxB!!.booleanValue() && boxB!!.booleanValue())
  boxB = if (boxB!!.booleanValue()) boxB else boxB
  if (boxB!!.booleanValue()) {}
  var b: Boolean = false
  b = b.or(run {
   boxB = Boolean.valueOf(boxB!!.booleanValue().or(run {
    b = b.or(boxB!!.booleanValue())
    b
   }))
   boxB
  }!!.booleanValue())
 }

 @ObjCName("testUnboxingEquality")
 open fun testUnboxingEquality() {
  val boxB: Boolean? = Boolean(true)
  val b: Boolean = false
  assert(boxB === boxB)
  assert(boxB!!.booleanValue() == b)
  assert(b != b)
  assert(b != boxB!!.booleanValue())
  val boxI: Int? = Int(1)
  val i: Int = 1
  assert(boxI === boxI)
  assert(boxI!!.toInt() == i)
  assert(i != i)
  assert(i != boxI!!.toInt())
 }

 @ObjCName("testAssertStatement")
 open fun testAssertStatement() {
  val boxB: Boolean? = Boolean(true)
  val b: Boolean = true
  assert(boxB!!.booleanValue())
  assert(b)
 }

 @ObjCName("testUnbox_withCast")
 open fun testUnbox_withCast() {
  open class ___1Supplier<T> {
   @HiddenFromObjC
   open fun get_pp_autoboxing(): T {
    return null as T
   }
  }
  val supplier: ___1Supplier<Int?>? = ___1Supplier<Int?>()
  val i: Int = supplier!!.get_pp_autoboxing()!!.toInt()
 }

 @ObjCName("J2ktAutoboxingAutoBoxingCompanion", exact = true)
 companion object {
  @ObjCName("COMPILE_TIME_CONSTANT_")
  const val COMPILE_TIME_CONSTANT: Float = 1.1f

  @JvmStatic
  @ObjCName("testUnboxingFromTypeVariable")
  fun <T: Long?> testUnboxingFromTypeVariable() {
   var n: T? = Long.valueOf(10L) as T
   var l: Long = n!!.toLong()
   assert(l == 10L)
   n = Long.valueOf(n!!.toLong() + 1L) as T?
   n = Long.valueOf(n!!.toLong() + 1L) as T?
   n = run {
    val ___value: T? = n
    n = Long.valueOf(n!!.toLong() + 1L) as T?
    ___value
   }
   n = run {
    n = Long.valueOf(n!!.toLong() + 1L) as T?
    n
   }
   open class ___1Local<T: Long?> {
    @HiddenFromObjC
    open fun toLong_pp_autoboxing(l: T): Long {
     assert(l!!.equals(Long.valueOf(11L) as Any?))
     return l!!.toLong()
    }
   }
   l = ___1Local<Long?>().toLong_pp_autoboxing(Long.valueOf(11L))
   assert(l == 11L)
  }

  @JvmStatic
  @ObjCName("testUnboxingFromIntersectionType")
  fun <T> testUnboxingFromIntersectionType() where T: Long?, T: Comparable<Long>? {
   var n: T? = Long.valueOf(10L) as T
   var l: Long = n!!.toLong()
   assert(l == 10L)
   n = Long.valueOf(n!!.toLong() + 1L) as T?
   n = Long.valueOf(n!!.toLong() + 1L) as T?
   n = run {
    val ___value: T? = n
    n = Long.valueOf(n!!.toLong() + 1L) as T?
    ___value
   }
   n = run {
    n = Long.valueOf(n!!.toLong() + 1L) as T?
    n
   }
   open class ___2Local<T> where T: Long?, T: Comparable<Long>?, T: Long?, T: Comparable<Long>? {
    @HiddenFromObjC
    open fun toLong_pp_autoboxing(l: T): Long {
     assert(l!!.equals(Long.valueOf(11L) as Any?))
     return l!!.toLong()
    }
   }
   l = ___2Local<Long?>().toLong_pp_autoboxing(Long.valueOf(11L))
   assert(l == 11L)
   val i: Int = Int.valueOf(10)!!.toInt()
  }
 }
}
