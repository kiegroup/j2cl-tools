[InstanceofExpressions] => [InstanceofExpressions]
[InstanceofExpressions] => [constructor]
[InstanceofExpressions] => [super();] "instanceofexpression.InstanceofExpressions.<synthetic: ctor_js>"
[InstanceofExpressions] => [$create__]
[InstanceofExpressions] => [InstanceofExpressions.$clinit();] "instanceofexpression.InstanceofExpressions.<synthetic: ctor_create>"
[InstanceofExpressions] => [let $instance = new InstanceofExpressions();] "instanceofexpression.InstanceofExpressions.<synthetic: ctor_create>"
[InstanceofExpressions] => [$instance.$ctor__instanceofexpression_InstanceofExpressions__void();] "instanceofexpression.InstanceofExpressions.<synthetic: ctor_create>"
[InstanceofExpressions] => [return $instance;] "instanceofexpression.InstanceofExpressions.<synthetic: ctor_create>"
[InstanceofExpressions] => [$ctor__instanceofexpression_InstanceofExpressions__void]
[InstanceofExpressions] => [this.$ctor__java_lang_Object__void();] "instanceofexpression.InstanceofExpressions.<init>"
[testInstanceofClass] => [m_testInstanceofClass__void]
[Object object = new InstanceofExpressions();] => [let object = InstanceofExpressions.$create__();] "instanceofexpression.InstanceofExpressions.testInstanceofClass"
[object] => [object] "object"
[boolean b;] => [let /** boolean */ b;] "instanceofexpression.InstanceofExpressions.testInstanceofClass"
[b] => [b] "b"
[b = object instanceof Object;] => [b = !$Equality.$same(object, null);] "instanceofexpression.InstanceofExpressions.testInstanceofClass"
[b = object instanceof InstanceofExpressions;] => [b = InstanceofExpressions.$isInstance(object);] "instanceofexpression.InstanceofExpressions.testInstanceofClass"
[b = object instanceof String;] => [b = j_l_String.$isInstance(object);] "instanceofexpression.InstanceofExpressions.testInstanceofClass"
[testInstanceofInterface] => [m_testInstanceofInterface__void]
[Object o = new Object();] => [let o = j_l_Object.$create__();] "instanceofexpression.InstanceofExpressions.testInstanceofInterface"
[o] => [o] "o"
[boolean b;] => [let /** boolean */ b;] "instanceofexpression.InstanceofExpressions.testInstanceofInterface"
[b] => [b] "b"
[b = o instanceof Serializable;] => [b = Serializable.$isInstance(o);] "instanceofexpression.InstanceofExpressions.testInstanceofInterface"
[b = new Serializable() {} instanceof Serializable;] => [b = !$Equality.$same($1.$create__instanceofexpression_InstanceofExpressions(this), null);] "instanceofexpression.InstanceofExpressions.testInstanceofInterface"
[testInstanceofBoxedType] => [m_testInstanceofBoxedType__void]
[Object b = new Integer(1);] => [let b = Integer.$create__int(1);] "instanceofexpression.InstanceofExpressions.testInstanceofBoxedType"
[b] => [b] "b"
[boolean a = b instanceof Byte;] => [let a = Byte.$isInstance(b);] "instanceofexpression.InstanceofExpressions.testInstanceofBoxedType"
[a] => [a] "a"
[a = b instanceof Double;] => [a = Double.$isInstance(b);] "instanceofexpression.InstanceofExpressions.testInstanceofBoxedType"
[a = b instanceof Float;] => [a = Float.$isInstance(b);] "instanceofexpression.InstanceofExpressions.testInstanceofBoxedType"
[a = b instanceof Integer;] => [a = Integer.$isInstance(b);] "instanceofexpression.InstanceofExpressions.testInstanceofBoxedType"
[a = b instanceof Long;] => [a = Long.$isInstance(b);] "instanceofexpression.InstanceofExpressions.testInstanceofBoxedType"
[a = b instanceof Short;] => [a = Short.$isInstance(b);] "instanceofexpression.InstanceofExpressions.testInstanceofBoxedType"
[a = b instanceof Number;] => [a = Number.$isInstance(b);] "instanceofexpression.InstanceofExpressions.testInstanceofBoxedType"
[a = b instanceof Character;] => [a = Character.$isInstance(b);] "instanceofexpression.InstanceofExpressions.testInstanceofBoxedType"
[a = b instanceof Boolean;] => [a = Boolean.$isInstance(b);] "instanceofexpression.InstanceofExpressions.testInstanceofBoxedType"
[Double d = null;] => [let d = null;] "instanceofexpression.InstanceofExpressions.testInstanceofBoxedType"
[d] => [d] "d"
[a = d instanceof Object;] => [a = !$Equality.$same(d, null);] "instanceofexpression.InstanceofExpressions.testInstanceofBoxedType"
[a = d instanceof Number;] => [a = !$Equality.$same(d, null);] "instanceofexpression.InstanceofExpressions.testInstanceofBoxedType"
[a = d instanceof Double;] => [a = !$Equality.$same(d, null);] "instanceofexpression.InstanceofExpressions.testInstanceofBoxedType"
[testInstanceOfArray] => [m_testInstanceOfArray__void]
[Object object = new Object();] => [let object = j_l_Object.$create__();] "instanceofexpression.InstanceofExpressions.testInstanceOfArray"
[object] => [object] "object"
[Object[] objectArray = new Object[0];] => [let objectArray = new Array(0);] "instanceofexpression.InstanceofExpressions.testInstanceOfArray"
[objectArray] => [objectArray] "objectArray"
[Object[][] objectDoubleArray = new Object[0][];] => [let objectDoubleArray = /**@type {!Array<Array<*>>}*/ ($Arrays.$create([0, null], j_l_Object));] "instanceofexpression.InstanceofExpressions.testInstanceOfArray"
[objectDoubleArray] => [objectDoubleArray] "objectDoubleArray"
[String[] stringArray = new String[0];] => [let stringArray = /**@type {!Array<?string>}*/ ($Arrays.$create([0], j_l_String));] "instanceofexpression.InstanceofExpressions.testInstanceOfArray"
[stringArray] => [stringArray] "stringArray"
[boolean a;] => [let /** boolean */ a;] "instanceofexpression.InstanceofExpressions.testInstanceOfArray"
[a] => [a] "a"
[a = object instanceof Object[];] => [a = $Arrays.$instanceIsOfType(object, j_l_Object, 1);] "instanceofexpression.InstanceofExpressions.testInstanceOfArray"
[a = object instanceof String[][];] => [a = $Arrays.$instanceIsOfType(object, j_l_String, 2);] "instanceofexpression.InstanceofExpressions.testInstanceOfArray"
[a = object instanceof Object[];] => [a = $Arrays.$instanceIsOfType(object, j_l_Object, 1);] "instanceofexpression.InstanceofExpressions.testInstanceOfArray"
[a = object instanceof String[][];] => [a = $Arrays.$instanceIsOfType(object, j_l_String, 2);] "instanceofexpression.InstanceofExpressions.testInstanceOfArray"
[a = objectArray instanceof Object[];] => [a = !$Equality.$same(objectArray, null);] "instanceofexpression.InstanceofExpressions.testInstanceOfArray"
[a = objectArray instanceof String[];] => [a = $Arrays.$instanceIsOfType(objectArray, j_l_String, 1);] "instanceofexpression.InstanceofExpressions.testInstanceOfArray"
[a = objectArray instanceof Object[][];] => [a = $Arrays.$instanceIsOfType(objectArray, j_l_Object, 2);] "instanceofexpression.InstanceofExpressions.testInstanceOfArray"
[a = objectArray instanceof String[][];] => [a = $Arrays.$instanceIsOfType(objectArray, j_l_String, 2);] "instanceofexpression.InstanceofExpressions.testInstanceOfArray"
[a = objectDoubleArray instanceof Object[];] => [a = !$Equality.$same(objectDoubleArray, null);] "instanceofexpression.InstanceofExpressions.testInstanceOfArray"
[a = objectDoubleArray instanceof Object[][];] => [a = !$Equality.$same(objectDoubleArray, null);] "instanceofexpression.InstanceofExpressions.testInstanceOfArray"
[a = objectDoubleArray instanceof String[][];] => [a = $Arrays.$instanceIsOfType(objectDoubleArray, j_l_String, 2);] "instanceofexpression.InstanceofExpressions.testInstanceOfArray"
[a = stringArray instanceof Object[];] => [a = !$Equality.$same(stringArray, null);] "instanceofexpression.InstanceofExpressions.testInstanceOfArray"
[a = stringArray instanceof String[];] => [a = !$Equality.$same(stringArray, null);] "instanceofexpression.InstanceofExpressions.testInstanceOfArray"
[a = object instanceof byte[];] => [a = $Arrays.$instanceIsOfType(object, $$byte, 1);] "instanceofexpression.InstanceofExpressions.testInstanceOfArray"
[a = object instanceof short[];] => [a = $Arrays.$instanceIsOfType(object, $$short, 1);] "instanceofexpression.InstanceofExpressions.testInstanceOfArray"
[a = object instanceof int[];] => [a = $Arrays.$instanceIsOfType(object, $$int, 1);] "instanceofexpression.InstanceofExpressions.testInstanceOfArray"
[a = object instanceof long[];] => [a = $Arrays.$instanceIsOfType(object, $$long, 1);] "instanceofexpression.InstanceofExpressions.testInstanceOfArray"
[a = object instanceof float[];] => [a = $Arrays.$instanceIsOfType(object, $$float, 1);] "instanceofexpression.InstanceofExpressions.testInstanceOfArray"
[a = object instanceof double[];] => [a = $Arrays.$instanceIsOfType(object, $$double, 1);] "instanceofexpression.InstanceofExpressions.testInstanceOfArray"
[a = object instanceof char[];] => [a = $Arrays.$instanceIsOfType(object, $$char, 1);] "instanceofexpression.InstanceofExpressions.testInstanceOfArray"
[a = object instanceof boolean[];] => [a = $Arrays.$instanceIsOfType(object, $$boolean, 1);] "instanceofexpression.InstanceofExpressions.testInstanceOfArray"
[testPrecedence] => [m_testPrecedence__void]
[boolean b = (false ? "foo" : "bar") instanceof String;] => [let b = !$Equality.$same(false ? 'foo' : 'bar', null);] "instanceofexpression.InstanceofExpressions.testPrecedence"
[b] => [b] "b"
[InstanceofExpressions] => [$clinit]
[InstanceofExpressions] => [InstanceofExpressions.$clinit = () =>{};] "instanceofexpression.InstanceofExpressions.<clinit>"
[InstanceofExpressions] => [InstanceofExpressions.$loadModules();] "instanceofexpression.InstanceofExpressions.<clinit>"
[InstanceofExpressions] => [j_l_Object.$clinit();] "instanceofexpression.InstanceofExpressions.<clinit>"
