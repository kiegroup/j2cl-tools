// Generated from "localclasswithconstructor/LocalClassWithConstructor.java"
@file:OptIn(ExperimentalObjCName::class)
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "REPEATED_BOUND",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER")

package localclasswithconstructor

import javaemul.lang.*
import kotlin.Int
import kotlin.OptIn
import kotlin.Suppress
import kotlin.experimental.ExperimentalObjCName
import kotlin.jvm.JvmField
import kotlin.native.ObjCName

@ObjCName("J2ktLocalclasswithconstructorLocalClassWithConstructor", exact = true)
open class LocalClassWithConstructor {
 @ObjCName("test")
 open fun test(
  @ObjCName("withInt") p: Int
 ) {
  val localVar: Int = 1
  open class ___1LocalClass {
   @JvmField
   var field: Int = 0

   constructor(a: Int, b: Int) {
    this.field = localVar + a + b
   }

   constructor(a: Int): this(a, p) {
    this.field = localVar
   }
  }
  ___1LocalClass(1)
 }
}
