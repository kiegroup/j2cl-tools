// Generated from "simplebridgemethods/SimpleBridgeMethods.java"
@file:OptIn(ExperimentalObjCName::class)
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "REPEATED_BOUND",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER")

package simplebridgemethods

import javaemul.lang.*
import kotlin.AssertionError
import kotlin.Error
import kotlin.OptIn
import kotlin.Suppress
import kotlin.experimental.ExperimentalObjCName
import kotlin.native.ObjCName

open class Superclass<T: Error?> {
 @ObjCName("m1")
 open fun m1(
  @ObjCName("withJavaLangError") t: T
 ) {}
}

open class Subclass: Superclass<AssertionError?>() {
 open override fun m1(a: AssertionError?) {}
}

open class AnotherSubclass: Superclass<AssertionError?>() {}

fun interface Callable<V> {
 @ObjCName("call")
 fun call(
  @ObjCName("withId") v: V
 )
}

open class Task<T>: Callable<T> {
 open override fun call(t: T) {}
}

open class AnotherTask<T: AssertionError?>: Callable<Superclass<T>?> {
 open override fun call(t: Superclass<T>?) {}
}

@ObjCName("J2ktSimplebridgemethodsSimpleBridgeMethods", exact = true)
open class SimpleBridgeMethods {}
