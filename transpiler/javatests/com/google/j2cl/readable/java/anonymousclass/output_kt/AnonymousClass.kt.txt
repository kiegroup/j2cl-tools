// Generated from "anonymousclass/AnonymousClass.java"
@file:OptIn(ExperimentalObjCName::class, ExperimentalObjCRefinement::class)
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "REPEATED_BOUND",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER")

package anonymousclass

import javaemul.lang.*
import kotlin.Any
import kotlin.Int
import kotlin.OptIn
import kotlin.String
import kotlin.Suppress
import kotlin.experimental.ExperimentalObjCName
import kotlin.experimental.ExperimentalObjCRefinement
import kotlin.jvm.JvmField
import kotlin.jvm.JvmStatic
import kotlin.native.HiddenFromObjC
import kotlin.native.ObjCName

abstract class SomeClass {
 @ObjCName("foo")
 abstract fun foo(): String?

 constructor(i: Int)
}

abstract class SomeClassWithStaticMembers {
 @ObjCName("foo")
 abstract fun foo(): String?

 constructor(i: Int)

 companion object {
  @JvmStatic
  @HiddenFromObjC
  fun staticMethod_pp_anonymousclass() {}
 }
}

@ObjCName("J2ktAnonymousclassAnonymousClass", exact = true)
open class AnonymousClass {
 @JvmField
 @HiddenFromObjC
 var i_pp_anonymousclass: Int = 0

 @ObjCName("main")
 open fun main() {
  val instance: SomeClass? = object : SomeClass(this@AnonymousClass.i_pp_anonymousclass) {
   @JvmField
   @HiddenFromObjC
   var object_pp_anonymousclass: Any? = this

   @JvmField
   @HiddenFromObjC
   var outer_pp_anonymousclass: Any? = this@AnonymousClass

   override fun foo(): String? {
    return "a"
   }
  }
  val instanceWithStaticMembers: SomeClassWithStaticMembers? = object : SomeClassWithStaticMembers(this@AnonymousClass.i_pp_anonymousclass) {
   @JvmField
   @HiddenFromObjC
   var object_pp_anonymousclass: Any? = this

   @JvmField
   @HiddenFromObjC
   var outer_pp_anonymousclass: Any? = this@AnonymousClass

   override fun foo(): String? {
    return "a"
   }
  }
 }
}

interface SomeInterface {
 companion object {
  @JvmField
  val implicitlyStatic: SomeClass? = object : SomeClass(1) {
   override fun foo(): String? {
    return "a"
   }
  }
 }
}
