// Generated from "rawtype/RawType.java"
@file:OptIn(ExperimentalObjCRefinement::class, ExperimentalObjCName::class)
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "REPEATED_BOUND",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER")

package rawtype

import javaemul.lang.*
import kotlin.Any
import kotlin.OptIn
import kotlin.Suppress
import kotlin.experimental.ExperimentalObjCName
import kotlin.experimental.ExperimentalObjCRefinement
import kotlin.jvm.JvmField
import kotlin.native.HiddenFromObjC
import kotlin.native.ObjCName

open class RawType {
 @JvmField
 @HiddenFromObjC
 var rawUnbound_pp_rawtype: RawType.Unbound<Any?>? = RawType.Unbound<Any?>()

 @JvmField
 @HiddenFromObjC
 var rawBound_pp_rawtype: RawType.Bound<RawType?>? = RawType.Bound<RawType?>()

 @JvmField
 @HiddenFromObjC
 var rawBoundRecursively_pp_rawtype: RawType.BoundRecursively<*>? = RawType.BoundRecursively()

 @JvmField
 @HiddenFromObjC
 var rawBoundDependentDirect_pp_rawtype: RawType.BoundDependentDirect<Any?, Any?>? = RawType.BoundDependentDirect<Any?, Any?>()

 @JvmField
 @HiddenFromObjC
 var rawBoundDependentIndirect_pp_rawtype: RawType.BoundDependentIndirect<Any?, RawType.Unbound<Any?>?>? = RawType.BoundDependentIndirect<Any?, RawType.Unbound<Any?>?>()

 open class Unbound<T> {
  @HiddenFromObjC
  open fun method_pp_rawtype(t: T): T {
   return t
  }
 }

 open class Bound<T: RawType?> {}

 open class BoundRecursively<T: RawType.BoundRecursively<T>?> {}

 open class BoundDependentDirect<A, B: A> {}

 open class BoundDependentIndirect<A, B: RawType.Unbound<A>?> {}

 open class RawUnboundChild: RawType.Unbound<Any?>() {
  @HiddenFromObjC
  open override fun method_pp_rawtype(o: Any?): Any? {
   return super<RawType.Unbound>.method_pp_rawtype(o)
  }
 }

 interface GenericSuperclass<T: RawType?> {
  @ObjCName("f")
  fun f(
   @ObjCName("withRawtypeRawType") t: T
  ) {}
 }

 open class RawSubclass: RawType.GenericSuperclass<RawType?> {
  open override fun f(t: RawType?) {}
 }
}
