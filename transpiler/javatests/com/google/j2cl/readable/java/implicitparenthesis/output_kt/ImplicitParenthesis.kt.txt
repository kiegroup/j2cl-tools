// Generated from "implicitparenthesis/ImplicitParenthesis.java"
@file:OptIn(ExperimentalObjCName::class, ExperimentalObjCRefinement::class)
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "REPEATED_BOUND",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER")

package implicitparenthesis

import javaemul.lang.*
import kotlin.Boolean
import kotlin.Int
import kotlin.OptIn
import kotlin.Suppress
import kotlin.assert
import kotlin.experimental.ExperimentalObjCName
import kotlin.experimental.ExperimentalObjCRefinement
import kotlin.jvm.JvmStatic
import kotlin.native.HiddenFromObjC
import kotlin.native.ObjCName
import kotlin.run

@ObjCName("J2ktImplicitparenthesisImplicitParenthesis", exact = true)
open class ImplicitParenthesis {
 @ObjCName("test")
 open fun test() {
  ImplicitParenthesis.examples_private_2()
  ImplicitParenthesis.nonExamples_private_2()
 }

 @ObjCName("J2ktImplicitparenthesisImplicitParenthesisCompanion", exact = true)
 companion object {
  @JvmStatic
  @HiddenFromObjC
  fun examples_private_2() {
   var primitiveInt: Int = 0
   var boxedInt: Int? = null
   primitiveInt = 5
   boxedInt = Int(10)
   primitiveInt = (if (primitiveInt == 5) Int(15) else Int(30))!!.toInt()
   assert(primitiveInt == 15)
   primitiveInt = 5
   boxedInt = Int(10)
   primitiveInt = run {
    boxedInt = Int.valueOf(boxedInt!!.toInt() + primitiveInt)
    boxedInt
   }!!.toInt()
   assert(primitiveInt == 15)
   primitiveInt = 5
   boxedInt = Int(10)
   primitiveInt = run {
    boxedInt = Int.valueOf(primitiveInt)
    boxedInt
   }!!.toInt()
   assert(primitiveInt == 5)
   primitiveInt = 5
   boxedInt = Int(10)
   primitiveInt = run {
    val ___value: Int? = boxedInt
    boxedInt = Int.valueOf(boxedInt!!.toInt() + 1)
    ___value
   }!!.toInt()
   assert(primitiveInt == 10)
   primitiveInt = 5
   boxedInt = Int(10)
   primitiveInt = run {
    boxedInt = Int.valueOf(boxedInt!!.toInt() + 1)
    boxedInt
   }!!.toInt()
   assert(primitiveInt == 11)
  }

  @JvmStatic
  @HiddenFromObjC
  fun nonExamples_private_2() {
   var primitiveInt: Int = 0
   var boxedInt: Int? = null
   var boxedBoolean: Boolean? = null
   primitiveInt = 5
   boxedInt = Int(10)
   primitiveInt = boxedInt!!.toInt() - primitiveInt
   assert(primitiveInt == 5)
   primitiveInt = 5
   boxedInt = Int(10)
   boxedBoolean = Boolean.valueOf(true)
   boxedBoolean = Boolean.valueOf(boxedInt!!.toInt() == primitiveInt)
   assert(boxedBoolean!!.booleanValue() == false)
  }

  @JvmStatic
  @HiddenFromObjC
  fun parenthesisRemoval_private_2() {
   Int(1 + 2)
  }
 }
}
