// Generated from "multipleabstractparents/MultipleAbstractParents.java"
@file:OptIn(ExperimentalObjCName::class)
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "REPEATED_BOUND",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER")

package multipleabstractparents

import javaemul.lang.*
import kotlin.Array
import kotlin.OptIn
import kotlin.String
import kotlin.Suppress
import kotlin.assert
import kotlin.experimental.ExperimentalObjCName
import kotlin.jvm.JvmStatic
import kotlin.native.ObjCName

@ObjCName("J2ktMultipleabstractparentsMultipleAbstractParents", exact = true)
open class MultipleAbstractParents {
 @ObjCName("J2ktMultipleabstractparentsMultipleAbstractParentsCompanion", exact = true)
 companion object {
  @JvmStatic
  @ObjCName("main")
  fun main(
   vararg @ObjCName("withNSStringArray") args: String?
  ) {
   val args_1: Array<String?>? = args as Array<String?>?
   assert(MultipleAbstractParents.ArrayList<String?>().getFoo(null)!!.equals("AbstractCollection"))
   assert(MultipleAbstractParents.StringList().getFoo(null)!!.equals("AbstractCollection"))
   assert((MultipleAbstractParents.StringList() as MultipleAbstractParents.IStringList)!!.getFoo(null)!!.equals("AbstractCollection"))
  }
 }

 @ObjCName("J2ktMultipleabstractparentsMultipleAbstractParents_List", exact = true)
 fun interface List<T> {
  @ObjCName("getFoo")
  fun getFoo(
   @ObjCName("withId") t: T
  ): String?
 }

 @ObjCName("J2ktMultipleabstractparentsMultipleAbstractParents_Collection", exact = true)
 fun interface Collection<T> {
  @ObjCName("getFoo")
  fun getFoo(
   @ObjCName("withId") t: T
  ): String?
 }

 @ObjCName("J2ktMultipleabstractparentsMultipleAbstractParents_AbstractListCollection", exact = true)
 abstract class AbstractListCollection<T>: MultipleAbstractParents.List<T>, MultipleAbstractParents.Collection<T> {}

 @ObjCName("J2ktMultipleabstractparentsMultipleAbstractParents_AbstractCollection", exact = true)
 abstract class AbstractCollection<T> {
  @ObjCName("getFoo")
  open fun getFoo(
   @ObjCName("withId") t: T
  ): String? {
   return "AbstractCollection"
  }
 }

 @ObjCName("J2ktMultipleabstractparentsMultipleAbstractParents_AbstractList", exact = true)
 abstract class AbstractList<T>: MultipleAbstractParents.AbstractCollection<T>(), MultipleAbstractParents.List<T> {}

 @ObjCName("J2ktMultipleabstractparentsMultipleAbstractParents_AbstractList2", exact = true)
 abstract class AbstractList2<T>: MultipleAbstractParents.List<T> {}

 @ObjCName("J2ktMultipleabstractparentsMultipleAbstractParents_ArrayList", exact = true)
 open class ArrayList<T>: MultipleAbstractParents.AbstractList<T>() {}

 @ObjCName("J2ktMultipleabstractparentsMultipleAbstractParents_IStringList", exact = true)
 fun interface IStringList: MultipleAbstractParents.List<String?> {
  override fun getFoo(string: String?): String?
 }

 @ObjCName("J2ktMultipleabstractparentsMultipleAbstractParents_AbstractStringList", exact = true)
 abstract class AbstractStringList: MultipleAbstractParents.AbstractList<String?>(), MultipleAbstractParents.IStringList {}

 @ObjCName("J2ktMultipleabstractparentsMultipleAbstractParents_AbstractStringList2", exact = true)
 abstract class AbstractStringList2: MultipleAbstractParents.AbstractList2<String?>(), MultipleAbstractParents.IStringList {}

 @ObjCName("J2ktMultipleabstractparentsMultipleAbstractParents_AbstractStringList3", exact = true)
 abstract class AbstractStringList3: MultipleAbstractParents.AbstractList2<String?>() {}

 @ObjCName("J2ktMultipleabstractparentsMultipleAbstractParents_StringList", exact = true)
 open class StringList: MultipleAbstractParents.AbstractStringList() {}

 @ObjCName("J2ktMultipleabstractparentsMultipleAbstractParents_StringListChild", exact = true)
 open class StringListChild: MultipleAbstractParents.StringList() {}
}
