// Generated from "jsenum/Main.java"
@file:OptIn(ExperimentalObjCName::class, ExperimentalObjCRefinement::class)
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "REPEATED_BOUND",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER")

package jsenum

import javaemul.lang.*
import java.util.Arrays
import java.util.Optional
import kotlin.Any
import kotlin.Array
import kotlin.Boolean
import kotlin.Comparable
import kotlin.Int
import kotlin.OptIn
import kotlin.String
import kotlin.Suppress
import kotlin.arrayOf
import kotlin.experimental.ExperimentalObjCName
import kotlin.experimental.ExperimentalObjCRefinement
import kotlin.jvm.JvmField
import kotlin.jvm.JvmStatic
import kotlin.native.HiddenFromObjC
import kotlin.native.ObjCName

@ObjCName("J2ktJsenumMain", exact = true)
open class Main {
 @ObjCName("J2ktJsenumMainCompanion", exact = true)
 companion object {
  @JvmStatic
  @ObjCName("testJsEnumSwitch")
  fun testJsEnumSwitch() {
   var comparableJsEnum: Main.ComparableJsEnum? = if (Main.ComparableJsEnum.ONE.getValue() == 1) Main.ComparableJsEnum.TWO else null
   SWITCH@ do {
    when (comparableJsEnum!!) {
     Main.ComparableJsEnum.TWO -> {
      break@SWITCH
     }
     else -> {}
    }
   } while (false)
   val comparable: Comparable<Any>? = comparableJsEnum as Comparable<Any>?
   comparableJsEnum = comparable as Main.ComparableJsEnum?
   var intJsEnum: Main.IntJsEnum? = if (Main.IntJsEnum.ELEVEN.getValue() == 10) Main.IntJsEnum.ELEVEN else null
   SWITCH_1@ do {
    when (intJsEnum!!) {
     Main.IntJsEnum.TWENTY -> {
      break@SWITCH_1
     }
     else -> {}
    }
   } while (false)
   val o: Any? = intJsEnum
   intJsEnum = o as Main.IntJsEnum?
   val equal: Boolean = intJsEnum === Main.IntJsEnum.TWENTY
   var isInstance: Boolean = intJsEnum is Main.IntJsEnum
   isInstance = intJsEnum is Comparable<*>
   val stringJsEnum: Main.StringJsEnum? = if (Main.StringJsEnum.ONE.getValue() === "10") Main.StringJsEnum.THREE else null
   SWITCH_2@ do {
    when (stringJsEnum!!) {
     Main.StringJsEnum.ONE -> {
      break@SWITCH_2
     }
     else -> {}
    }
   } while (false)
   Main.NativeStringEnum.ONE.compareTo(Main.NativeStringEnum.THREE)
   Main.NativeStringEnum.ONE.equals(Main.NativeStringEnum.THREE)
   Main.ComparableJsEnum.ONE.compareTo(Main.ComparableJsEnum.ZERO)
   Main.ComparableJsEnum.ONE.equals(Main.ComparableJsEnum.ZERO)
   val supplier: Main.Supplier<Main.ComparableJsEnum?>? = Main.Supplier<Main.ComparableJsEnum?> {
    return@Supplier Main.ComparableJsEnum.ONE
   }
   val consummer: Main.Consumer<Main.ComparableJsEnum?>? = Main.Consumer<Main.ComparableJsEnum?> { e: Main.ComparableJsEnum? ->
    e!!.ordinal
   }
   Main.acceptsJsFunctionSupplier_private_2(Main.JsFunctionSuppiler<Main.ComparableJsEnum?> {
    return@JsFunctionSuppiler Main.ComparableJsEnum.ONE
   })
   Main.acceptsSupplierOfSupplier_private_2(Main.Supplier<Main.Supplier<Main.ComparableJsEnum?>?> {
    return@Supplier Main.Supplier<Main.ComparableJsEnum?> {
     return@Supplier Main.ComparableJsEnum.ONE
    }
   })
  }

  @JvmStatic
  @HiddenFromObjC
  fun acceptsJsFunctionSupplier_private_2(supplier: Main.JsFunctionSuppiler<Main.ComparableJsEnum?>?) {}

  @JvmStatic
  @HiddenFromObjC
  fun acceptsSupplierOfSupplier_private_2(supplier: Main.Supplier<Main.Supplier<Main.ComparableJsEnum?>?>?) {}

  @JvmStatic
  @HiddenFromObjC
  fun testBoxUnboxWithTypeInference_private_2() {
   val templatedField: Main.TemplatedField<Main.ComparableJsEnum?>? = Main.TemplatedField<Main.ComparableJsEnum?>(Main.ComparableJsEnum.ONE)
   var unboxed: Main.ComparableJsEnum? = templatedField!!.getValue_pp_jsenum()
   unboxed = templatedField!!.value_pp_jsenum
   templatedField!!.value_pp_jsenum = Main.ComparableJsEnum.ONE
   Arrays.asList<Main.ComparableJsEnum>(*(arrayOf<Any?>(Main.ComparableJsEnum.ONE) as Array<Main.ComparableJsEnum>)!!)
   templatedField!!.getValue_pp_jsenum()!!.ordinal
   val b: Boolean = Main.ComparableJsEnum.ONE === Main.boxingPassthrough_private_2<Main.ComparableJsEnum?>(Main.ComparableJsEnum.ONE)
  }

  @JvmStatic
  @HiddenFromObjC
  fun <T> boxingPassthrough_private_2(t: T): T {
   return t
  }

  @JvmStatic
  @HiddenFromObjC
  fun boxingWithGenerics_pp_jsenum() {
   Main.Foo<Any?>(Optional.of<Main.IntJsEnum>(Main.IntJsEnum.MINUSONE) as Optional<Main.IntJsEnum>?)
  }
 }

 fun interface Supplier<T> {
  @ObjCName("get")
  fun get(): T
 }

 fun interface Consumer<T> {
  @ObjCName("accept")
  fun accept(
   @ObjCName("withId") t: T
  )
 }

 enum class ComparableJsEnum {
  ZERO,
  ONE,
  TWO;

  @ObjCName("getValue")
  fun getValue(): Int {
   return this.ordinal
  }
 }

 enum class IntJsEnum {
  MINUSONE(-1),
  TWENTY(20),
  ELEVEN(11);

  @JvmField
  @HiddenFromObjC
  var value_private_2: Int = 0

  @ObjCName("getValue")
  fun getValue(): Int {
   return this.value_private_2
  }

  constructor(value: Int) {
   this.value_private_2 = value
  }
 }

 enum class StringJsEnum {
  ONE("ONE"),
  THREE("THREE");

  @JvmField
  @HiddenFromObjC
  var value_private_2: String? = null

  @ObjCName("getValue")
  fun getValue(): String? {
   return this.value_private_2
  }

  constructor(value: String?) {
   this.value_private_2 = value
  }
 }

 enum class NonNullableStringJsEnum {
  ONE("ONE"),
  THREE("THREE");

  @JvmField
  @HiddenFromObjC
  var value_private_2: String

  @ObjCName("getValue")
  fun getValue(): String? {
   return this.value_private_2
  }

  constructor(value: String?) {
   this.value_private_2 = value!!
  }
 }

 enum class NativeStringEnum {
  ONE,
  THREE;
 }

 fun interface JsFunctionSuppiler<T> {
  @ObjCName("get")
  fun get(): T
 }

 open class TemplatedField<T> {
  @JvmField
  @HiddenFromObjC
  var value_pp_jsenum: T

  constructor(value: T) {
   this.value_pp_jsenum = value
  }

  @HiddenFromObjC
  open fun getValue_pp_jsenum(): T {
   return this.value_pp_jsenum
  }
 }

 open class Foo<T> {
  constructor(c: Optional<Main.IntJsEnum>?)
 }

 enum class JsEnumWithRenamedProperties {
  ZERO,
  ONE,
  TWO;

  @ObjCName("getValue")
  fun getValue(): Int {
   return this.ordinal
  }
 }

 open class SupplierConsumerImpl<T>: Main.Supplier<T>, Main.Consumer<T> {
  open override fun accept(t: T) {}

  open override fun get(): T {
   return null as T
  }
 }

 interface ComparableJsEnumSupplierConsumer: Main.Supplier<Main.ComparableJsEnum?>, Main.Consumer<Main.ComparableJsEnum?> {
  override fun get(): Main.ComparableJsEnum?

  override fun accept(e: Main.ComparableJsEnum?)
 }

 open class ComparableJsEnumSupplierConsumerImpl: Main.SupplierConsumerImpl<Main.ComparableJsEnum?>(), Main.ComparableJsEnumSupplierConsumer {}

 open class ComparableJsEnumSupplierConsumerImplWithOverrides: Main.SupplierConsumerImpl<Main.ComparableJsEnum?>(), Main.ComparableJsEnumSupplierConsumer {
  open override fun accept(t: Main.ComparableJsEnum?) {}

  open override fun get(): Main.ComparableJsEnum? {
   return null
  }
 }
}
