// Generated from "nobridgemethods/CharSet.java"
@file:OptIn(ExperimentalObjCName::class)
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "REPEATED_BOUND",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER")

package nobridgemethods

import javaemul.lang.*
import kotlin.Array
import kotlin.OptIn
import kotlin.String
import kotlin.Suppress
import kotlin.experimental.ExperimentalObjCName
import kotlin.jvm.JvmStatic
import kotlin.native.ObjCName

interface Entry<K> {}

abstract class Map<K> {
 @ObjCName("getCeilingEntry")
 abstract fun getCeilingEntry(
  @ObjCName("withId") key: K
 ): Entry<K>?
}

open class TreeMap<K>: Map<K>() {
 open override fun getCeilingEntry(key: K): TreeMap.InnerEntry<K>? {
  return TreeMap.InnerEntry<K>()
 }

 open class InnerEntry<K>: Entry<K> {}
}

@ObjCName("J2ktNobridgemethodsCharSet", exact = true)
open class CharSet {
 @ObjCName("J2ktNobridgemethodsCharSetCompanion", exact = true)
 companion object {
  @JvmStatic
  @ObjCName("main")
  fun main(
   vararg @ObjCName("withNSStringArray") args: String?
  ) {
   val args_1: Array<String?>? = args as Array<String?>?
   val treeMap: TreeMap<String?>? = object : TreeMap<String?>() {}
  }
 }
}
