// Generated from "nullability/Nullability.java"
@file:OptIn(ExperimentalObjCName::class, ExperimentalObjCRefinement::class)
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "REPEATED_BOUND",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER")

package nullability

import javaemul.lang.*
import java.lang.RuntimeException
import java.util.Comparator
import javaemul.lang.JavaList
import kotlin.Any
import kotlin.Array
import kotlin.Double
import kotlin.Int
import kotlin.OptIn
import kotlin.String
import kotlin.Suppress
import kotlin.arrayOf
import kotlin.collections.ArrayList
import kotlin.collections.MutableList
import kotlin.experimental.ExperimentalObjCName
import kotlin.experimental.ExperimentalObjCRefinement
import kotlin.jvm.JvmField
import kotlin.jvm.JvmStatic
import kotlin.native.HiddenFromObjC
import kotlin.native.ObjCName

@ObjCName("J2ktNullabilityNullability", exact = true)
open class Nullability {
 @JvmField
 @HiddenFromObjC
 var f1_private_2: String = "Hello"

 @JvmField
 @HiddenFromObjC
 var f2_private_2: String? = null

 @JvmField
 @HiddenFromObjC
 var f3_private_2: String? = null

 @JvmField
 @HiddenFromObjC
 var f4_private_2: MutableList<String> = ArrayList<String>()

 @JvmField
 @HiddenFromObjC
 var f5_private_2: MutableList<String>? = ArrayList<String>()

 @JvmField
 @HiddenFromObjC
 var f6_private_2: MutableList<String?> = ArrayList<String>() as MutableList<String?>

 @JvmField
 @HiddenFromObjC
 var f7_private_2: MutableList<String?>? = null

 @JvmField
 @HiddenFromObjC
 var f8_private_2: Array<String> = arrayOf<String>()

 @JvmField
 @HiddenFromObjC
 var f9_private_2: Array<String?> = arrayOf<String?>()

 @JvmField
 @HiddenFromObjC
 var f10_private_2: Array<String>? = arrayOf<String>()

 @JvmField
 @HiddenFromObjC
 var f12_private_2: MutableList<String?>? = ArrayList<String>() as MutableList<String?>?

 @JvmField
 @HiddenFromObjC
 var f13_private_2: Any

 @JvmField
 @HiddenFromObjC
 var f14_private_2: Any? = null

 constructor(
  @ObjCName("NSString") a: String
 ) {
  this.f13_private_2 = Any()
 }

 @ObjCName("m1")
 open fun m1(
  @ObjCName("withNSString") a: String,
  @ObjCName("withJavaUtilList") b: MutableList<Double>,
  @ObjCName("withNSString") c: String?
 ): String {
  return ""
 }

 @ObjCName("m2")
 open fun m2(
  @ObjCName("withNSString") a: String?,
  @ObjCName("withJavaUtilList") b: MutableList<Double?>
 ): String? {
  return ""
 }

 @ObjCName("m3")
 open fun m3(
  @ObjCName("withNSString") a: String,
  vararg @ObjCName("withNSStringArray") args: String
 ): String? {
  val args_1: Array<String>? = args as Array<String>?
  return null
 }

 @ObjCName("m4")
 open fun m4(
  @ObjCName("withNullabilityNullability_MyFunction") f: Nullability.MyFunction
 ) {}

 @ObjCName("J2ktNullabilityNullabilityCompanion", exact = true)
 companion object {
  @JvmStatic
  @HiddenFromObjC
  fun <T: String?> testDefaultNullabilityBounds_pp_nullability(defaultNullability: Nullability.ParameterizedDefaultNullability<T>?) {
   defaultNullability!!.getNonNullable_pp_nullability()!!.length
   defaultNullability!!.getNullable_pp_nullability()!!.length
   defaultNullability!!.getDefaultNullability_pp_nullability()!!.length
  }

  @JvmStatic
  @HiddenFromObjC
  fun <T: String?> testDefaultNullabilityBounds_pp_nullability(nullable: Nullability.ParameterizedNullable<T>?) {
   nullable!!.getNonNullable_pp_nullability()!!.length
   nullable!!.getNullable_pp_nullability()!!.length
   nullable!!.getDefaultNullability_pp_nullability()!!.length
  }

  @JvmStatic
  @HiddenFromObjC
  fun <T: String?> testNullableBounds_pp_nullability(defaultNullability: Nullability.ParameterizedDefaultNullability<T>?) {
   defaultNullability!!.getNonNullable_pp_nullability()!!.length
   defaultNullability!!.getNullable_pp_nullability()!!.length
   defaultNullability!!.getDefaultNullability_pp_nullability()!!.length
  }

  @JvmStatic
  @HiddenFromObjC
  fun <T: String?> testNullableBounds_pp_nullability(nullable: Nullability.ParameterizedNullable<T>?) {
   nullable!!.getNonNullable_pp_nullability()!!.length
   nullable!!.getNullable_pp_nullability()!!.length
   nullable!!.getDefaultNullability_pp_nullability()!!.length
  }

  @JvmStatic
  @HiddenFromObjC
  fun <T: String> testNonNullableBounds_pp_nullability(defaultNullability: Nullability.ParameterizedDefaultNullability<T>?) {
   defaultNullability!!.getNonNullable_pp_nullability()!!.length
   defaultNullability!!.getNullable_pp_nullability()!!.length
   defaultNullability!!.getDefaultNullability_pp_nullability()!!.length
  }

  @JvmStatic
  @HiddenFromObjC
  fun <T: String> testNonNullableBounds_pp_nullability(nullable: Nullability.ParameterizedNullable<T>?) {
   nullable!!.getNonNullable_pp_nullability()!!.length
   nullable!!.getNullable_pp_nullability()!!.length
   nullable!!.getDefaultNullability_pp_nullability()!!.length
  }

  @JvmStatic
  @HiddenFromObjC
  fun <T: String> testNonNullableBounds_pp_nullability(nonNullable: Nullability.ParameterizedNonNullable<T>?) {
   nonNullable!!.getNonNullable_pp_nullability()!!.length
   nonNullable!!.getNullable_pp_nullability()!!.length
   nonNullable!!.getDefaultNullability_pp_nullability()!!.length
  }

  @JvmStatic
  @HiddenFromObjC
  fun testDefaultNullabilityWildcards_pp_nullability(nonNullable: Nullability.ParameterizedDefaultNullability<out String?>?) {
   (nonNullable as Nullability.ParameterizedDefaultNullability<String?>?)!!.getNonNullable_pp_nullability()!!.length
   (nonNullable as Nullability.ParameterizedDefaultNullability<String?>?)!!.getNullable_pp_nullability()!!.length
   (nonNullable as Nullability.ParameterizedDefaultNullability<String?>?)!!.getDefaultNullability_pp_nullability()!!.length
  }

  @JvmStatic
  @HiddenFromObjC
  fun testDefaultNullabilityWildcards_pp_nullability(nonNullable: Nullability.ParameterizedNullable<out String?>?) {
   (nonNullable as Nullability.ParameterizedNullable<String?>?)!!.getNonNullable_pp_nullability()!!.length
   (nonNullable as Nullability.ParameterizedNullable<String?>?)!!.getNullable_pp_nullability()!!.length
   (nonNullable as Nullability.ParameterizedNullable<String?>?)!!.getDefaultNullability_pp_nullability()!!.length
  }

  @JvmStatic
  @HiddenFromObjC
  fun testDefaultNullabilityWildcards_pp_nullability(nonNullable: Nullability.ParameterizedNonNullable<out String>?) {
   (nonNullable as Nullability.ParameterizedNonNullable<String>?)!!.getNonNullable_pp_nullability()!!.length
   (nonNullable as Nullability.ParameterizedNonNullable<String>?)!!.getNullable_pp_nullability()!!.length
   (nonNullable as Nullability.ParameterizedNonNullable<String>?)!!.getDefaultNullability_pp_nullability()!!.length
  }

  @JvmStatic
  @HiddenFromObjC
  fun <T> testRecursive_pp_nullability() where T: Nullability.Recursive<T>, T: Marker? {
   val generic: Nullability.RecursiveParam<T>? = Nullability.RecursiveParam<T>()
   val parametrized: Nullability.RecursiveParam<Nullability.RecursiveChild>? = Nullability.RecursiveParam<Nullability.RecursiveChild>()
  }

  @JvmStatic
  @HiddenFromObjC
  fun <T> testRecursiveNullable_pp_nullability() where T: Nullability.RecursiveNullable<T>?, T: Marker? {
   val generic: Nullability.RecursiveNullableParam<T>? = Nullability.RecursiveNullableParam<T>()
   val parametrized: Nullability.RecursiveNullableParam<Nullability.RecursiveNullableChild?>? = Nullability.RecursiveNullableParam<Nullability.RecursiveNullableChild?>()
  }
 }

 open class Foo<T> {
  @HiddenFromObjC
  open fun bar_pp_nullability(t: T) {}

  @HiddenFromObjC
  open fun baz_pp_nullability(): T? {
   return null
  }

  open override fun toString(): String {
   return "Foo"
  }
 }

 fun interface MyFunction {
  @ObjCName("x")
  fun x(
   @ObjCName("withNSString") a: String
  ): String
 }

 @ObjCName("J2ktNullabilityNullability_StringList", exact = true)
 interface StringList: JavaList<String?> {}

 @ObjCName("J2ktNullabilityNullability_StringComparator", exact = true)
 open class StringComparator: Comparator<String> {
  open override fun compare(a: String, b: String): Int {
   return 0
  }
 }

 @ObjCName("J2ktNullabilityNullability_NullableStringComparator", exact = true)
 open class NullableStringComparator: Comparator<String?> {
  open override fun compare(a: String?, b: String?): Int {
   return 0
  }
 }

 fun interface NullableTemplatedReturn<T> {
  @ObjCName("foo")
  fun foo(): T?
 }

 @ObjCName("J2ktNullabilityNullability_NullableTemplatedReturnOverride", exact = true)
 open class NullableTemplatedReturnOverride: Nullability.NullableTemplatedReturn<String?> {
  open override fun foo(): String? {
   return "foo"
  }
 }

 open class ParameterizedDefaultNullability<N> {
  @HiddenFromObjC
  open fun getNullable_pp_nullability(): N? {
   return null
  }

  @HiddenFromObjC
  open fun getNonNullable_pp_nullability(): N & Any {
   throw RuntimeException()
  }

  @HiddenFromObjC
  open fun getDefaultNullability_pp_nullability(): N {
   return null as N
  }
 }

 open class ParameterizedNullable<N> {
  @HiddenFromObjC
  open fun getNullable_pp_nullability(): N? {
   return null
  }

  @HiddenFromObjC
  open fun getNonNullable_pp_nullability(): N & Any {
   throw RuntimeException()
  }

  @HiddenFromObjC
  open fun getDefaultNullability_pp_nullability(): N {
   return null as N
  }
 }

 open class ParameterizedNonNullable<N: Any> {
  @HiddenFromObjC
  open fun getNullable_pp_nullability(): N? {
   return null
  }

  @HiddenFromObjC
  open fun getNonNullable_pp_nullability(): N {
   throw RuntimeException()
  }

  @HiddenFromObjC
  open fun getDefaultNullability_pp_nullability(): N {
   return null!!
  }
 }

 open class NonNullableInsideNullable<T> {
  @HiddenFromObjC
  open fun nonNullableTest_pp_nullability(nonNullable: Nullability.ParameterizedNonNullable<T & Any>?) {}
 }

 open class Recursive<T> where T: Nullability.Recursive<T>, T: Marker? {}

 open class RecursiveNullable<T> where T: Nullability.RecursiveNullable<T>?, T: Marker? {}

 open class RecursiveChild: Nullability.Recursive<Nullability.RecursiveChild>(), Marker {}

 open class RecursiveNullableChild: Nullability.RecursiveNullable<Nullability.RecursiveNullableChild?>(), Marker {}

 open class RecursiveParam<T> where T: Nullability.Recursive<T>, T: Marker? {}

 open class RecursiveNullableParam<T> where T: Nullability.RecursiveNullable<T>?, T: Marker? {}
}

interface Marker {}
