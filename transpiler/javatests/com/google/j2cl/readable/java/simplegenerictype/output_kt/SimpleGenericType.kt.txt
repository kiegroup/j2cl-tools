// Generated from "simplegenerictype/SimpleGenericType.java"
@file:OptIn(ExperimentalObjCName::class)
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "REPEATED_BOUND",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER")

package simplegenerictype

import javaemul.lang.*
import kotlin.Any
import kotlin.Error
import kotlin.OptIn
import kotlin.Suppress
import kotlin.experimental.ExperimentalObjCName
import kotlin.jvm.JvmField
import kotlin.native.ObjCName

@ObjCName("J2ktSimplegenerictypeSimpleGenericType", exact = true)
open class SimpleGenericType<T, S> {
 @JvmField
 @ObjCName("first_")
 var first: T

 @JvmField
 @ObjCName("second_")
 var second: S

 constructor(
  @ObjCName("Id") t: T,
  @ObjCName("withId") s: S
 ) {
  this.first = t
  this.second = s
 }

 @ObjCName("test")
 open fun test() {
  val g: SimpleGenericType<Any?, Error?>? = SimpleGenericType<Any?, Error?>(Any(), java.lang.Error())
 }
}
