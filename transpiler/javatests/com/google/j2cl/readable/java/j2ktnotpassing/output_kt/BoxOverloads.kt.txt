// Generated from "j2ktnotpassing/BoxOverloads.java"
@file:OptIn(ExperimentalObjCName::class)
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "REPEATED_BOUND",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER")

package j2ktnotpassing

import javaemul.lang.*
import kotlin.Double
import kotlin.OptIn
import kotlin.Suppress
import kotlin.experimental.ExperimentalObjCName
import kotlin.jvm.JvmStatic
import kotlin.native.ObjCName

@ObjCName("J2ktJ2ktnotpassingBoxOverloads", exact = true)
open class BoxOverloads {
 @ObjCName("J2ktJ2ktnotpassingBoxOverloadsCompanion", exact = true)
 companion object {
  @JvmStatic
  @ObjCName("boxedOverload")
  fun boxedOverload(
   @ObjCName("withDouble") d: Double
  ) {}

  @JvmStatic
  @ObjCName("boxedOverload")
  fun boxedOverload(
   @ObjCName("withJavaLangDouble") d: Double
  ) {}

  @JvmStatic
  @ObjCName("testBoxedOverload")
  fun testBoxedOverload() {
   BoxOverloads.boxedOverload(1.25)
   BoxOverloads.boxedOverload(Double.valueOf(1.25))
   BoxOverloads.boxedOverload(Double(1.25))
   BoxOverloads.boxedOverload(1.toDouble())
  }

  @JvmStatic
  @ObjCName("testGenericBoxedOverload")
  fun testGenericBoxedOverload(
   @ObjCName("withJ2ktnotpassingBoxOverloads_Generic") generic: BoxOverloads.Generic<Double>
  ) {
   generic!!.overload(1.25)
   generic!!.overload(Double.valueOf(1.25))
   generic!!.overload(1.toDouble())
  }
 }

 @ObjCName("J2ktJ2ktnotpassingBoxOverloads_Generic", exact = true)
 interface Generic<T> {
  @ObjCName("overload")
  fun overload(
   @ObjCName("withDouble") d: Double
  )

  @ObjCName("overload")
  fun overload(
   @ObjCName("withId") t: T
  )
 }
}
