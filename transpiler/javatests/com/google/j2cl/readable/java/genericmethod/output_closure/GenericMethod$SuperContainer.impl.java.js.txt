goog.module('genericmethod.GenericMethod.SuperContainer$impl');

const j_l_Object = goog.require('java.lang.Object$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let Container = goog.forwardDeclare('genericmethod.GenericMethod.Container$impl');
let Content = goog.forwardDeclare('genericmethod.GenericMethod.Content$impl');

/**
 * @template C
 */
class SuperContainer extends j_l_Object {
 /** @protected @nodts */
 constructor() {
  super();
 }
 /** @nodts @template C @return {!SuperContainer<C>} */
 static $create__() {
  SuperContainer.$clinit();
  let $instance = new SuperContainer();
  $instance.$ctor__genericmethod_GenericMethod_SuperContainer__void();
  return $instance;
 }
 /** @nodts */
 $ctor__genericmethod_GenericMethod_SuperContainer__void() {
  this.$ctor__java_lang_Object__void();
 }
 /** @nodts @return {C} */
 m_get__genericmethod_GenericMethod_Container_$pp_genericmethod() {
  return null;
 }
 /** @nodts */
 static $clinit() {
  SuperContainer.$clinit = () =>{};
  SuperContainer.$loadModules();
  j_l_Object.$clinit();
 }
 /** @nodts @return {boolean} */
 static $isInstance(/** ? */ instance) {
  return instance instanceof SuperContainer;
 }
 
 /** @nodts */
 static $loadModules() {}
}
$Util.$setClassMetadata(SuperContainer, 'genericmethod.GenericMethod$SuperContainer');

exports = SuperContainer;

//# sourceMappingURL=GenericMethod$SuperContainer.js.map
