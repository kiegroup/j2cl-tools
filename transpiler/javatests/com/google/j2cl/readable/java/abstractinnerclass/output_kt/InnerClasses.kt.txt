// Generated from "abstractinnerclass/InnerClasses.java"
@file:OptIn(ExperimentalObjCName::class, ExperimentalObjCRefinement::class)
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "REPEATED_BOUND",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER")

package abstractinnerclass

import javaemul.lang.*
import kotlin.OptIn
import kotlin.Suppress
import kotlin.experimental.ExperimentalObjCName
import kotlin.experimental.ExperimentalObjCRefinement
import kotlin.native.HiddenFromObjC
import kotlin.native.ObjCName

@ObjCName("J2ktAbstractinnerclassInnerClasses", exact = true)
open class InnerClasses {
 fun interface A {
  @ObjCName("foo")
  fun foo()
 }

 abstract class B: InnerClasses.A {
  @HiddenFromObjC
  open fun bar_pp_abstractinnerclass() {
   this.foo()
  }
 }

 abstract inner class C: InnerClasses.A {
  @HiddenFromObjC
  open fun bar_pp_abstractinnerclass() {
   this.foo()
  }
 }
}
