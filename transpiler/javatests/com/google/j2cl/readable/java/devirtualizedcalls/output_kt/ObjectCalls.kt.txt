// Generated from "devirtualizedcalls/ObjectCalls.java"
@file:OptIn(ExperimentalObjCName::class)
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "REPEATED_BOUND",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER")

package devirtualizedcalls

import javaemul.lang.*
import kotlin.Any
import kotlin.Array
import kotlin.Boolean
import kotlin.OptIn
import kotlin.Suppress
import kotlin.arrayOfNulls
import kotlin.experimental.ExperimentalObjCName
import kotlin.native.ObjCName

@ObjCName("J2ktDevirtualizedcallsObjectCalls", exact = true)
open class ObjectCalls {
 @ObjCName("main")
 open fun main() {
  val `object`: Any? = Any()
  `object`!!.equals(`object`)
  `object`!!.hashCode()
  `object`!!.toString()
  `object`!!.getClass()
  val objectCalls: Array<ObjectCalls?>? = arrayOfNulls<ObjectCalls>(1)
  objectCalls!!.equals(objectCalls)
  objectCalls!!.hashCode()
  objectCalls!!.toString()
  objectCalls!!.getClass()
 }

 @ObjCName("test")
 open fun test() {
  this.equals(Any())
  this.hashCode()
  this.toString()
  this.getClass()
  this.equals(Any())
  this.hashCode()
  this.toString()
  this.getClass()
 }

 @ObjCName("testNotEquals")
 open fun testNotEquals(): Boolean {
  return !this.equals(Any())
 }
}
