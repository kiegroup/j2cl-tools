// Generated from "jsignore/JsIgnoreExample.java"
@file:OptIn(ExperimentalObjCName::class)
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "REPEATED_BOUND",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER")

package jsignore

import javaemul.lang.*
import kotlin.Any
import kotlin.Int
import kotlin.OptIn
import kotlin.Suppress
import kotlin.experimental.ExperimentalObjCName
import kotlin.jvm.JvmField
import kotlin.jvm.JvmStatic
import kotlin.native.ObjCName

@ObjCName("J2ktJsignoreJsIgnoreExample", exact = true)
open class JsIgnoreExample {
 @ObjCName("J2ktJsignoreJsIgnoreExampleCompanion", exact = true)
 companion object {
  @JvmStatic
  @ObjCName("exportedFunction")
  fun exportedFunction() {}

  @JvmStatic
  @ObjCName("notExportedFunction")
  fun notExportedFunction() {}

  @JvmField
  @ObjCName("exportedField_")
  var exportedField: Int = 10

  @JvmField
  @ObjCName("notExportedField_")
  var notExportedField: Int = 20

  @JvmField
  @ObjCName("CONSTNAME_")
  val CONSTNAME: Any? = Any()
 }
}
