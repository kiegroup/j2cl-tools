goog.module('jsconstructor.JsConstructorClass.B$impl');

const A = goog.require('jsconstructor.JsConstructorClass.A$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

class B extends A {
 //JsConstructor 'B(int)'.
 
 constructor(/** number */ x) {
  B.$clinit();
  super();
  /**@type {number} @nodts*/
  this.f_fB__jsconstructor_JsConstructorClass_B = 0;
  this.$ctor__jsconstructor_JsConstructorClass_B__int__void(x);
 }
 //Initialization from constructor 'B(int)'.
 /** @nodts */
 $ctor__jsconstructor_JsConstructorClass_B__int__void(/** number */ x) {
  this.$ctor__jsconstructor_JsConstructorClass_A__int__void(x + 1 | 0);
  this.$init__void_$p_jsconstructor_JsConstructorClass_B();
  this.f_fB__jsconstructor_JsConstructorClass_B = 3;
 }
 //Factory method corresponding to constructor 'B()'.
 /** @nodts @return {!B} */
 static $create__() {
  B.$clinit();
  let $instance = new B(10);
  $instance.$ctor__jsconstructor_JsConstructorClass_B__void();
  return $instance;
 }
 //Initialization from constructor 'B()'.
 /** @nodts */
 $ctor__jsconstructor_JsConstructorClass_B__void() {
  this.f_fB__jsconstructor_JsConstructorClass_B = 4;
 }
 //Factory method corresponding to constructor 'B(int, int)'.
 /** @nodts @return {!B} */
 static $create__int__int(/** number */ x, /** number */ y) {
  B.$clinit();
  let $instance = new B(x + y | 0);
  $instance.$ctor__jsconstructor_JsConstructorClass_B__int__int__void(x, y);
  return $instance;
 }
 //Initialization from constructor 'B(int, int)'.
 /** @nodts */
 $ctor__jsconstructor_JsConstructorClass_B__int__int__void(/** number */ x, /** number */ y) {
  this.f_fB__jsconstructor_JsConstructorClass_B = Math.imul(x, y);
 }
 /** @private @nodts */
 $init__void_$p_jsconstructor_JsConstructorClass_B() {
  this.f_fB__jsconstructor_JsConstructorClass_B = 2;
 }
 /** @nodts */
 static $clinit() {
  B.$clinit = () =>{};
  B.$loadModules();
  A.$clinit();
 }
 /** @nodts @return {boolean} */
 static $isInstance(/** ? */ instance) {
  return instance instanceof B;
 }
 
 /** @nodts */
 static $loadModules() {}
}
$Util.$setClassMetadata(B, 'jsconstructor.JsConstructorClass$B');

exports = B;

//# sourceMappingURL=JsConstructorClass$B.js.map
