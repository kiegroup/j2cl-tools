[F] => [F]
[F] => [constructor]
[x] => [x] "x"
[F] => [F.$clinit();] "jsconstructor.JsConstructorClass$F.<init>"
[F] => [super(x + 2 | 0);] "jsconstructor.JsConstructorClass$F.<init>"
[F] => [/**@type {number} @nodts*/
  this.f_fF__jsconstructor_JsConstructorClass_F = 0;] "jsconstructor.JsConstructorClass$F.<init>"
[fF] => [f_fF__jsconstructor_JsConstructorClass_F]
[F] => [this.$ctor__jsconstructor_JsConstructorClass_F__int__void(x);] "jsconstructor.JsConstructorClass$F.<init>"
[F] => [$ctor__jsconstructor_JsConstructorClass_F__int__void]
[x] => [x] "x"
[{
      super(x + 2); // must call super(int), cannot call super(int, int).
      this.fF = x + 3;
    }] => [this.$init__void_$p_jsconstructor_JsConstructorClass_F();] "jsconstructor.JsConstructorClass$F.<init>"
[this.fF = x + 3;] => [this.f_fF__jsconstructor_JsConstructorClass_F = x + 3 | 0;] "jsconstructor.JsConstructorClass$F.<init>"
[F] => [$init__void_$p_jsconstructor_JsConstructorClass_F]
[public int fF = 13;] => [this.f_fF__jsconstructor_JsConstructorClass_F = 13;] "jsconstructor.JsConstructorClass$F.<init>"
[F] => [$clinit]
[F] => [F.$clinit = () =>{};] "jsconstructor.JsConstructorClass$F.<clinit>"
[F] => [F.$loadModules();] "jsconstructor.JsConstructorClass$F.<clinit>"
[F] => [C.$clinit();] "jsconstructor.JsConstructorClass$F.<clinit>"
