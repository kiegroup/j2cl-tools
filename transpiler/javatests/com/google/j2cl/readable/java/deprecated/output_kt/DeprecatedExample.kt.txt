// Generated from "deprecated/DeprecatedExample.java"
@file:OptIn(ExperimentalObjCName::class)
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "REPEATED_BOUND",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER")

package deprecated

import javaemul.lang.*
import kotlin.Any
import kotlin.Int
import kotlin.OptIn
import kotlin.String
import kotlin.Suppress
import kotlin.experimental.ExperimentalObjCName
import kotlin.jvm.JvmField
import kotlin.jvm.JvmStatic
import kotlin.native.ObjCName

@ObjCName("J2ktDeprecatedDeprecatedExample", exact = true)
open class DeprecatedExample {
 @JvmField
 @ObjCName("deprecatedInstanceField_")
 var deprecatedInstanceField: String? = "deprecated field"

 @ObjCName("deprecatedInstanceMethod")
 open fun deprecatedInstanceMethod(
  @ObjCName("withNSString") someArg: String?
 ) {}

 constructor()

 @ObjCName("J2ktDeprecatedDeprecatedExampleCompanion", exact = true)
 companion object {
  @ObjCName("DEPRECATED_STATIC_FIELD_")
  const val DEPRECATED_STATIC_FIELD: String = "deprecated field"

  @JvmStatic
  @ObjCName("deprecatedStaticMethod")
  fun deprecatedStaticMethod(
   @ObjCName("withId") someObject: Any?
  ) {}
 }

 fun interface DeprecatedInterface {
  @ObjCName("doAThing")
  fun doAThing(
   @ObjCName("withInt") anInt: Int
  )
 }

 fun interface DeprecatedJsFunction {
  @ObjCName("doAThing")
  fun doAThing(
   @ObjCName("withId") aThing: Any?
  )
 }

 enum class DeprecatedEnum {
  A_VALUE;
 }

 enum class DeprecatedJsEnum {
  A_VALUE;
 }
}
